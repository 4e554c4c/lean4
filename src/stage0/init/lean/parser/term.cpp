// Lean compiler output
// Module: init.lean.parser.term
// Imports: init.lean.parser.level init.lean.parser.notation init.lean.expr
#include "runtime/object.h"
#include "runtime/apply.h"
typedef lean::object obj;    typedef lean::usize  usize;
typedef lean::uint8  uint8;  typedef lean::uint16 uint16;
typedef lean::uint32 uint32; typedef lean::uint64 uint64;
#if defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wunused-label"
#elif defined(__GNUC__) && !defined(__CLANG__)
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-label"
#pragma GCC diagnostic ignored "-Wunused-but-set-variable"
#endif
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__3___rarg___boxed(obj*, obj*);
obj* l_Lean_Parser_Term_bracketedBinder_HasView___boxed(obj*);
obj* l_Lean_Parser_Term_sort_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_withTrailing___rarg___lambda__1(obj*, obj*);
obj* l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_optIdent_HasView_x_27;
obj* l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_app_HasView_x_27___elambda__2___closed__1;
obj* l_Lean_Parser_Term_instImplicitBinderContent_HasView;
obj* l_Lean_Parser_Term_explicitBinder_HasView_x_27___boxed(obj*);
obj* l_Lean_Parser_Term_structInst_Parser___closed__1;
obj* l_Lean_Parser_Combinators_many1___at_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens___spec__1(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_sort_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_parenContent_HasView;
obj* l_Lean_Parser_Term_arrow;
obj* l_Lean_Parser_Term_sort_HasView_x_27;
obj* l_Lean_Parser_Term_structInstSource;
obj* l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_bracketedBinders_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_paren_HasView_x_27;
obj* l_Lean_Parser_Term_explicit_Parser_Lean_Parser_HasTokens;
obj* l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2___boxed(obj*);
obj* l_Lean_Parser_Term_show_HasView_x_27___lambda__1___closed__1;
extern obj* l_Lean_Parser_stringLit;
obj* l_fixCore___rarg___boxed(obj*, obj*, obj*);
obj* l_Lean_Parser_Term_binderDefault_HasView_x_27;
obj* l_Lean_Parser_Term_lambda_HasView_x_27;
obj* l_Lean_Parser_Term_borrowed;
obj* l_Lean_Parser_Term_simpleExplicitBinder;
obj* l_Lean_Parser_identUnivs_Parser(obj*, obj*, obj*, obj*, obj*);
extern "C" uint8 lean_name_dec_eq(obj*, obj*);
obj* l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___boxed(obj*);
obj* l_Lean_Parser_Combinators_sepBy___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__1(obj*, obj*, uint8, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_projection_Parser___closed__1;
extern obj* l_Lean_Parser_BasicParserM_Lean_Parser_MonadParsec;
extern obj* l_Lean_Parser_BasicParserM_Alternative;
obj* l___private_init_lean_parser_term_1__trailing___closed__1;
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___boxed(obj*);
obj* l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3;
obj* l_Lean_Parser_Term_assume_Parser___closed__1;
obj* l_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Trie_oldMatchPrefix___rarg(obj*, obj*);
obj* l_ReaderT_orelse___at___private_init_lean_parser_term_1__trailing___spec__11___boxed(obj*);
obj* l_Lean_Parser_Term_hole_Parser___closed__1;
obj* l_Lean_Parser_Term_builtinTrailingParsers_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_typeSpec_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3;
obj* l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Combinators_anyOf___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__1;
obj* l_DList_singleton___elambda__1___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_command_notationLike_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_structInstField_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_typed_HasView;
obj* l_Lean_Parser_Term_pi_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_builtinLeadingParsers;
obj* l_Lean_Parser_Term_hole_HasView;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__5___rarg___boxed(obj*, obj*);
obj* l_Lean_Parser_number_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__3___rarg___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_symbol_tokens___rarg(obj*, obj*);
namespace lean {
obj* nat_sub(obj*, obj*);
}
obj* l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_inaccessible_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_ParsecT_lookahead___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__4(obj*);
obj* l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_binderDefault_HasView;
obj* l_Lean_Parser_Term_structInstItem_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasTokens___closed__1;
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4(obj*);
obj* l_Lean_Parser_Term_paren_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_anonymousConstructor_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_typed_HasView_x_27;
obj* l_Lean_Parser_Term_anonymousInaccessible_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Combinators_longestChoice___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__1(obj*, obj*, obj*, obj*, obj*, obj*);
uint8 l_String_isEmpty(obj*);
obj* l_Lean_Parser_Term_binders_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_mixedBinder_HasView_x_27;
obj* l_Lean_Parser_Combinators_sepBy___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_optType_Parser___closed__1;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__5___boxed(obj*);
obj* l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_assumeAnonymous_HasView;
obj* l_Lean_Parser_Term_letLhsId;
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__1;
extern obj* l_Lean_Parser_Combinators_choiceAux___main___rarg___closed__1;
obj* l_Lean_Parser_Term_matchEquation_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_structInstWith_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_Term_depArrow_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_mixedBinder_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_paren_HasView_x_27___elambda__1___closed__2;
obj* l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_sort_HasView_x_27___elambda__1___closed__1;
obj* l_ReaderT_bind___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__1___boxed(obj*, obj*);
obj* l_Lean_Parser_Term_Subtype_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_projection;
obj* l_Lean_Parser_Term_optIdent_Parser___closed__1;
obj* l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__1;
obj* l_Lean_Parser_Term_lambda_Parser___closed__1;
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__2(obj*);
obj* l_Lean_Parser_Combinators_sepBy1_tokens___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_pi_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3;
obj* l_Lean_Parser_Term_simpleInstImplicitBinder;
obj* l_Lean_Parser_Term_assumeBinders_HasView_x_27;
obj* l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_let;
obj* l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(obj*);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__3___boxed(obj*);
obj* l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___rarg___closed__1;
obj* l_Lean_Parser_Term_structInstType_HasView_x_27;
obj* l_Lean_Parser_Term_parenSpecial;
obj* l_List_map___main___at_Lean_Parser_Term_match_HasView_x_27___elambda__1___spec__1(obj*);
extern obj* l_mjoin___rarg___closed__1;
obj* l_Lean_Parser_Term_matchEquation;
obj* l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_explicitBinderContent_HasView_x_27(uint8);
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_projection_tokens;
obj* l_Lean_Parser_Term_hole;
obj* l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3;
extern obj* l_Lean_Parser_choice;
obj* l_Lean_Parser_Term_assume_HasView;
obj* l_Lean_Parser_Term_have;
obj* l___private_init_lean_parser_combinators_1__many1Aux___main___at_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens___spec__2___boxed(obj*, obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
obj* l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1___closed__1;
obj* l_Lean_Parser_Term_pi_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_anonymousConstructor;
extern obj* l_Lean_Parser_finishCommentBlock___closed__2;
obj* l_Lean_Parser_Term_structInst_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_letLhsId_HasView;
obj* l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__2;
obj* l_List_foldr___main___at___private_init_lean_parser_term_2__leading___spec__6(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_termParser_run(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_bracketedBinder___closed__1;
extern obj* l_Lean_Parser_BasicParserM_Monad;
obj* l_Lean_Parser_Term_let_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_arrow_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__3;
obj* l_List_mfoldl___main___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__4(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_hole_HasView_x_27___elambda__1___closed__1;
obj* l_Lean_Parser_Term_implicitBinder_HasView_x_27;
obj* l___private_init_lean_parser_term_1__trailing___closed__2;
obj* l_Lean_Parser_Term_binderContent_Parser(uint8, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasTokens___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_currLbp___rarg___lambda__3___closed__2;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__2___rarg___boxed(obj*, obj*);
obj* l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__4___boxed(obj*);
obj* l_ReaderT_lift___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__3___rarg___boxed(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView___lambda__2___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__3;
obj* l_Lean_Parser_Term_inaccessible_Parser___closed__1;
obj* l_Lean_Parser_Term_arrow_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_Term_hole_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_Term_parenContent_HasView_x_27;
obj* l_Lean_Parser_Combinators_anyOf___at___private_init_lean_parser_term_1__trailing___spec__10(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_match_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_number_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__3___rarg(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_sortApp;
obj* l_Lean_Parser_Term_instImplicitNamedBinder_HasView;
obj* l_Lean_Parser_Term_inaccessible_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_have_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_ident_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__2(obj*, obj*);
obj* l_Lean_Parser_Term_explicit_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_structInstItem;
obj* l_Lean_Parser_Term_structInstSource_HasView;
obj* l_Lean_Parser_Term_Subtype_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_paren_HasView_x_27___elambda__1___closed__1;
obj* l_Lean_Parser_Term_from_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_ParsecT_lookahead___at___private_init_lean_parser_term_1__trailing___spec__8(obj*);
obj* l_Lean_Parser_Term_tuple;
obj* l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_number_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__3(obj*, obj*);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__4___rarg(obj*, obj*);
obj* l_Lean_Parser_identUnivs_HasView_x_27;
extern obj* l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
obj* l_Function_comp___rarg(obj*, obj*, obj*);
obj* l_Lean_Parser_Term_let_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_explicit_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_Term_binders_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_haveProof_HasView_x_27;
obj* l_Lean_Parser_ParsecT_labelsMkRes___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_projectionSpec;
obj* l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__2;
obj* l_List_foldl___main___at_Lean_Parser_Term_mkApp___spec__1(obj*, obj*);
obj* l_List_reverse___rarg(obj*);
obj* l_Lean_Parser_Term_let_HasView_x_27;
obj* l_Lean_Parser_Term_Lean_Parser_HasTokens;
obj* l_List_map___main___at_Lean_Parser_Term_structInst_HasView_x_27___elambda__1___spec__1(obj*);
obj* l_Lean_Parser_Term_binderDefaultVal_HasView;
obj* l_Lean_Parser_Term_explicitBinderContent___closed__1;
obj* l_Lean_Parser_Term_implicitBinder_HasView;
obj* l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27;
obj* l_Lean_Parser_Term_simpleBinder_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1___closed__1;
obj* l_ReaderT_orelse___at___private_init_lean_parser_term_1__trailing___spec__11(obj*);
obj* l_Lean_Parser_Term_projection_HasView_x_27;
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_tuple_HasView_x_27___spec__1(obj*, obj*, obj*);
extern obj* l_Lean_Parser_indexed___rarg___lambda__1___closed__1;
obj* l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___elambda__1(obj*, obj*);
obj* l_Lean_Parser_Term_sort_HasView_x_27___elambda__1(obj*);
extern obj* l_Lean_Parser_levelParser_run_Lean_Parser_HasView___closed__3;
uint8 l_Lean_Parser_Syntax_isOfKind___main(obj*, obj*);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__4___rarg___boxed(obj*, obj*);
obj* l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1(obj*);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__4(obj*);
obj* l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_paren_Parser___closed__1;
obj* l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_assume_HasView_x_27;
extern obj* l_Lean_Parser_Level_leading_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_app_Parser_Lean_Parser_HasView___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_MonadParsec_error___at___private_init_lean_parser_token_1__finishCommentBlockAux___main___spec__1___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___rarg___closed__1;
obj* l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__4;
obj* l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27___elambda__1(obj*);
obj* l___private_init_lean_parser_term_2__leading___closed__1;
extern obj* l_Lean_Parser_TermParserM_Alternative;
obj* l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__2;
obj* l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__2___closed__1;
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__2___rarg___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__2___boxed(obj*);
obj* l_Lean_Parser_Term_haveProof_HasView;
obj* l_Lean_Parser_Term_have_HasView;
obj* l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_Term_Subtype_HasView_x_27;
obj* l_Lean_Parser_identUnivSpec_HasView_x_27___lambda__1___closed__1;
obj* l_id___rarg___boxed(obj*);
obj* l_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___lambda__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_binderContent_HasView_x_27(uint8);
obj* l_Lean_Parser_Term_borrowed_HasView_x_27;
obj* l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasTokens___spec__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__4___rarg___boxed(obj*, obj*);
obj* l_String_OldIterator_remaining___main(obj*);
obj* l_Lean_Parser_Term_simpleBinder_View_toBinderInfo___main(obj*);
extern obj* l_Lean_Parser_detailIdent_HasView_x_27___elambda__1___closed__1;
obj* l_Lean_Parser_Term_explicitBinderContent___boxed(obj*);
obj* l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27;
obj* l_Lean_Parser_Term_explicitModifier;
obj* l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__3;
obj* l_Lean_Parser_Term_structInst_HasView;
obj* l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__2;
obj* l_List_map___main___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27;
obj* l_Lean_Parser_Term_instImplicitBinder;
obj* l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_explicitBinderContent_HasView___boxed(obj*);
obj* l_Lean_Parser_Combinators_node_view___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__3___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_app_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_Subtype_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_ident_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__2___rarg(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_implicitBinder;
obj* l_Lean_Parser_Term_binderIdent_Parser___closed__1;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__3(obj*);
obj* l_Lean_Parser_Term_pi_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_structInstType_HasView;
obj* l_Lean_Parser_Term_explicitBinder_HasView(uint8);
obj* l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__5;
obj* l_List_foldr___main___at___private_init_lean_parser_term_1__trailing___spec__13(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__1;
extern obj* l_Lean_Parser_number_HasView;
obj* l_Lean_Parser_Term_have_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_bracketedBinders;
obj* l_Lean_Parser_Term_sorry_HasView_x_27___elambda__1(obj*);
obj* l___private_init_lean_parser_combinators_2__sepByAux___main___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__2___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_structInstSource_HasView_x_27;
obj* l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__4;
obj* l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__4;
obj* l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_pi_HasView_x_27;
obj* l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_bindersTypes_HasView_x_27;
obj* l_Lean_Parser_ParsecT_lookahead___at___private_init_lean_parser_term_1__trailing___spec__8___boxed(obj*);
obj* l_Lean_Parser_Term_match_Parser___closed__1;
obj* l_Lean_Parser_Term_explicitBinder_HasView___boxed(obj*);
obj* l_Lean_Parser_Term_hole_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_haveFrom;
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens(uint8);
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__2;
obj* l_Lean_Parser_Term_app_HasView_x_27;
obj* l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_structInst;
obj* l_Lean_Parser_Term_show_HasView_x_27;
obj* l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__5;
obj* l_Lean_Parser_Term_bracketedBinder_HasView_x_27(uint8);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__2___boxed(obj*);
obj* l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_Term_binderIdent_HasView_x_27;
obj* l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasView___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView___lambda__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_haveTerm;
obj* l_Lean_Parser_Term_borrowed_Parser___closed__1;
extern obj* l_Lean_Parser_currLbp___rarg___lambda__1___closed__1;
obj* l_Lean_Parser_Term_hole_HasView_x_27;
obj* l_Lean_Parser_MonadParsec_longestMatch___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__3(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_match_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_mkApp(obj*, obj*);
extern obj* l_Lean_Parser_RecT_runParsec___rarg___lambda__1___closed__1;
obj* l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_instImplicitNamedBinder;
obj* l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView___lambda__2(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_if_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_number_Parser___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__1___boxed(obj*);
obj* l_Lean_Parser_Term_if_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_strictImplicitBinder;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__2(obj*);
obj* l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__2___closed__1;
obj* l_Lean_Parser_Combinators_node___at_Lean_Parser_detailIdentPart_Parser_Lean_Parser_HasTokens___spec__4(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Combinators_sepBy1___at_Lean_Parser_Term_match_HasView_x_27___spec__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_binder_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_binderIdent_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_from_Parser(obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__2___closed__1;
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_anonymousConstructor_HasView_x_27___spec__1___boxed(obj*, obj*, obj*);
obj* l_Lean_Parser_Term_projectionSpec_HasView;
obj* l_Lean_Parser_Term_sort_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_identUnivSpec_HasView;
obj* l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_simpleBinder_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___lambda__2___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_haveProof;
obj* l_Lean_Parser_Term_matchEquation_HasView;
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_match_HasView_x_27___spec__2___boxed(obj*, obj*, obj*);
obj* l_Lean_Parser_Syntax_asNode___main(obj*);
obj* l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_haveFrom_HasView;
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
obj* l_Lean_Parser_Term_bracketedBinder_HasView_x_27___elambda__1(obj*, obj*);
obj* l_Lean_Parser_Term_from_HasView_x_27___elambda__1(obj*);
obj* l___private_init_lean_parser_combinators_1__many1Aux___main___at_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens___spec__2(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_simpleBinder_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_ParsecT_lookahead___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__4___boxed(obj*);
obj* l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_depArrow;
obj* l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__4;
obj* l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_structInstField_HasView_x_27;
obj* l_Lean_Parser_Term_from_HasView_x_27;
obj* l_Lean_Parser_mkRawRes(obj*, obj*);
obj* l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__3;
obj* l_Lean_Parser_Term_if_HasView_x_27;
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__6;
obj* l_Lean_Parser_Term_let_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3;
obj* l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1___closed__2;
obj* l_Lean_Parser_Term_bindersRemainder_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_explicitModifier_HasView;
obj* l_Lean_Parser_Term_structInst_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__4;
obj* l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__3;
obj* l_Lean_Parser_Level_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_letLhs;
obj* l_Lean_Parser_ParsecT_failure___at_Lean_Parser_token___spec__4___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_explicitBinderContent(uint8);
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__2;
obj* l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_have_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_match_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_binder_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_binderDefaultTac_HasView_x_27;
obj* l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__3;
obj* l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens___spec__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__5___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_binderDefaultVal;
obj* l_List_enumFrom___main___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__2___closed__1;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__5(obj*);
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_number_x_27___spec__8___rarg(obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_command_notationLike_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_bracketedBinder___boxed(obj*);
obj* l___private_init_lean_parser_parsec_2__strAux___main(obj*, obj*, obj*);
obj* l_Lean_Parser_Combinators_sepBy_tokens___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_from_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_sortApp_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_borrowPrec;
obj* l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__4;
obj* l_Lean_Parser_Term_paren_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_simpleStrictImplicitBinder;
obj* l_Lean_Parser_Term_Parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_borrowed_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_bracketedBinder_Parser(uint8, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Combinators_anyOf___at_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___spec__2(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Combinators_try_view___rarg(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_structInstType_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1(obj*);
obj* l_Lean_Parser_Term_binders_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1___closed__1;
obj* l_ReaderT_bind___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__1___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_binderIdent;
obj* l_Lean_Parser_Term_simpleBinder_HasView_x_27;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__2___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_bindersExt_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___rarg___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_explicitBinder_HasView_x_27(uint8);
obj* l_Lean_Parser_Term_binder;
obj* l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg___boxed(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___rarg___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_sort_HasView_x_27___elambda__1___closed__2;
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_tuple_HasView_x_27___spec__1___boxed(obj*, obj*, obj*);
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_match_HasView_x_27___spec__2(obj*, obj*, obj*);
obj* l_Lean_Parser_Term_show_HasView;
obj* l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasView___lambda__2(obj*, obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_command_notationLike_HasView;
obj* l_Lean_Parser_MonadParsec_observing___at_Lean_Parser_peekToken___spec__2(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27___elambda__2(obj*);
obj* l_List_join___main___rarg(obj*);
obj* l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2___closed__1;
obj* l_Lean_Parser_Term_strictImplicitBinder_HasView;
obj* l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasTokens___boxed(obj*);
obj* l_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_structInstItem_HasView;
obj* l_Lean_Parser_Term_binderContent___closed__1;
extern obj* l_Lean_Parser_number;
obj* l_Lean_Parser_Term_arrow_Parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasTokens(uint8);
obj* l_ReaderT_bind___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__1(obj*, obj*);
obj* l_Lean_Parser_Term_letLhs_HasView;
obj* l_Lean_Parser_Term_binderDefaultTac_HasView;
extern obj* l_Lean_Parser_TrailingTermParserM_Alternative;
obj* l_Lean_Parser_identUnivSpec_HasView_x_27___lambda__1(obj*);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__3(obj*);
obj* l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_haveFrom_HasView_x_27;
obj* l_Lean_Parser_Term_binderDefault_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_tryView___at_Lean_Parser_stringLit_Parser___spec__1(obj*, obj*);
obj* l_Lean_Parser_number_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__3___boxed(obj*, obj*);
obj* l_Lean_Parser_ident_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__2___rarg___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_inaccessible_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_tuple_HasView_x_27;
obj* l_Lean_Parser_Term_assume_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_typeSpec_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_have_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__3;
obj* l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1___closed__1;
obj* l_Lean_Parser_Term_typed_HasView_x_27___elambda__2___closed__1;
obj* l_Lean_Parser_Term_inaccessible_HasView_x_27;
obj* l_Lean_Parser_Term_if;
obj* l_Lean_Parser_Term_tuple_HasView;
obj* l_Lean_Parser_Term_bracketedBinder_Parser___boxed(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_binder_HasView;
extern obj* l_Lean_Parser_command_notation_HasView_x_27___elambda__1___closed__1;
extern obj* l_Lean_Parser_Combinators_anyOf___rarg___closed__1;
obj* l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__2___closed__1;
obj* l_Lean_Parser_Syntax_mkNode(obj*, obj*);
obj* l_Lean_Parser_Term_depArrow_HasView_x_27___elambda__2___closed__1;
obj* l_Lean_Parser_Term_arrow_HasView_x_27;
obj* l_Lean_Parser_Term_binder_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Level_Parser_Lean_Parser_HasTokens(obj*);
obj* l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_explicit_HasView;
obj* l_Lean_Parser_Term_anonymousInaccessible_Parser___closed__1;
obj* l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27;
obj* l_Lean_Parser_MonadParsec_strCore___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_ReaderT_orelse___at___private_init_lean_parser_term_1__trailing___spec__11___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27;
obj* l_Lean_Parser_Term_simpleBinder;
obj* l_Lean_Parser_Term_typed_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_Term_projection_Parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_Term_binderDefault_HasView_x_27___elambda__1(obj*);
extern obj* l_Lean_Parser_currLbp___rarg___lambda__3___closed__1;
namespace lean {
uint8 nat_dec_lt(obj*, obj*);
}
obj* l_Lean_Parser_Term_depArrow_HasView;
obj* l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView;
obj* l_Lean_Parser_Term_instImplicitBinder_HasView_x_27;
obj* l_Lean_Parser_Term_simpleBinder_Parser___closed__1;
obj* l_Lean_Parser_Term_pi_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_projectionSpec_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Combinators_sepBy1___at_Lean_Parser_Term_match_HasView_x_27___spec__1(obj*, obj*, uint8, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_typeSpec_HasView_x_27;
obj* l_Lean_Parser_Term_structInstWith_HasView;
obj* l_Lean_Parser_Term_simpleImplicitBinder_HasView;
obj* l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_if_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1(obj*);
extern obj* l___private_init_lean_parser_combinators_1__many1Aux___main___rarg___closed__1;
obj* l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___rarg(obj*, obj*, obj*, obj*);
obj* l___private_init_lean_parser_pratt_1__trailingLoop___main___at_Lean_Parser_termParser_run___spec__3___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_depArrow_HasView_x_27;
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___closed__1;
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_letLhsId_HasView_x_27;
obj* l_Lean_Parser_Term_anonymousInaccessible;
extern obj* l_Lean_Parser_noKind;
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__4___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__1;
obj* l_Lean_Parser_Term_lambda_HasView;
obj* l_Lean_Parser_Term_app_Parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_haveFrom_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_app_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__4;
obj* l_Lean_Parser_Combinators_longestMatch___at___private_init_lean_parser_term_1__trailing___spec__6(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasView;
obj* l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_bindersExt;
obj* l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_explicit_HasView_x_27;
extern obj* l_Lean_Parser_matchToken___closed__1;
obj* l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_paren;
obj* l_List_append___rarg(obj*, obj*);
obj* l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__1;
extern "C" obj* lean_name_mk_string(obj*, obj*);
obj* l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasView___lambda__1(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_sort;
obj* l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__3;
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___boxed(obj*);
obj* l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1___closed__2;
obj* l_Lean_Parser_Term_mixedBinder;
obj* l_Lean_Parser_Term_arrow_Parser___closed__1;
obj* l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__3;
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__5___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_binderIdent_HasView;
obj* l_Lean_Parser_ParsecT_orelseMkRes___rarg(obj*, obj*);
obj* l_Lean_Parser_identUnivSpec_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4___boxed(obj*);
obj* l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_binderContent_HasView(uint8);
obj* l_ReaderT_lift___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__2___rarg___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_structInst_HasView_x_27;
namespace lean {
obj* nat_add(obj*, obj*);
}
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__2___boxed(obj*);
obj* l_Lean_Parser_Term_let_HasView_x_27___lambda__1___closed__1;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__4(obj*);
obj* l_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_typeSpec_Parser___closed__1;
obj* l_Lean_Parser_Term_paren_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_sorry;
obj* l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__3;
obj* l_Lean_Parser_Term_match;
obj* l_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_depArrow_HasView_x_27___elambda__2(obj*);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__2___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasView___lambda__1___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_explicitBinder___closed__1;
obj* l_Lean_Parser_Term_sort_Parser___closed__1;
obj* l_Lean_Parser_tokens___rarg(obj*);
obj* l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1(obj*);
namespace lean {
uint8 nat_dec_eq(obj*, obj*);
}
obj* l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__2___rarg___boxed(obj*, obj*);
obj* l_Lean_Parser_Term_borrowed_Parser(obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
extern obj* l_Lean_Parser_peekToken___closed__1;
obj* l_Lean_Parser_Term_parenSpecial_HasView_x_27;
obj* l_Lean_Parser_Term_assumeAnonymous_HasView_x_27;
obj* l_Lean_Parser_Term_Subtype;
obj* l_Lean_Parser_Term_anonymousInaccessible_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_ParsecT_tryMkRes___rarg(obj*);
obj* l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_assumeBinders_HasView;
obj* l_Lean_Parser_Term_sorry_HasView_x_27___elambda__1___closed__1;
obj* l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_let_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_bindersRemainder;
obj* l_Lean_Parser_Term_binder_Parser___closed__1;
obj* l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView(uint8);
obj* l_Lean_Parser_Term_binders_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_sorry_HasView_x_27___elambda__2(obj*);
obj* l_List_foldl___main___at___private_init_lean_parser_term_1__trailing___spec__12(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_identUnivs;
obj* l_List_map___main___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__2___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_optType_Parser(obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_TrailingTermParserM_Lean_Parser_MonadParsec;
obj* l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_sorry_HasView_x_27;
obj* l_Lean_Parser_Term_parenSpecial_HasView;
obj* l_Lean_Parser_Term_show_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_sortApp_Parser___closed__1;
obj* l_Lean_Parser_Term_optType_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_binderContent_HasView___boxed(obj*);
obj* l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1(obj*);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__5___boxed(obj*);
obj* l_Lean_Parser_Term_sorry_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_anonymousConstructor_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_Subtype_HasView;
obj* l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_identUnivs_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_binderDefaultVal_HasView_x_27;
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___boxed(obj*);
obj* l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView(uint8);
obj* l_Lean_Parser_Term_parenContent;
obj* l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_match_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27___elambda__1___closed__1;
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_structInst_HasView_x_27___spec__1___boxed(obj*, obj*, obj*);
obj* l_Lean_Parser_MonadParsec_strCore___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_parenContent_HasView_x_27___elambda__1(obj*);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__3___rarg___boxed(obj*, obj*);
obj* l_Lean_Parser_Term_bindersExt_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Combinators_seqRight_view___rarg(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_bindersExt_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_depArrow_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_let_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_if_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_simpleImplicitBinder;
obj* l_Lean_Parser_Term_binders;
obj* l_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___rarg(obj*, obj*, obj*);
obj* l_Lean_Parser_Term_from_Parser___closed__1;
obj* l_Lean_Parser_Term_if_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_haveTerm_HasView;
obj* l_Lean_Parser_Term_typed;
obj* l_Lean_Parser_Term_app_HasView;
obj* l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__5___boxed(obj*);
obj* l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_assume;
obj* l_Lean_Parser_Term_bracketedBinders_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_MonadParsec_longestMatch___at___private_init_lean_parser_term_1__trailing___spec__7(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_Subtype_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_from_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___lambda__2(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_projectionSpec_HasView_x_27;
obj* l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_pi_Parser___closed__1;
obj* l_Lean_Parser_Term_from_HasView;
obj* l_Lean_Parser_Combinators_longestMatch___at___private_init_lean_parser_term_2__leading___spec__7(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_projection_HasView;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__5___rarg(obj*, obj*);
extern obj* l_Lean_Parser_maxPrec;
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4___rarg___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__5;
obj* l_List_mfoldr___main___at___private_init_lean_parser_term_1__trailing___spec__9___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_bindersRemainder_HasView_x_27;
obj* l_Lean_Parser_Term_Subtype_Parser___closed__1;
obj* l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__3;
obj* l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5;
obj* l_Lean_Parser_identUnivSpec;
obj* l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2___rarg___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_arrow_HasView_x_27___elambda__2___closed__1;
obj* l_Lean_Parser_Term_instImplicitAnonymousBinder;
obj* l_Lean_Parser_Term_sorry_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_Term_binderIdent_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_binders_Parser___closed__1;
obj* l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_borrowed_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_letLhs_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_bindersTypes_HasView;
obj* l_Lean_Parser_Term_sortApp_HasView;
obj* l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_anonymousConstructor_Parser___closed__1;
extern obj* l_Lean_Parser_levelParser_run_Lean_Parser_HasView___closed__2;
obj* l_Lean_Parser_Term_structInstItem_HasView_x_27;
obj* l_Lean_Parser_Term_optIdent_HasView;
obj* l_Lean_Parser_Term_assumeBinders_HasView_x_27___elambda__1(obj*);
obj* l_String_trim(obj*);
obj* l___private_init_lean_parser_term_1__trailing(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_ParsecT_bindMkRes___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_assume_HasView_x_27___lambda__1(obj*);
obj* l_List_mfoldr___main___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__5___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_let_Parser___closed__1;
obj* l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__3;
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_structInst_HasView_x_27___spec__1(obj*, obj*, obj*);
obj* l_Lean_Parser_Term_letLhsId_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_hole_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_sorry_HasView;
obj* l_Lean_Parser_Term_binderDefault;
obj* l_Lean_Parser_Term_binderDefault_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_from;
obj* l_Lean_Parser_Term_bracketedBinder_HasView(uint8);
obj* l_Lean_Parser_Term_tuple_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_anonymousConstructor_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView;
obj* l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2___closed__2;
extern obj* l_Lean_Parser_number_HasView_x_27___elambda__1___closed__6;
obj* l_Lean_Parser_Term_structInstType;
obj* l_Lean_Parser_Term_explicitModifier_HasView_x_27;
obj* l_Lean_Parser_Term_show;
obj* l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__2;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__4___rarg(obj*, obj*);
extern obj* l_Lean_Parser_MonadParsec_longestMatch___rarg___lambda__2___closed__1;
obj* l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_explicitBinder(uint8);
obj* l_Lean_Parser_Term_bracketedBinders_Parser_Lean_Parser_HasView;
extern obj* l_Lean_Parser_TermParserM_Monad;
obj* l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasView___lambda__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*);
uint8 l_Lean_Name_quickLt(obj*, obj*);
obj* l_Lean_Parser_Term_simpleBinder_View_toBinderInfo(obj*);
obj* l_Lean_Parser_Term_sortApp_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_lambda_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_sorry_Parser___closed__1;
obj* l_Lean_Parser_Term_bracketedBinders_HasView;
extern "C" obj* lean_name_mk_numeral(obj*, obj*);
obj* l_Lean_Parser_Term_Subtype_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___closed__1;
obj* l_Lean_Parser_Term_if_Parser___closed__1;
obj* l_Lean_Parser_Term_assumeAnonymous;
obj* l_Lean_Parser_Term_show_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_lambda_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_binderIdent_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1(obj*);
obj* l_Lean_Parser_Term_structInstSource_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_currLbp___at_Lean_Parser_termParser_run___spec__5(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_match_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_show_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_show_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_token(obj*, obj*, obj*);
obj* l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasView___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_anonymousConstructor_HasView;
obj* l_Lean_Parser_Term_binderDefaultTac;
obj* l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_bindersRemainder_HasView;
obj* l_Lean_Parser_Combinators_many1___at_Lean_Parser_command_NotationSpec_Parser_Lean_Parser_HasTokens___spec__2(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__4;
obj* l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27;
obj* l_Lean_Parser_Term_parenSpecial_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27;
obj* l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_List_cons_tokens___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_match_HasView_x_27;
obj* l_Lean_Parser_Term_from_HasView_x_27___elambda__2___closed__1;
obj* l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_structInstWith_HasView_x_27;
obj* l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_haveProof_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_bracketedBinders_Parser___closed__1;
obj* l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_hole_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_simpleBinder_HasView;
obj* l_Lean_Parser_Term_depArrow_Parser___closed__1;
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___boxed(obj*);
obj* l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_have_Parser___closed__1;
obj* l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_binder_HasView_x_27;
obj* l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__4;
obj* l___private_init_lean_parser_pratt_1__trailingLoop___main___at_Lean_Parser_termParser_run___spec__3(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_ReaderT_lift___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__1___rarg___boxed(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_simpleExplicitBinder_HasView;
obj* l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__2___closed__1;
obj* l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_inaccessible;
extern obj* l_Lean_Parser_Level_trailing_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_borrowed_HasView;
obj* l_Lean_Parser_Term_binders_HasView_x_27;
obj* l_Lean_Parser_Term_projection_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_sortApp_HasView_x_27___elambda__2___closed__1;
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__5;
obj* l_Lean_Parser_Term_anonymousConstructor_HasView_x_27;
obj* l_Lean_Parser_currLbp___at_Lean_Parser_termParser_run___spec__5___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_app_Parser_Lean_Parser_HasView___lambda__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_assume_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_levelParser_run(obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_number_HasView_x_27___elambda__1___closed__4;
obj* l_ReaderT_orelse___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__2___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_optType_viewDefault;
obj* l_Lean_Parser_Term_anonymousInaccessible_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___boxed(obj*);
obj* l_Lean_Parser_Term_binder_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_tokenMapCons_tokens___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_bracketedBinder_HasView_x_27___boxed(obj*);
obj* l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___boxed(obj*);
obj* l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_explicit;
obj* l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___closed__1;
obj* l_Lean_Parser_Term_binderContent___boxed(obj*);
obj* l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__5;
obj* l_Lean_Parser_Term_arrow_HasView;
obj* l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__3;
obj* l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView_x_27___elambda__1(obj*);
extern obj* l_Lean_Parser_number_HasView_x_27___lambda__1___closed__6;
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_structInstWith_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_Subtype_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_optIdent_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_bindersExt_HasView;
obj* l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_instImplicitBinderContent;
obj* l_Lean_Parser_Term_paren_HasView;
obj* l_Lean_Parser_Term_bindersTypes;
obj* l_Lean_Parser_Term_lambda;
obj* l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1;
obj* l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2(obj*);
obj* l_Lean_Parser_Term_explicit_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__2___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__3;
extern obj* l_Lean_Name_toString___closed__1;
obj* l_Lean_Parser_Term_optIdent;
obj* l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens;
obj* l_Lean_Parser_identUnivs_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_builtinTrailingParsers;
obj* l_Lean_Parser_Term_instImplicitBinder_HasView;
obj* l_Lean_Parser_Term_binderContent_Parser___boxed(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_bindersExt_Parser___closed__1;
obj* l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasView___lambda__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_hole_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_bracketedBinder(uint8);
extern obj* l_Lean_Parser_command_mixfix_kind_HasView_x_27___elambda__1___closed__6;
obj* l_Lean_Parser_Term_depArrow_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_bindersExt_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_lambda_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__5(obj*);
obj* l_Lean_Parser_Term_matchEquation_HasView_x_27;
obj* l_Option_toMonad___main___at_Lean_Parser_indexed___spec__2___rarg(obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_sorry_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_structInstWith;
obj* l_Lean_Parser_Term_bracketedBinders_HasView_x_27;
obj* l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_assume_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_show_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_typeSpec_HasView;
obj* l_Lean_Parser_Term_explicitBinder___boxed(obj*);
obj* l_Lean_Parser_Term_pi_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_ParsecT_lookahead___at___private_init_lean_parser_term_1__trailing___spec__8___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__2;
obj* l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_binder_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_explicitBinderContent_HasView(uint8);
obj* l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_app_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_pi;
obj* l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___boxed(obj*);
obj* l_Lean_Parser_Term_mixedBinder_HasView;
obj* l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__4(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
extern obj* l_Lean_Parser_TrailingTermParserM_Monad;
obj* l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__3;
obj* l_Lean_Parser_identUnivSpec_Parser(obj*, obj*, obj*);
obj* l_Lean_Parser_identUnivSpec_HasView_x_27;
obj* l_Lean_Parser_Term_paren_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_assume_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_sortApp_Parser(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_explicit_Parser___closed__1;
obj* l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_assume_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_identUnivSpec_Parser___closed__1;
obj* l_Lean_Parser_Term_show_Parser___closed__1;
obj* l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__2___closed__1;
obj* l_Lean_Parser_Term_projection_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_structInstWith_HasView_x_27___elambda__2___closed__1;
obj* l___private_init_lean_parser_combinators_2__sepByAux___main___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__2(obj*, obj*, uint8, uint8, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_depArrow_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1;
obj* l___private_init_lean_parser_term_2__leading(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_inaccessible_HasView;
obj* l_Lean_Parser_ParsecT_lookahead___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__4___rarg(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_bindersExt_HasView_x_27;
extern obj* l_Lean_Parser_TermParserM_MonadExcept;
obj* l_Lean_Parser_Term_inaccessible_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens;
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_anonymousConstructor_HasView_x_27___spec__1(obj*, obj*, obj*);
obj* l_String_quote(obj*);
obj* l_Lean_Parser_identUnivs_Parser___closed__1;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__5___rarg___boxed(obj*, obj*);
obj* l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___lambda__1(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_app_Parser___closed__1;
obj* l_Lean_Parser_Term_app_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_match_HasView;
obj* l_Lean_Parser_Term_getLeading___boxed(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens___spec__1(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_explicitBinder_HasView_x_27___closed__1;
obj* l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_typeSpec_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__6;
obj* l_Lean_Parser_Term_getLeading(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__7;
obj* l_Lean_Parser_Substring_ofString(obj*);
obj* l_Lean_Parser_Term_structInstField;
obj* l_Lean_Parser_Term_sortApp_HasView_x_27;
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___closed__2;
obj* l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7(obj*, uint8, obj*, obj*, obj*, obj*, obj*);
obj* l_List_map___main___at_Lean_Parser_Term_tuple_HasView_x_27___elambda__1___spec__1(obj*);
extern obj* l_Lean_Parser_TrailingTermParserM_MonadExcept;
extern obj* l_Lean_Parser_BasicParserM_MonadExcept;
obj* l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__4;
obj* l_Lean_Parser_Term_sort_HasView;
obj* l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView_x_27;
obj* l_List_map___main___at_Lean_Parser_identUnivSpec_HasView_x_27___elambda__1___spec__1(obj*);
obj* l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___lambda__1___boxed(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasTokens;
obj* l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_identUnivs_HasView;
obj* l_Lean_Parser_Term_if_HasView;
obj* l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__2(obj*);
obj* l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_haveTerm_HasView_x_27;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__2(obj*);
extern obj* l_Lean_Parser_Combinators_many___rarg___closed__1;
obj* l_Lean_Parser_Combinators_many___at_Lean_Parser_command_NotationSpec_Parser_Lean_Parser_HasTokens___spec__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_binderDefault_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Term_structInstField_HasView;
obj* l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasView;
extern obj* l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
obj* l_Lean_Parser_symbolCore___at_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___spec__1___boxed(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_List_mfoldr___main___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__5(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_letLhs_HasView_x_27;
obj* l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__4___rarg___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_explicitBinder_HasView_x_27___closed__2;
obj* l_Lean_Parser_TokenMap_ofList___main___rarg(obj*);
obj* l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__4;
obj* l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_bindersRemainder_HasView_x_27___elambda__1___closed__1;
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__5___rarg___boxed(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_ident_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__2___boxed(obj*, obj*);
obj* l_Lean_Parser_Term_binderIdent_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_typeSpec;
obj* l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__4;
obj* l_Lean_Parser_Term_optIdent_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1(obj*);
obj* l_Lean_Parser_Term_binderContent(uint8);
obj* l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_if_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_prattParser___at_Lean_Parser_levelParser_run___spec__1(obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__5(obj*);
obj* l_Lean_Parser_Term_simpleInstImplicitBinder_HasView;
obj* l_Lean_Parser_Term_have_Parser_Lean_Parser_HasView;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__3___boxed(obj*);
obj* l_Lean_Parser_Term_implicitBinder_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed(obj*);
obj* l_Lean_Parser_Term_binders_HasView;
obj* l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__2;
obj* l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_let_HasView;
obj* l_Lean_Parser_Term_sort_HasView_x_27___lambda__1(obj*);
obj* l_Lean_Parser_Combinators_optional_view___rarg(obj*, obj*, obj*, obj*, obj*, obj*, uint8);
obj* l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_binders_Parser(obj*, obj*, obj*, obj*, obj*);
obj* l_Lean_Parser_Term_bracketedBinder_HasView_x_27___closed__1;
obj* l_Lean_Parser_Term_have_HasView_x_27;
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__4___boxed(obj*);
obj* l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__2;
extern obj* l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
obj* l_Lean_Parser_Term_binderDefault_Parser___closed__1;
obj* l_Lean_Parser_Term_pi_HasView;
obj* l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__1;
extern obj* l_Lean_Parser_number_Parser___rarg___lambda__1___closed__1;
obj* l_Lean_Parser_Term_lambda_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_typed_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_Term_structInstSource_HasView_x_27___elambda__1___closed__1;
obj* l_List_map___main___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__2(obj*);
obj* l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1;
obj* l_Lean_Parser_Term_optType_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_assumeBinders;
obj* l_Lean_Parser_Term_simpleBinder_Parser_Lean_Parser_HasView;
obj* l_Lean_Parser_Term_anonymousInaccessible_HasView;
obj* l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__4;
extern obj* l_String_splitAux___main___closed__1;
obj* l_List_mfoldr___main___at___private_init_lean_parser_term_1__trailing___spec__9(obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*, obj*);
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__3___rarg(obj*, obj*);
obj* l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___elambda__1(obj*);
obj* l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__5;
namespace lean {
obj* string_length(obj*);
}
obj* l_Lean_Parser_Term_app;
obj* _init_l_Lean_Parser_identUnivSpec() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("identUnivSpec");
x_6 = lean_name_mk_string(x_4, x_5);
return x_6;
}
}
obj* l_List_map___main___at_Lean_Parser_identUnivSpec_HasView_x_27___elambda__1___spec__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_8; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
x_7 = l_List_map___main___at_Lean_Parser_identUnivSpec_HasView_x_27___elambda__1___spec__1(x_4);
if (lean::is_scalar(x_6)) {
 x_8 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_8 = x_6;
}
lean::cnstr_set(x_8, 0, x_2);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
}
obj* l_Lean_Parser_identUnivSpec_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_List_map___main___at_Lean_Parser_identUnivSpec_HasView_x_27___elambda__1___spec__1(x_3);
x_9 = l_Lean_Parser_noKind;
x_10 = l_Lean_Parser_Syntax_mkNode(x_9, x_8);
x_11 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_12 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_10);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::box(3);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_13);
x_16 = l_Lean_Parser_identUnivSpec;
x_17 = l_Lean_Parser_Syntax_mkNode(x_16, x_15);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_18 = lean::cnstr_get(x_5, 0);
lean::inc(x_18);
lean::dec(x_5);
x_21 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_21, 0, x_18);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_11);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_10);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::box(3);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_23);
x_26 = l_Lean_Parser_identUnivSpec;
x_27 = l_Lean_Parser_Syntax_mkNode(x_26, x_25);
return x_27;
}
}
else
{
obj* x_28; obj* x_31; 
x_28 = lean::cnstr_get(x_1, 0);
lean::inc(x_28);
lean::dec(x_1);
x_31 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_31, 0, x_28);
if (lean::obj_tag(x_5) == 0)
{
obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; 
x_32 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_10);
lean::cnstr_set(x_33, 1, x_32);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_31);
lean::cnstr_set(x_34, 1, x_33);
x_35 = l_Lean_Parser_identUnivSpec;
x_36 = l_Lean_Parser_Syntax_mkNode(x_35, x_34);
return x_36;
}
else
{
obj* x_37; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; 
x_37 = lean::cnstr_get(x_5, 0);
lean::inc(x_37);
lean::dec(x_5);
x_40 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_40, 0, x_37);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_11);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_10);
lean::cnstr_set(x_42, 1, x_41);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_31);
lean::cnstr_set(x_43, 1, x_42);
x_44 = l_Lean_Parser_identUnivSpec;
x_45 = l_Lean_Parser_Syntax_mkNode(x_44, x_43);
return x_45;
}
}
}
}
obj* _init_l_Lean_Parser_identUnivSpec_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = l_Lean_Parser_Syntax_asNode___main(x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; obj* x_4; 
x_3 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_4 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_4, 0, x_0);
lean::cnstr_set(x_4, 1, x_3);
lean::cnstr_set(x_4, 2, x_0);
return x_4;
}
else
{
obj* x_5; obj* x_8; obj* x_11; obj* x_12; 
x_5 = lean::cnstr_get(x_2, 0);
lean::inc(x_5);
lean::dec(x_2);
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
x_11 = l_List_map___main___at_Lean_Parser_identUnivSpec_HasView_x_27___elambda__1___spec__1(x_8);
x_12 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_12, 0, x_0);
lean::cnstr_set(x_12, 1, x_11);
lean::cnstr_set(x_12, 2, x_0);
return x_12;
}
}
}
obj* l_Lean_Parser_identUnivSpec_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_identUnivSpec_HasView_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; 
x_36 = l_Lean_Parser_Syntax_asNode___main(x_28);
if (lean::obj_tag(x_36) == 0)
{
if (lean::obj_tag(x_27) == 0)
{
obj* x_37; obj* x_38; obj* x_39; 
x_37 = lean::box(0);
x_38 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_39 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_39, 0, x_18);
lean::cnstr_set(x_39, 1, x_38);
lean::cnstr_set(x_39, 2, x_37);
return x_39;
}
else
{
obj* x_40; 
x_40 = lean::cnstr_get(x_27, 0);
lean::inc(x_40);
lean::dec(x_27);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_43; obj* x_46; obj* x_47; obj* x_48; 
x_43 = lean::cnstr_get(x_40, 0);
lean::inc(x_43);
lean::dec(x_40);
x_46 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_46, 0, x_43);
x_47 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_48 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_48, 0, x_18);
lean::cnstr_set(x_48, 1, x_47);
lean::cnstr_set(x_48, 2, x_46);
return x_48;
}
case 3:
{
obj* x_49; obj* x_50; obj* x_51; 
x_49 = lean::box(0);
x_50 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_51 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_51, 0, x_18);
lean::cnstr_set(x_51, 1, x_50);
lean::cnstr_set(x_51, 2, x_49);
return x_51;
}
default:
{
obj* x_53; obj* x_54; obj* x_55; 
lean::dec(x_40);
x_53 = lean::box(0);
x_54 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_18);
lean::cnstr_set(x_55, 1, x_54);
lean::cnstr_set(x_55, 2, x_53);
return x_55;
}
}
}
}
else
{
obj* x_56; obj* x_58; obj* x_59; obj* x_62; 
x_56 = lean::cnstr_get(x_36, 0);
if (lean::is_exclusive(x_36)) {
 lean::cnstr_set(x_36, 0, lean::box(0));
 x_58 = x_36;
} else {
 lean::inc(x_56);
 lean::dec(x_36);
 x_58 = lean::box(0);
}
x_59 = lean::cnstr_get(x_56, 1);
lean::inc(x_59);
lean::dec(x_56);
x_62 = l_List_map___main___at_Lean_Parser_identUnivSpec_HasView_x_27___elambda__1___spec__1(x_59);
if (lean::obj_tag(x_27) == 0)
{
obj* x_64; obj* x_65; 
lean::dec(x_58);
x_64 = lean::box(0);
x_65 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_65, 0, x_18);
lean::cnstr_set(x_65, 1, x_62);
lean::cnstr_set(x_65, 2, x_64);
return x_65;
}
else
{
obj* x_66; 
x_66 = lean::cnstr_get(x_27, 0);
lean::inc(x_66);
lean::dec(x_27);
switch (lean::obj_tag(x_66)) {
case 0:
{
obj* x_69; obj* x_72; obj* x_73; 
x_69 = lean::cnstr_get(x_66, 0);
lean::inc(x_69);
lean::dec(x_66);
if (lean::is_scalar(x_58)) {
 x_72 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_72 = x_58;
}
lean::cnstr_set(x_72, 0, x_69);
x_73 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_73, 0, x_18);
lean::cnstr_set(x_73, 1, x_62);
lean::cnstr_set(x_73, 2, x_72);
return x_73;
}
case 3:
{
obj* x_75; obj* x_76; 
lean::dec(x_58);
x_75 = lean::box(0);
x_76 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_76, 0, x_18);
lean::cnstr_set(x_76, 1, x_62);
lean::cnstr_set(x_76, 2, x_75);
return x_76;
}
default:
{
obj* x_79; obj* x_80; 
lean::dec(x_66);
lean::dec(x_58);
x_79 = lean::box(0);
x_80 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_80, 0, x_18);
lean::cnstr_set(x_80, 1, x_62);
lean::cnstr_set(x_80, 2, x_79);
return x_80;
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_identUnivSpec_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_identUnivSpec_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_identUnivSpec_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_identUnivSpec_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_identUnivSpec_HasView_x_27;
return x_0;
}
}
obj* l___private_init_lean_parser_combinators_1__many1Aux___main___at_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens___spec__2(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; uint8 x_7; 
x_6 = lean::mk_nat_obj(0ul);
x_7 = lean::nat_dec_eq(x_2, x_6);
if (x_7 == 0)
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_15; obj* x_16; 
x_8 = lean::mk_nat_obj(1ul);
x_9 = lean::nat_sub(x_2, x_8);
lean::inc(x_3);
lean::inc(x_0);
x_15 = lean::apply_3(x_0, x_3, x_4, x_5);
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
if (lean::obj_tag(x_16) == 0)
{
obj* x_18; 
x_18 = lean::cnstr_get(x_15, 1);
lean::inc(x_18);
lean::dec(x_15);
x_10 = x_16;
x_11 = x_18;
goto lbl_12;
}
else
{
obj* x_21; uint8 x_23; obj* x_24; obj* x_25; 
x_21 = lean::cnstr_get(x_16, 0);
x_23 = lean::cnstr_get_scalar<uint8>(x_16, sizeof(void*)*1);
if (lean::is_exclusive(x_16)) {
 lean::cnstr_set(x_16, 0, lean::box(0));
 x_24 = x_16;
} else {
 lean::inc(x_21);
 lean::dec(x_16);
 x_24 = lean::box(0);
}
x_25 = lean::cnstr_get(x_21, 3);
lean::inc(x_25);
if (lean::obj_tag(x_25) == 0)
{
obj* x_27; obj* x_30; obj* x_32; obj* x_34; obj* x_36; obj* x_37; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; 
x_27 = lean::cnstr_get(x_15, 1);
lean::inc(x_27);
lean::dec(x_15);
x_30 = lean::cnstr_get(x_21, 0);
x_32 = lean::cnstr_get(x_21, 1);
x_34 = lean::cnstr_get(x_21, 2);
if (lean::is_exclusive(x_21)) {
 lean::cnstr_release(x_21, 3);
 x_36 = x_21;
} else {
 lean::inc(x_30);
 lean::inc(x_32);
 lean::inc(x_34);
 lean::dec(x_21);
 x_36 = lean::box(0);
}
x_37 = lean::box(3);
lean::inc(x_1);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_37);
lean::cnstr_set(x_39, 1, x_1);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_37);
lean::cnstr_set(x_40, 1, x_39);
x_41 = l_List_reverse___rarg(x_40);
x_42 = l_Lean_Parser_noKind;
x_43 = l_Lean_Parser_Syntax_mkNode(x_42, x_41);
x_44 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_44, 0, x_43);
if (lean::is_scalar(x_36)) {
 x_45 = lean::alloc_cnstr(0, 4, 0);
} else {
 x_45 = x_36;
}
lean::cnstr_set(x_45, 0, x_30);
lean::cnstr_set(x_45, 1, x_32);
lean::cnstr_set(x_45, 2, x_34);
lean::cnstr_set(x_45, 3, x_44);
if (x_23 == 0)
{
uint8 x_46; obj* x_47; obj* x_48; 
x_46 = 0;
if (lean::is_scalar(x_24)) {
 x_47 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_47 = x_24;
}
lean::cnstr_set(x_47, 0, x_45);
lean::cnstr_set_scalar(x_47, sizeof(void*)*1, x_46);
x_48 = x_47;
x_10 = x_48;
x_11 = x_27;
goto lbl_12;
}
else
{
uint8 x_49; obj* x_50; obj* x_51; 
x_49 = 1;
if (lean::is_scalar(x_24)) {
 x_50 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_50 = x_24;
}
lean::cnstr_set(x_50, 0, x_45);
lean::cnstr_set_scalar(x_50, sizeof(void*)*1, x_49);
x_51 = x_50;
x_10 = x_51;
x_11 = x_27;
goto lbl_12;
}
}
else
{
obj* x_52; obj* x_55; obj* x_57; obj* x_59; obj* x_61; obj* x_62; obj* x_64; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; 
x_52 = lean::cnstr_get(x_15, 1);
lean::inc(x_52);
lean::dec(x_15);
x_55 = lean::cnstr_get(x_21, 0);
x_57 = lean::cnstr_get(x_21, 1);
x_59 = lean::cnstr_get(x_21, 2);
if (lean::is_exclusive(x_21)) {
 lean::cnstr_release(x_21, 3);
 x_61 = x_21;
} else {
 lean::inc(x_55);
 lean::inc(x_57);
 lean::inc(x_59);
 lean::dec(x_21);
 x_61 = lean::box(0);
}
x_62 = lean::cnstr_get(x_25, 0);
if (lean::is_exclusive(x_25)) {
 x_64 = x_25;
} else {
 lean::inc(x_62);
 lean::dec(x_25);
 x_64 = lean::box(0);
}
lean::inc(x_1);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_62);
lean::cnstr_set(x_66, 1, x_1);
x_67 = lean::box(3);
x_68 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_68, 0, x_67);
lean::cnstr_set(x_68, 1, x_66);
x_69 = l_List_reverse___rarg(x_68);
x_70 = l_Lean_Parser_noKind;
x_71 = l_Lean_Parser_Syntax_mkNode(x_70, x_69);
if (lean::is_scalar(x_64)) {
 x_72 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_72 = x_64;
}
lean::cnstr_set(x_72, 0, x_71);
if (lean::is_scalar(x_61)) {
 x_73 = lean::alloc_cnstr(0, 4, 0);
} else {
 x_73 = x_61;
}
lean::cnstr_set(x_73, 0, x_55);
lean::cnstr_set(x_73, 1, x_57);
lean::cnstr_set(x_73, 2, x_59);
lean::cnstr_set(x_73, 3, x_72);
if (x_23 == 0)
{
uint8 x_74; obj* x_75; obj* x_76; 
x_74 = 0;
if (lean::is_scalar(x_24)) {
 x_75 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_75 = x_24;
}
lean::cnstr_set(x_75, 0, x_73);
lean::cnstr_set_scalar(x_75, sizeof(void*)*1, x_74);
x_76 = x_75;
x_10 = x_76;
x_11 = x_52;
goto lbl_12;
}
else
{
uint8 x_77; obj* x_78; obj* x_79; 
x_77 = 1;
if (lean::is_scalar(x_24)) {
 x_78 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_78 = x_24;
}
lean::cnstr_set(x_78, 0, x_73);
lean::cnstr_set_scalar(x_78, sizeof(void*)*1, x_77);
x_79 = x_78;
x_10 = x_79;
x_11 = x_52;
goto lbl_12;
}
}
}
lbl_12:
{
if (lean::obj_tag(x_10) == 0)
{
obj* x_80; obj* x_82; obj* x_84; obj* x_86; obj* x_87; obj* x_89; obj* x_90; obj* x_91; obj* x_93; obj* x_95; 
x_80 = lean::cnstr_get(x_10, 0);
x_82 = lean::cnstr_get(x_10, 1);
x_84 = lean::cnstr_get(x_10, 2);
if (lean::is_exclusive(x_10)) {
 lean::cnstr_set(x_10, 0, lean::box(0));
 lean::cnstr_set(x_10, 1, lean::box(0));
 lean::cnstr_set(x_10, 2, lean::box(0));
 x_86 = x_10;
} else {
 lean::inc(x_80);
 lean::inc(x_82);
 lean::inc(x_84);
 lean::dec(x_10);
 x_86 = lean::box(0);
}
x_87 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_87, 0, x_80);
lean::cnstr_set(x_87, 1, x_1);
lean::inc(x_87);
x_89 = l_List_reverse___rarg(x_87);
x_90 = l_Lean_Parser_noKind;
x_91 = l_Lean_Parser_Syntax_mkNode(x_90, x_89);
lean::inc(x_82);
x_93 = l___private_init_lean_parser_combinators_1__many1Aux___main___at_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens___spec__2(x_0, x_87, x_9, x_3, x_82, x_11);
lean::dec(x_9);
x_95 = lean::cnstr_get(x_93, 0);
lean::inc(x_95);
if (lean::obj_tag(x_95) == 0)
{
obj* x_100; obj* x_102; obj* x_103; obj* x_104; 
lean::dec(x_86);
lean::dec(x_82);
lean::dec(x_91);
x_100 = lean::cnstr_get(x_93, 1);
if (lean::is_exclusive(x_93)) {
 lean::cnstr_release(x_93, 0);
 x_102 = x_93;
} else {
 lean::inc(x_100);
 lean::dec(x_93);
 x_102 = lean::box(0);
}
x_103 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_84, x_95);
if (lean::is_scalar(x_102)) {
 x_104 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_104 = x_102;
}
lean::cnstr_set(x_104, 0, x_103);
lean::cnstr_set(x_104, 1, x_100);
return x_104;
}
else
{
uint8 x_105; 
x_105 = lean::cnstr_get_scalar<uint8>(x_95, sizeof(void*)*1);
if (x_105 == 0)
{
obj* x_106; obj* x_108; obj* x_109; obj* x_112; obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; obj* x_120; 
x_106 = lean::cnstr_get(x_93, 1);
if (lean::is_exclusive(x_93)) {
 lean::cnstr_release(x_93, 0);
 x_108 = x_93;
} else {
 lean::inc(x_106);
 lean::dec(x_93);
 x_108 = lean::box(0);
}
x_109 = lean::cnstr_get(x_95, 0);
lean::inc(x_109);
lean::dec(x_95);
x_112 = lean::cnstr_get(x_109, 2);
lean::inc(x_112);
lean::dec(x_109);
x_115 = l_mjoin___rarg___closed__1;
x_116 = lean::alloc_closure(reinterpret_cast<void*>(l_Function_comp___rarg), 3, 2);
lean::closure_set(x_116, 0, x_112);
lean::closure_set(x_116, 1, x_115);
x_117 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_117, 0, x_116);
if (lean::is_scalar(x_86)) {
 x_118 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_118 = x_86;
}
lean::cnstr_set(x_118, 0, x_91);
lean::cnstr_set(x_118, 1, x_82);
lean::cnstr_set(x_118, 2, x_117);
x_119 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_84, x_118);
if (lean::is_scalar(x_108)) {
 x_120 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_120 = x_108;
}
lean::cnstr_set(x_120, 0, x_119);
lean::cnstr_set(x_120, 1, x_106);
return x_120;
}
else
{
obj* x_124; obj* x_126; obj* x_127; obj* x_128; 
lean::dec(x_86);
lean::dec(x_82);
lean::dec(x_91);
x_124 = lean::cnstr_get(x_93, 1);
if (lean::is_exclusive(x_93)) {
 lean::cnstr_release(x_93, 0);
 x_126 = x_93;
} else {
 lean::inc(x_124);
 lean::dec(x_93);
 x_126 = lean::box(0);
}
x_127 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_84, x_95);
if (lean::is_scalar(x_126)) {
 x_128 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_128 = x_126;
}
lean::cnstr_set(x_128, 0, x_127);
lean::cnstr_set(x_128, 1, x_124);
return x_128;
}
}
}
else
{
obj* x_133; uint8 x_135; obj* x_136; obj* x_137; obj* x_138; obj* x_139; 
lean::dec(x_9);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_0);
x_133 = lean::cnstr_get(x_10, 0);
x_135 = lean::cnstr_get_scalar<uint8>(x_10, sizeof(void*)*1);
if (lean::is_exclusive(x_10)) {
 x_136 = x_10;
} else {
 lean::inc(x_133);
 lean::dec(x_10);
 x_136 = lean::box(0);
}
if (lean::is_scalar(x_136)) {
 x_137 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_137 = x_136;
}
lean::cnstr_set(x_137, 0, x_133);
lean::cnstr_set_scalar(x_137, sizeof(void*)*1, x_135);
x_138 = x_137;
x_139 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_139, 0, x_138);
lean::cnstr_set(x_139, 1, x_11);
return x_139;
}
}
}
else
{
obj* x_142; obj* x_143; obj* x_144; obj* x_145; 
lean::dec(x_1);
lean::dec(x_0);
x_142 = lean::box(0);
x_143 = l___private_init_lean_parser_combinators_1__many1Aux___main___rarg___closed__1;
x_144 = l_mjoin___rarg___closed__1;
x_145 = l_Lean_Parser_MonadParsec_error___at___private_init_lean_parser_token_1__finishCommentBlockAux___main___spec__1___rarg(x_143, x_144, x_142, x_142, x_3, x_4, x_5);
lean::dec(x_3);
return x_145;
}
}
}
obj* l_Lean_Parser_Combinators_many1___at_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_11; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_4 = l_String_OldIterator_remaining___main(x_2);
x_5 = lean::box(0);
x_6 = lean::mk_nat_obj(1ul);
x_7 = lean::nat_add(x_4, x_6);
lean::dec(x_4);
x_9 = l___private_init_lean_parser_combinators_1__many1Aux___main___at_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens___spec__2(x_0, x_5, x_7, x_1, x_2, x_3);
lean::dec(x_7);
x_11 = lean::cnstr_get(x_9, 0);
x_13 = lean::cnstr_get(x_9, 1);
if (lean::is_exclusive(x_9)) {
 x_15 = x_9;
} else {
 lean::inc(x_11);
 lean::inc(x_13);
 lean::dec(x_9);
 x_15 = lean::box(0);
}
x_16 = l_Lean_Parser_finishCommentBlock___closed__2;
x_17 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_16, x_11);
if (lean::is_scalar(x_15)) {
 x_18 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_18 = x_15;
}
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_13);
return x_18;
}
}
obj* _init_l_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_18; obj* x_21; 
x_0 = lean::mk_string(".{");
x_1 = lean::mk_nat_obj(0ul);
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = l_Lean_Parser_Level_Parser_Lean_Parser_HasTokens(x_1);
x_5 = l_Lean_Parser_tokens___rarg(x_4);
lean::dec(x_4);
x_7 = l_Lean_Parser_tokens___rarg(x_5);
lean::dec(x_5);
x_9 = lean::mk_string("}");
x_10 = l_Lean_Parser_symbol_tokens___rarg(x_9, x_1);
lean::dec(x_9);
x_12 = lean::box(0);
x_13 = l_Lean_Parser_List_cons_tokens___rarg(x_10, x_12);
lean::dec(x_10);
x_15 = l_Lean_Parser_List_cons_tokens___rarg(x_7, x_13);
lean::dec(x_13);
lean::dec(x_7);
x_18 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_15);
lean::dec(x_15);
lean::dec(x_2);
x_21 = l_Lean_Parser_tokens___rarg(x_18);
lean::dec(x_18);
return x_21;
}
}
obj* l___private_init_lean_parser_combinators_1__many1Aux___main___at_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens___spec__2___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l___private_init_lean_parser_combinators_1__many1Aux___main___at_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens___spec__2(x_0, x_1, x_2, x_3, x_4, x_5);
lean::dec(x_2);
return x_6;
}
}
obj* _init_l_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_0 = lean::mk_string(".{");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___spec__1___boxed), 6, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Level_Parser), 5, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_levelParser_run), 4, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_many1___at_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens___spec__1), 4, 1);
lean::closure_set(x_9, 0, x_8);
x_10 = lean::mk_string("}");
x_11 = l_String_trim(x_10);
lean::dec(x_10);
lean::inc(x_11);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_14, 0, x_11);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___spec__1___boxed), 6, 3);
lean::closure_set(x_15, 0, x_11);
lean::closure_set(x_15, 1, x_5);
lean::closure_set(x_15, 2, x_14);
x_16 = lean::box(0);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_9);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_6);
lean::cnstr_set(x_19, 1, x_18);
x_20 = l_Lean_Parser_BasicParserM_Monad;
x_21 = l_Lean_Parser_BasicParserM_MonadExcept;
x_22 = l_Lean_Parser_BasicParserM_Lean_Parser_MonadParsec;
x_23 = l_Lean_Parser_BasicParserM_Alternative;
x_24 = l_Lean_Parser_identUnivSpec;
x_25 = l_Lean_Parser_identUnivSpec_HasView;
x_26 = l_Lean_Parser_Combinators_node_view___rarg(x_20, x_21, x_22, x_23, x_24, x_19, x_25);
lean::dec(x_19);
return x_26;
}
}
obj* _init_l_Lean_Parser_identUnivSpec_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_0 = lean::mk_string(".{");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___spec__1___boxed), 6, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Level_Parser), 5, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_levelParser_run), 4, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_many1___at_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens___spec__1), 4, 1);
lean::closure_set(x_9, 0, x_8);
x_10 = lean::mk_string("}");
x_11 = l_String_trim(x_10);
lean::dec(x_10);
lean::inc(x_11);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_14, 0, x_11);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___spec__1___boxed), 6, 3);
lean::closure_set(x_15, 0, x_11);
lean::closure_set(x_15, 1, x_5);
lean::closure_set(x_15, 2, x_14);
x_16 = lean::box(0);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_9);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_6);
lean::cnstr_set(x_19, 1, x_18);
return x_19;
}
}
obj* l_Lean_Parser_identUnivSpec_Parser(obj* x_0, obj* x_1, obj* x_2) {
_start:
{
obj* x_3; obj* x_4; obj* x_5; 
x_3 = l_Lean_Parser_identUnivSpec;
x_4 = l_Lean_Parser_identUnivSpec_Parser___closed__1;
x_5 = l_Lean_Parser_Combinators_node___at_Lean_Parser_detailIdentPart_Parser_Lean_Parser_HasTokens___spec__4(x_3, x_4, x_0, x_1, x_2);
return x_5;
}
}
obj* _init_l_Lean_Parser_identUnivs() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("identUnivs");
x_6 = lean_name_mk_string(x_4, x_5);
return x_6;
}
}
obj* l_Lean_Parser_identUnivs_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_1);
if (lean::obj_tag(x_3) == 0)
{
obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_7 = l_Lean_Parser_detailIdent_HasView_x_27___elambda__1___closed__1;
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_Lean_Parser_identUnivs;
x_10 = l_Lean_Parser_Syntax_mkNode(x_9, x_8);
return x_10;
}
else
{
obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_11 = lean::cnstr_get(x_3, 0);
lean::inc(x_11);
lean::dec(x_3);
x_14 = lean::box(0);
x_15 = l_Lean_Parser_identUnivSpec_HasView;
x_16 = lean::cnstr_get(x_15, 1);
lean::inc(x_16);
lean::dec(x_15);
x_19 = lean::apply_1(x_16, x_11);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_14);
x_21 = l_Lean_Parser_noKind;
x_22 = l_Lean_Parser_Syntax_mkNode(x_21, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_14);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_6);
lean::cnstr_set(x_24, 1, x_23);
x_25 = l_Lean_Parser_identUnivs;
x_26 = l_Lean_Parser_Syntax_mkNode(x_25, x_24);
return x_26;
}
}
}
obj* _init_l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOTAnIdent");
lean::inc(x_1);
x_3 = l_Lean_Parser_Substring_ofString(x_1);
x_4 = lean::box(0);
x_5 = lean_name_mk_string(x_4, x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_7, 0, x_0);
lean::cnstr_set(x_7, 1, x_3);
lean::cnstr_set(x_7, 2, x_5);
lean::cnstr_set(x_7, 3, x_6);
lean::cnstr_set(x_7, 4, x_6);
x_8 = l_Lean_Parser_identUnivSpec_HasView;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::box(3);
x_13 = lean::apply_1(x_9, x_12);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_13);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_7);
lean::cnstr_set(x_15, 1, x_14);
return x_15;
}
}
obj* _init_l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOTAnIdent");
lean::inc(x_1);
x_3 = l_Lean_Parser_Substring_ofString(x_1);
x_4 = lean::box(0);
x_5 = lean_name_mk_string(x_4, x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_7, 0, x_0);
lean::cnstr_set(x_7, 1, x_3);
lean::cnstr_set(x_7, 2, x_5);
lean::cnstr_set(x_7, 3, x_6);
lean::cnstr_set(x_7, 4, x_6);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_0);
return x_8;
}
}
obj* _init_l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__2;
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
if (lean::obj_tag(x_11) == 0)
{
obj* x_13; obj* x_16; obj* x_17; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_13 = lean::cnstr_get(x_6, 0);
lean::inc(x_13);
lean::dec(x_6);
x_16 = l_Lean_Parser_identUnivSpec_HasView;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
lean::dec(x_16);
x_20 = lean::apply_1(x_17, x_13);
if (lean::is_scalar(x_5)) {
 x_21 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_21 = x_5;
}
lean::cnstr_set(x_21, 0, x_20);
x_22 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_21);
return x_23;
}
else
{
obj* x_27; 
lean::dec(x_11);
lean::dec(x_6);
lean::dec(x_5);
x_27 = l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__1;
return x_27;
}
}
}
}
}
obj* _init_l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_identUnivSpec_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__5() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__3;
return x_0;
}
}
obj* l_Lean_Parser_identUnivs_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__5;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 1:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_20; obj* x_23; obj* x_24; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::box(3);
x_24 = l_Lean_Parser_Syntax_asNode___main(x_23);
if (lean::obj_tag(x_24) == 0)
{
obj* x_25; obj* x_26; 
x_25 = l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__4;
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_20);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_29; obj* x_30; 
x_27 = lean::cnstr_get(x_24, 0);
if (lean::is_exclusive(x_24)) {
 lean::cnstr_set(x_24, 0, lean::box(0));
 x_29 = x_24;
} else {
 lean::inc(x_27);
 lean::dec(x_24);
 x_29 = lean::box(0);
}
x_30 = lean::cnstr_get(x_27, 1);
lean::inc(x_30);
lean::dec(x_27);
if (lean::obj_tag(x_30) == 0)
{
obj* x_34; obj* x_35; 
lean::dec(x_29);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_20);
lean::cnstr_set(x_35, 1, x_34);
return x_35;
}
else
{
obj* x_36; 
x_36 = lean::cnstr_get(x_30, 1);
lean::inc(x_36);
if (lean::obj_tag(x_36) == 0)
{
obj* x_38; obj* x_41; obj* x_42; obj* x_45; obj* x_46; obj* x_47; 
x_38 = lean::cnstr_get(x_30, 0);
lean::inc(x_38);
lean::dec(x_30);
x_41 = l_Lean_Parser_identUnivSpec_HasView;
x_42 = lean::cnstr_get(x_41, 0);
lean::inc(x_42);
lean::dec(x_41);
x_45 = lean::apply_1(x_42, x_38);
if (lean::is_scalar(x_29)) {
 x_46 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_46 = x_29;
}
lean::cnstr_set(x_46, 0, x_45);
x_47 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_47, 0, x_20);
lean::cnstr_set(x_47, 1, x_46);
return x_47;
}
else
{
obj* x_51; obj* x_52; 
lean::dec(x_36);
lean::dec(x_30);
lean::dec(x_29);
x_51 = l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__4;
x_52 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_52, 0, x_20);
lean::cnstr_set(x_52, 1, x_51);
return x_52;
}
}
}
}
else
{
obj* x_53; obj* x_56; obj* x_59; 
x_53 = lean::cnstr_get(x_2, 0);
lean::inc(x_53);
lean::dec(x_2);
x_56 = lean::cnstr_get(x_1, 0);
lean::inc(x_56);
lean::dec(x_1);
x_59 = l_Lean_Parser_Syntax_asNode___main(x_56);
if (lean::obj_tag(x_59) == 0)
{
obj* x_60; obj* x_61; 
x_60 = l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__4;
x_61 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_61, 0, x_53);
lean::cnstr_set(x_61, 1, x_60);
return x_61;
}
else
{
obj* x_62; obj* x_64; obj* x_65; 
x_62 = lean::cnstr_get(x_59, 0);
if (lean::is_exclusive(x_59)) {
 lean::cnstr_set(x_59, 0, lean::box(0));
 x_64 = x_59;
} else {
 lean::inc(x_62);
 lean::dec(x_59);
 x_64 = lean::box(0);
}
x_65 = lean::cnstr_get(x_62, 1);
lean::inc(x_65);
lean::dec(x_62);
if (lean::obj_tag(x_65) == 0)
{
obj* x_69; obj* x_70; 
lean::dec(x_64);
x_69 = lean::box(0);
x_70 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_70, 0, x_53);
lean::cnstr_set(x_70, 1, x_69);
return x_70;
}
else
{
obj* x_71; 
x_71 = lean::cnstr_get(x_65, 1);
lean::inc(x_71);
if (lean::obj_tag(x_71) == 0)
{
obj* x_73; obj* x_76; obj* x_77; obj* x_80; obj* x_81; obj* x_82; 
x_73 = lean::cnstr_get(x_65, 0);
lean::inc(x_73);
lean::dec(x_65);
x_76 = l_Lean_Parser_identUnivSpec_HasView;
x_77 = lean::cnstr_get(x_76, 0);
lean::inc(x_77);
lean::dec(x_76);
x_80 = lean::apply_1(x_77, x_73);
if (lean::is_scalar(x_64)) {
 x_81 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_81 = x_64;
}
lean::cnstr_set(x_81, 0, x_80);
x_82 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_82, 0, x_53);
lean::cnstr_set(x_82, 1, x_81);
return x_82;
}
else
{
obj* x_86; obj* x_87; 
lean::dec(x_64);
lean::dec(x_65);
lean::dec(x_71);
x_86 = l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__4;
x_87 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_87, 0, x_53);
lean::cnstr_set(x_87, 1, x_86);
return x_87;
}
}
}
}
}
case 3:
{
obj* x_88; 
x_88 = lean::box(0);
x_18 = x_88;
goto lbl_19;
}
default:
{
obj* x_90; 
lean::dec(x_2);
x_90 = lean::box(0);
x_18 = x_90;
goto lbl_19;
}
}
lbl_19:
{
lean::dec(x_18);
if (lean::obj_tag(x_1) == 0)
{
obj* x_92; 
x_92 = l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__3;
return x_92;
}
else
{
obj* x_93; obj* x_96; 
x_93 = lean::cnstr_get(x_1, 0);
lean::inc(x_93);
lean::dec(x_1);
x_96 = l_Lean_Parser_Syntax_asNode___main(x_93);
if (lean::obj_tag(x_96) == 0)
{
obj* x_97; 
x_97 = l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__1;
return x_97;
}
else
{
obj* x_98; obj* x_100; obj* x_101; 
x_98 = lean::cnstr_get(x_96, 0);
if (lean::is_exclusive(x_96)) {
 lean::cnstr_set(x_96, 0, lean::box(0));
 x_100 = x_96;
} else {
 lean::inc(x_98);
 lean::dec(x_96);
 x_100 = lean::box(0);
}
x_101 = lean::cnstr_get(x_98, 1);
lean::inc(x_101);
lean::dec(x_98);
if (lean::obj_tag(x_101) == 0)
{
obj* x_105; 
lean::dec(x_100);
x_105 = l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__2;
return x_105;
}
else
{
obj* x_106; 
x_106 = lean::cnstr_get(x_101, 1);
lean::inc(x_106);
if (lean::obj_tag(x_106) == 0)
{
obj* x_108; obj* x_111; obj* x_112; obj* x_115; obj* x_116; obj* x_117; obj* x_118; 
x_108 = lean::cnstr_get(x_101, 0);
lean::inc(x_108);
lean::dec(x_101);
x_111 = l_Lean_Parser_identUnivSpec_HasView;
x_112 = lean::cnstr_get(x_111, 0);
lean::inc(x_112);
lean::dec(x_111);
x_115 = lean::apply_1(x_112, x_108);
if (lean::is_scalar(x_100)) {
 x_116 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_116 = x_100;
}
lean::cnstr_set(x_116, 0, x_115);
x_117 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_118 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_118, 0, x_117);
lean::cnstr_set(x_118, 1, x_116);
return x_118;
}
else
{
obj* x_122; 
lean::dec(x_100);
lean::dec(x_106);
lean::dec(x_101);
x_122 = l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__1;
return x_122;
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_identUnivs_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_identUnivs_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_identUnivs_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_identUnivs_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_identUnivs_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_7; obj* x_9; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens;
x_2 = l_Lean_Parser_tokens___rarg(x_1);
x_3 = l_Lean_Parser_tokens___rarg(x_2);
lean::dec(x_2);
x_5 = l_Lean_Parser_List_cons_tokens___rarg(x_3, x_0);
lean::dec(x_3);
x_7 = l_Lean_Parser_List_cons_tokens___rarg(x_0, x_5);
lean::dec(x_5);
x_9 = l_Lean_Parser_tokens___rarg(x_7);
lean::dec(x_7);
return x_9;
}
}
obj* l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasView___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = l_Lean_Parser_identUnivSpec_Parser(x_0, x_2, x_3);
return x_4;
}
}
obj* _init_l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; uint8 x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasView___lambda__1___boxed), 4, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__3___rarg___boxed), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = 0;
x_3 = lean::box(x_2);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_4, 0, x_1);
lean::closure_set(x_4, 1, x_3);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_6);
x_9 = l_Lean_Parser_TermParserM_Monad;
x_10 = l_Lean_Parser_TermParserM_MonadExcept;
x_11 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_12 = l_Lean_Parser_TermParserM_Alternative;
x_13 = l_Lean_Parser_identUnivs;
x_14 = l_Lean_Parser_identUnivs_HasView;
x_15 = l_Lean_Parser_Combinators_node_view___rarg(x_9, x_10, x_11, x_12, x_13, x_8, x_14);
lean::dec(x_8);
return x_15;
}
}
obj* l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasView___lambda__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasView___lambda__1(x_0, x_1, x_2, x_3);
lean::dec(x_1);
return x_4;
}
}
obj* _init_l_Lean_Parser_identUnivs_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; uint8 x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasView___lambda__1___boxed), 4, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__3___rarg___boxed), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = 0;
x_3 = lean::box(x_2);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_4, 0, x_1);
lean::closure_set(x_4, 1, x_3);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_6);
return x_8;
}
}
obj* l_Lean_Parser_identUnivs_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_identUnivs;
x_6 = l_Lean_Parser_identUnivs_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* l_Lean_Parser_Term_getLeading(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; 
x_6 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_7 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_7, 0, x_0);
lean::cnstr_set(x_7, 1, x_4);
lean::cnstr_set(x_7, 2, x_6);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_5);
return x_8;
}
}
obj* l_Lean_Parser_Term_getLeading___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_Lean_Parser_Term_getLeading(x_0, x_1, x_2, x_3, x_4, x_5);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; 
x_0 = lean::box(0);
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_id___rarg___boxed), 1, 0);
lean::inc(x_0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_0);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_tuple() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("tuple");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_List_map___main___at_Lean_Parser_Term_tuple_HasView_x_27___elambda__1___spec__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_8; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
x_7 = l_List_map___main___at_Lean_Parser_Term_tuple_HasView_x_27___elambda__1___spec__1(x_4);
x_8 = lean::cnstr_get(x_2, 1);
lean::inc(x_8);
if (lean::obj_tag(x_8) == 0)
{
obj* x_10; obj* x_13; obj* x_14; obj* x_15; 
x_10 = lean::cnstr_get(x_2, 0);
lean::inc(x_10);
lean::dec(x_2);
x_13 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_14 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_14 = x_6;
}
lean::cnstr_set(x_14, 0, x_10);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_7);
return x_15;
}
else
{
obj* x_16; 
x_16 = lean::cnstr_get(x_8, 0);
lean::inc(x_16);
lean::dec(x_8);
if (lean::obj_tag(x_16) == 0)
{
obj* x_19; obj* x_22; obj* x_23; obj* x_24; 
x_19 = lean::cnstr_get(x_2, 0);
lean::inc(x_19);
lean::dec(x_2);
x_22 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
if (lean::is_scalar(x_6)) {
 x_23 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_23 = x_6;
}
lean::cnstr_set(x_23, 0, x_19);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_7);
return x_24;
}
else
{
obj* x_25; obj* x_28; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; 
x_25 = lean::cnstr_get(x_2, 0);
lean::inc(x_25);
lean::dec(x_2);
x_28 = lean::cnstr_get(x_16, 0);
lean::inc(x_28);
lean::dec(x_16);
x_31 = lean::box(0);
x_32 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_32, 0, x_28);
if (lean::is_scalar(x_6)) {
 x_33 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_33 = x_6;
}
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_31);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_25);
lean::cnstr_set(x_34, 1, x_33);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_7);
return x_35;
}
}
}
}
}
obj* l_Lean_Parser_Term_tuple_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_List_map___main___at_Lean_Parser_Term_tuple_HasView_x_27___elambda__1___spec__1(x_3);
x_7 = l_List_join___main___rarg(x_6);
x_8 = l_Lean_Parser_noKind;
x_9 = l_Lean_Parser_Syntax_mkNode(x_8, x_7);
x_10 = lean::box(0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_9);
lean::cnstr_set(x_11, 1, x_10);
if (lean::obj_tag(x_1) == 0)
{
obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_12 = lean::box(3);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_11);
x_14 = l_Lean_Parser_Term_tuple;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_16 = lean::cnstr_get(x_1, 0);
lean::inc(x_16);
lean::dec(x_1);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_16);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_11);
x_21 = l_Lean_Parser_Term_tuple;
x_22 = l_Lean_Parser_Syntax_mkNode(x_21, x_20);
return x_22;
}
}
}
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_tuple_HasView_x_27___spec__1(obj* x_0, obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; 
x_3 = lean::box(0);
return x_3;
}
else
{
obj* x_4; 
x_4 = lean::cnstr_get(x_2, 1);
lean::inc(x_4);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_6 = lean::cnstr_get(x_2, 0);
if (lean::is_exclusive(x_2)) {
 lean::cnstr_release(x_2, 1);
 x_8 = x_2;
} else {
 lean::inc(x_6);
 lean::dec(x_2);
 x_8 = lean::box(0);
}
x_9 = lean::box(0);
x_10 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_10, 0, x_6);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::box(0);
if (lean::is_scalar(x_8)) {
 x_12 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_12 = x_8;
}
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
return x_12;
}
else
{
obj* x_13; obj* x_16; obj* x_18; obj* x_20; obj* x_21; 
x_13 = lean::cnstr_get(x_2, 0);
lean::inc(x_13);
lean::dec(x_2);
x_16 = lean::cnstr_get(x_4, 0);
x_18 = lean::cnstr_get(x_4, 1);
if (lean::is_exclusive(x_4)) {
 lean::cnstr_set(x_4, 0, lean::box(0));
 lean::cnstr_set(x_4, 1, lean::box(0));
 x_20 = x_4;
} else {
 lean::inc(x_16);
 lean::inc(x_18);
 lean::dec(x_4);
 x_20 = lean::box(0);
}
x_21 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_tuple_HasView_x_27___spec__1(x_0, x_1, x_18);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_22; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_22 = lean::cnstr_get(x_16, 0);
lean::inc(x_22);
lean::dec(x_16);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_26 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_26, 0, x_25);
x_27 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_27, 0, x_13);
lean::cnstr_set(x_27, 1, x_26);
if (lean::is_scalar(x_20)) {
 x_28 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_28 = x_20;
}
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_21);
return x_28;
}
case 3:
{
obj* x_29; obj* x_30; obj* x_31; 
x_29 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_13);
lean::cnstr_set(x_30, 1, x_29);
if (lean::is_scalar(x_20)) {
 x_31 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_31 = x_20;
}
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_21);
return x_31;
}
default:
{
obj* x_33; obj* x_34; obj* x_35; 
lean::dec(x_16);
x_33 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_13);
lean::cnstr_set(x_34, 1, x_33);
if (lean::is_scalar(x_20)) {
 x_35 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_35 = x_20;
}
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_21);
return x_35;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::box(0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
return x_4;
}
}
obj* _init_l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::mk_nat_obj(0ul);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::mk_string(", ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = l_Lean_Parser_Syntax_asNode___main(x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; obj* x_4; 
x_3 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
x_4 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_4, 0, x_0);
lean::cnstr_set(x_4, 1, x_3);
return x_4;
}
else
{
obj* x_5; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_5 = lean::cnstr_get(x_2, 0);
lean::inc(x_5);
lean::dec(x_2);
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
x_11 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__2;
x_12 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__3;
x_13 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_tuple_HasView_x_27___spec__1(x_11, x_12, x_8);
x_14 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_14, 0, x_0);
lean::cnstr_set(x_14, 1, x_13);
return x_14;
}
}
}
obj* _init_l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__5() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__4;
return x_0;
}
}
obj* l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__5;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; obj* x_19; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_21; obj* x_24; 
x_21 = lean::cnstr_get(x_2, 0);
lean::inc(x_21);
lean::dec(x_2);
x_24 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_24, 0, x_21);
if (lean::obj_tag(x_1) == 0)
{
obj* x_25; obj* x_26; 
x_25 = lean::box(3);
x_26 = l_Lean_Parser_Syntax_asNode___main(x_25);
if (lean::obj_tag(x_26) == 0)
{
obj* x_27; obj* x_28; 
x_27 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
x_28 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_28, 0, x_24);
lean::cnstr_set(x_28, 1, x_27);
return x_28;
}
else
{
obj* x_29; obj* x_32; obj* x_35; obj* x_36; obj* x_37; obj* x_38; 
x_29 = lean::cnstr_get(x_26, 0);
lean::inc(x_29);
lean::dec(x_26);
x_32 = lean::cnstr_get(x_29, 1);
lean::inc(x_32);
lean::dec(x_29);
x_35 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__2;
x_36 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__3;
x_37 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_tuple_HasView_x_27___spec__1(x_35, x_36, x_32);
x_38 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_38, 0, x_24);
lean::cnstr_set(x_38, 1, x_37);
return x_38;
}
}
else
{
obj* x_39; 
x_39 = lean::cnstr_get(x_1, 0);
lean::inc(x_39);
lean::dec(x_1);
x_18 = x_24;
x_19 = x_39;
goto lbl_20;
}
}
case 3:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_42; 
x_42 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__4;
return x_42;
}
else
{
obj* x_43; obj* x_46; 
x_43 = lean::cnstr_get(x_1, 0);
lean::inc(x_43);
lean::dec(x_1);
x_46 = lean::box(0);
x_18 = x_46;
x_19 = x_43;
goto lbl_20;
}
}
default:
{
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_48; 
x_48 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__4;
return x_48;
}
else
{
obj* x_49; obj* x_52; 
x_49 = lean::cnstr_get(x_1, 0);
lean::inc(x_49);
lean::dec(x_1);
x_52 = lean::box(0);
x_18 = x_52;
x_19 = x_49;
goto lbl_20;
}
}
}
lbl_20:
{
obj* x_53; 
x_53 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_53) == 0)
{
obj* x_54; obj* x_55; 
x_54 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_18);
lean::cnstr_set(x_55, 1, x_54);
return x_55;
}
else
{
obj* x_56; obj* x_59; obj* x_62; obj* x_63; obj* x_64; obj* x_65; 
x_56 = lean::cnstr_get(x_53, 0);
lean::inc(x_56);
lean::dec(x_53);
x_59 = lean::cnstr_get(x_56, 1);
lean::inc(x_59);
lean::dec(x_56);
x_62 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__2;
x_63 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__3;
x_64 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_tuple_HasView_x_27___spec__1(x_62, x_63, x_59);
x_65 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_65, 0, x_18);
lean::cnstr_set(x_65, 1, x_64);
return x_65;
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_tuple_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_tuple_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_tuple_HasView_x_27___spec__1___boxed(obj* x_0, obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_tuple_HasView_x_27___spec__1(x_0, x_1, x_2);
lean::dec(x_0);
lean::dec(x_1);
return x_3;
}
}
obj* _init_l_Lean_Parser_Term_tuple_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_tuple_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_typed() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("typed");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_typed_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
if (lean::obj_tag(x_1) == 0)
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_8 = lean::box(3);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_Lean_Parser_Term_typed;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
return x_11;
}
else
{
obj* x_12; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_12 = lean::cnstr_get(x_1, 0);
lean::inc(x_12);
lean::dec(x_1);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_12);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_7);
x_17 = l_Lean_Parser_Term_typed;
x_18 = l_Lean_Parser_Syntax_mkNode(x_17, x_16);
return x_18;
}
}
}
obj* _init_l_Lean_Parser_Term_typed_HasView_x_27___elambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_typed_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_typed_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_Lean_Parser_Term_typed_HasView_x_27___elambda__2___closed__1;
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
switch (lean::obj_tag(x_11)) {
case 0:
{
obj* x_13; obj* x_16; obj* x_19; 
x_13 = lean::cnstr_get(x_6, 1);
lean::inc(x_13);
lean::dec(x_6);
x_16 = lean::cnstr_get(x_11, 0);
lean::inc(x_16);
lean::dec(x_11);
if (lean::is_scalar(x_5)) {
 x_19 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_19 = x_5;
}
lean::cnstr_set(x_19, 0, x_16);
if (lean::obj_tag(x_13) == 0)
{
obj* x_20; obj* x_21; 
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_13, 0);
lean::inc(x_22);
lean::dec(x_13);
x_25 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_25, 0, x_19);
lean::cnstr_set(x_25, 1, x_22);
return x_25;
}
}
case 3:
{
obj* x_27; 
lean::dec(x_5);
x_27 = lean::cnstr_get(x_6, 1);
lean::inc(x_27);
lean::dec(x_6);
if (lean::obj_tag(x_27) == 0)
{
obj* x_30; 
x_30 = l_Lean_Parser_Term_typed_HasView_x_27___elambda__2___closed__1;
return x_30;
}
else
{
obj* x_31; obj* x_34; obj* x_35; 
x_31 = lean::cnstr_get(x_27, 0);
lean::inc(x_31);
lean::dec(x_27);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_31);
return x_35;
}
}
default:
{
obj* x_38; 
lean::dec(x_11);
lean::dec(x_5);
x_38 = lean::cnstr_get(x_6, 1);
lean::inc(x_38);
lean::dec(x_6);
if (lean::obj_tag(x_38) == 0)
{
obj* x_41; 
x_41 = l_Lean_Parser_Term_typed_HasView_x_27___elambda__2___closed__1;
return x_41;
}
else
{
obj* x_42; obj* x_45; obj* x_46; 
x_42 = lean::cnstr_get(x_38, 0);
lean::inc(x_42);
lean::dec(x_38);
x_45 = lean::box(0);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_42);
return x_46;
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_typed_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_typed_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_typed_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_typed_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_typed_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_parenSpecial() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("parenSpecial");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_parenSpecial_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_Lean_Parser_Term_tuple_HasView;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_12 = l_Lean_Parser_Syntax_mkNode(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_Lean_Parser_Term_parenSpecial;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_Lean_Parser_Term_typed_HasView;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_26 = l_Lean_Parser_Syntax_mkNode(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_Lean_Parser_Term_parenSpecial;
x_29 = l_Lean_Parser_Syntax_mkNode(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_tuple_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("parenSpecial");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__2;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
obj* x_58; obj* x_59; obj* x_62; obj* x_63; 
x_58 = l_Lean_Parser_Term_typed_HasView;
x_59 = lean::cnstr_get(x_58, 0);
lean::inc(x_59);
lean::dec(x_58);
x_62 = lean::apply_1(x_59, x_52);
x_63 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_63, 0, x_62);
return x_63;
}
else
{
obj* x_64; obj* x_65; obj* x_68; obj* x_69; 
x_64 = l_Lean_Parser_Term_tuple_HasView;
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
lean::dec(x_64);
x_68 = lean::apply_1(x_65, x_52);
x_69 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_69, 0, x_68);
return x_69;
}
}
else
{
obj* x_73; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_73 = l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1;
return x_73;
}
}
}
}
}
}
}
else
{
obj* x_76; 
lean::dec(x_8);
lean::dec(x_17);
x_76 = l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1;
return x_76;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_parenSpecial_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_parenSpecial_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_parenSpecial_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_parenSpecial_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_parenContent() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("parenContent");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_parenContent_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::cnstr_get(x_0, 1);
lean::inc(x_1);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_Lean_Parser_detailIdent_HasView_x_27___elambda__1___closed__1;
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = l_Lean_Parser_Term_parenContent;
x_9 = l_Lean_Parser_Syntax_mkNode(x_8, x_7);
return x_9;
}
else
{
obj* x_10; obj* x_13; obj* x_16; obj* x_17; obj* x_18; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_10 = lean::cnstr_get(x_0, 0);
lean::inc(x_10);
lean::dec(x_0);
x_13 = lean::cnstr_get(x_1, 0);
lean::inc(x_13);
lean::dec(x_1);
x_16 = lean::box(0);
x_17 = l_Lean_Parser_Term_parenSpecial_HasView;
x_18 = lean::cnstr_get(x_17, 1);
lean::inc(x_18);
lean::dec(x_17);
x_21 = lean::apply_1(x_18, x_13);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_16);
x_23 = l_Lean_Parser_noKind;
x_24 = l_Lean_Parser_Syntax_mkNode(x_23, x_22);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_16);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_10);
lean::cnstr_set(x_26, 1, x_25);
x_27 = l_Lean_Parser_Term_parenContent;
x_28 = l_Lean_Parser_Syntax_mkNode(x_27, x_26);
return x_28;
}
}
}
obj* _init_l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_parenSpecial_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; obj* x_3; 
x_2 = l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__1;
x_3 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_3, 0, x_0);
lean::cnstr_set(x_3, 1, x_2);
return x_3;
}
else
{
obj* x_4; obj* x_6; obj* x_7; 
x_4 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_6 = x_1;
} else {
 lean::inc(x_4);
 lean::dec(x_1);
 x_6 = lean::box(0);
}
x_7 = lean::cnstr_get(x_4, 1);
lean::inc(x_7);
lean::dec(x_4);
if (lean::obj_tag(x_7) == 0)
{
obj* x_11; obj* x_12; 
lean::dec(x_6);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_12, 0, x_0);
lean::cnstr_set(x_12, 1, x_11);
return x_12;
}
else
{
obj* x_13; 
x_13 = lean::cnstr_get(x_7, 1);
lean::inc(x_13);
if (lean::obj_tag(x_13) == 0)
{
obj* x_15; obj* x_18; obj* x_19; obj* x_22; obj* x_23; obj* x_24; 
x_15 = lean::cnstr_get(x_7, 0);
lean::inc(x_15);
lean::dec(x_7);
x_18 = l_Lean_Parser_Term_parenSpecial_HasView;
x_19 = lean::cnstr_get(x_18, 0);
lean::inc(x_19);
lean::dec(x_18);
x_22 = lean::apply_1(x_19, x_15);
if (lean::is_scalar(x_6)) {
 x_23 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_23 = x_6;
}
lean::cnstr_set(x_23, 0, x_22);
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_0);
lean::cnstr_set(x_24, 1, x_23);
return x_24;
}
else
{
obj* x_28; obj* x_29; 
lean::dec(x_7);
lean::dec(x_6);
lean::dec(x_13);
x_28 = l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__1;
x_29 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_29, 0, x_0);
lean::cnstr_set(x_29, 1, x_28);
return x_29;
}
}
}
}
}
obj* l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_18; obj* x_19; 
x_18 = lean::box(3);
x_19 = l_Lean_Parser_Syntax_asNode___main(x_18);
if (lean::obj_tag(x_19) == 0)
{
obj* x_20; obj* x_21; 
x_20 = l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__1;
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_2);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_24; obj* x_25; 
x_22 = lean::cnstr_get(x_19, 0);
if (lean::is_exclusive(x_19)) {
 lean::cnstr_set(x_19, 0, lean::box(0));
 x_24 = x_19;
} else {
 lean::inc(x_22);
 lean::dec(x_19);
 x_24 = lean::box(0);
}
x_25 = lean::cnstr_get(x_22, 1);
lean::inc(x_25);
lean::dec(x_22);
if (lean::obj_tag(x_25) == 0)
{
obj* x_29; obj* x_30; 
lean::dec(x_24);
x_29 = lean::box(0);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_2);
lean::cnstr_set(x_30, 1, x_29);
return x_30;
}
else
{
obj* x_31; 
x_31 = lean::cnstr_get(x_25, 1);
lean::inc(x_31);
if (lean::obj_tag(x_31) == 0)
{
obj* x_33; obj* x_36; obj* x_37; obj* x_40; obj* x_41; obj* x_42; 
x_33 = lean::cnstr_get(x_25, 0);
lean::inc(x_33);
lean::dec(x_25);
x_36 = l_Lean_Parser_Term_parenSpecial_HasView;
x_37 = lean::cnstr_get(x_36, 0);
lean::inc(x_37);
lean::dec(x_36);
x_40 = lean::apply_1(x_37, x_33);
if (lean::is_scalar(x_24)) {
 x_41 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_41 = x_24;
}
lean::cnstr_set(x_41, 0, x_40);
x_42 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_42, 0, x_2);
lean::cnstr_set(x_42, 1, x_41);
return x_42;
}
else
{
obj* x_46; obj* x_47; 
lean::dec(x_31);
lean::dec(x_24);
lean::dec(x_25);
x_46 = l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__1;
x_47 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_47, 0, x_2);
lean::cnstr_set(x_47, 1, x_46);
return x_47;
}
}
}
}
else
{
obj* x_48; obj* x_51; 
x_48 = lean::cnstr_get(x_1, 0);
lean::inc(x_48);
lean::dec(x_1);
x_51 = l_Lean_Parser_Syntax_asNode___main(x_48);
if (lean::obj_tag(x_51) == 0)
{
obj* x_52; obj* x_53; 
x_52 = l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__1;
x_53 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_53, 0, x_2);
lean::cnstr_set(x_53, 1, x_52);
return x_53;
}
else
{
obj* x_54; obj* x_56; obj* x_57; 
x_54 = lean::cnstr_get(x_51, 0);
if (lean::is_exclusive(x_51)) {
 lean::cnstr_set(x_51, 0, lean::box(0));
 x_56 = x_51;
} else {
 lean::inc(x_54);
 lean::dec(x_51);
 x_56 = lean::box(0);
}
x_57 = lean::cnstr_get(x_54, 1);
lean::inc(x_57);
lean::dec(x_54);
if (lean::obj_tag(x_57) == 0)
{
obj* x_61; obj* x_62; 
lean::dec(x_56);
x_61 = lean::box(0);
x_62 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_62, 0, x_2);
lean::cnstr_set(x_62, 1, x_61);
return x_62;
}
else
{
obj* x_63; 
x_63 = lean::cnstr_get(x_57, 1);
lean::inc(x_63);
if (lean::obj_tag(x_63) == 0)
{
obj* x_65; obj* x_68; obj* x_69; obj* x_72; obj* x_73; obj* x_74; 
x_65 = lean::cnstr_get(x_57, 0);
lean::inc(x_65);
lean::dec(x_57);
x_68 = l_Lean_Parser_Term_parenSpecial_HasView;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_65);
if (lean::is_scalar(x_56)) {
 x_73 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_73 = x_56;
}
lean::cnstr_set(x_73, 0, x_72);
x_74 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_74, 0, x_2);
lean::cnstr_set(x_74, 1, x_73);
return x_74;
}
else
{
obj* x_78; obj* x_79; 
lean::dec(x_56);
lean::dec(x_57);
lean::dec(x_63);
x_78 = l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__1;
x_79 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_79, 0, x_2);
lean::cnstr_set(x_79, 1, x_78);
return x_79;
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_parenContent_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_parenContent_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_parenContent_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_parenContent_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_paren() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("paren");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_paren_HasView_x_27___elambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_noKind;
x_2 = l_Lean_Parser_Syntax_mkNode(x_1, x_0);
x_3 = lean::box(3);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_2);
lean::cnstr_set(x_5, 1, x_4);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_3);
lean::cnstr_set(x_6, 1, x_5);
x_7 = l_Lean_Parser_Term_paren;
x_8 = l_Lean_Parser_Syntax_mkNode(x_7, x_6);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_paren_HasView_x_27___elambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_noKind;
x_2 = l_Lean_Parser_Syntax_mkNode(x_1, x_0);
x_3 = lean::box(3);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_2);
lean::cnstr_set(x_5, 1, x_4);
return x_5;
}
}
obj* l_Lean_Parser_Term_paren_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_3) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_9; 
x_9 = l_Lean_Parser_Term_paren_HasView_x_27___elambda__1___closed__1;
return x_9;
}
else
{
obj* x_10; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
x_10 = lean::cnstr_get(x_5, 0);
lean::inc(x_10);
lean::dec(x_5);
x_13 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_13, 0, x_10);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_8);
x_15 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_14);
x_17 = lean::box(3);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_16);
x_19 = l_Lean_Parser_Term_paren;
x_20 = l_Lean_Parser_Syntax_mkNode(x_19, x_18);
return x_20;
}
}
else
{
obj* x_21; obj* x_24; obj* x_25; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_21 = lean::cnstr_get(x_3, 0);
lean::inc(x_21);
lean::dec(x_3);
x_24 = l_Lean_Parser_Term_parenContent_HasView;
x_25 = lean::cnstr_get(x_24, 1);
lean::inc(x_25);
lean::dec(x_24);
x_28 = lean::apply_1(x_25, x_21);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_8);
x_30 = l_Lean_Parser_noKind;
x_31 = l_Lean_Parser_Syntax_mkNode(x_30, x_29);
if (lean::obj_tag(x_5) == 0)
{
obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; 
x_32 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_31);
lean::cnstr_set(x_33, 1, x_32);
x_34 = lean::box(3);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_33);
x_36 = l_Lean_Parser_Term_paren;
x_37 = l_Lean_Parser_Syntax_mkNode(x_36, x_35);
return x_37;
}
else
{
obj* x_38; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; 
x_38 = lean::cnstr_get(x_5, 0);
lean::inc(x_38);
lean::dec(x_5);
x_41 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_41, 0, x_38);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_8);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_31);
lean::cnstr_set(x_43, 1, x_42);
x_44 = lean::box(3);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_43);
x_46 = l_Lean_Parser_Term_paren;
x_47 = l_Lean_Parser_Syntax_mkNode(x_46, x_45);
return x_47;
}
}
}
else
{
obj* x_48; obj* x_51; 
x_48 = lean::cnstr_get(x_1, 0);
lean::inc(x_48);
lean::dec(x_1);
x_51 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_51, 0, x_48);
if (lean::obj_tag(x_3) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_52; obj* x_53; obj* x_54; obj* x_55; 
x_52 = l_Lean_Parser_Term_paren_HasView_x_27___elambda__1___closed__2;
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_51);
lean::cnstr_set(x_53, 1, x_52);
x_54 = l_Lean_Parser_Term_paren;
x_55 = l_Lean_Parser_Syntax_mkNode(x_54, x_53);
return x_55;
}
else
{
obj* x_56; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; 
x_56 = lean::cnstr_get(x_5, 0);
lean::inc(x_56);
lean::dec(x_5);
x_59 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_59, 0, x_56);
x_60 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_60, 0, x_59);
lean::cnstr_set(x_60, 1, x_8);
x_61 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_62 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_62, 0, x_61);
lean::cnstr_set(x_62, 1, x_60);
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_51);
lean::cnstr_set(x_63, 1, x_62);
x_64 = l_Lean_Parser_Term_paren;
x_65 = l_Lean_Parser_Syntax_mkNode(x_64, x_63);
return x_65;
}
}
else
{
obj* x_66; obj* x_69; obj* x_70; obj* x_73; obj* x_74; obj* x_75; obj* x_76; 
x_66 = lean::cnstr_get(x_3, 0);
lean::inc(x_66);
lean::dec(x_3);
x_69 = l_Lean_Parser_Term_parenContent_HasView;
x_70 = lean::cnstr_get(x_69, 1);
lean::inc(x_70);
lean::dec(x_69);
x_73 = lean::apply_1(x_70, x_66);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_8);
x_75 = l_Lean_Parser_noKind;
x_76 = l_Lean_Parser_Syntax_mkNode(x_75, x_74);
if (lean::obj_tag(x_5) == 0)
{
obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; 
x_77 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_76);
lean::cnstr_set(x_78, 1, x_77);
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_51);
lean::cnstr_set(x_79, 1, x_78);
x_80 = l_Lean_Parser_Term_paren;
x_81 = l_Lean_Parser_Syntax_mkNode(x_80, x_79);
return x_81;
}
else
{
obj* x_82; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; 
x_82 = lean::cnstr_get(x_5, 0);
lean::inc(x_82);
lean::dec(x_5);
x_85 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_85, 0, x_82);
x_86 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_86, 0, x_85);
lean::cnstr_set(x_86, 1, x_8);
x_87 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_87, 0, x_76);
lean::cnstr_set(x_87, 1, x_86);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_51);
lean::cnstr_set(x_88, 1, x_87);
x_89 = l_Lean_Parser_Term_paren;
x_90 = l_Lean_Parser_Syntax_mkNode(x_89, x_88);
return x_90;
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_parenContent_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = l_Lean_Parser_Syntax_asNode___main(x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; obj* x_4; 
x_3 = l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__1;
x_4 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_4, 0, x_0);
lean::cnstr_set(x_4, 1, x_3);
lean::cnstr_set(x_4, 2, x_0);
return x_4;
}
else
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_2, 0);
if (lean::is_exclusive(x_2)) {
 lean::cnstr_set(x_2, 0, lean::box(0));
 x_7 = x_2;
} else {
 lean::inc(x_5);
 lean::dec(x_2);
 x_7 = lean::box(0);
}
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
obj* x_12; 
lean::dec(x_7);
x_12 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_12, 0, x_0);
lean::cnstr_set(x_12, 1, x_0);
lean::cnstr_set(x_12, 2, x_0);
return x_12;
}
else
{
obj* x_13; 
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
if (lean::obj_tag(x_13) == 0)
{
obj* x_15; obj* x_18; obj* x_19; obj* x_22; obj* x_23; obj* x_24; 
x_15 = lean::cnstr_get(x_8, 0);
lean::inc(x_15);
lean::dec(x_8);
x_18 = l_Lean_Parser_Term_parenContent_HasView;
x_19 = lean::cnstr_get(x_18, 0);
lean::inc(x_19);
lean::dec(x_18);
x_22 = lean::apply_1(x_19, x_15);
if (lean::is_scalar(x_7)) {
 x_23 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_23 = x_7;
}
lean::cnstr_set(x_23, 0, x_22);
x_24 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_24, 0, x_0);
lean::cnstr_set(x_24, 1, x_23);
lean::cnstr_set(x_24, 2, x_0);
return x_24;
}
else
{
obj* x_28; obj* x_29; 
lean::dec(x_7);
lean::dec(x_8);
lean::dec(x_13);
x_28 = l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__1;
x_29 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_29, 0, x_0);
lean::cnstr_set(x_29, 1, x_28);
lean::cnstr_set(x_29, 2, x_0);
return x_29;
}
}
}
}
}
obj* l_Lean_Parser_Term_paren_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; obj* x_30; obj* x_31; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_33; 
x_33 = lean::box(3);
x_30 = x_1;
x_31 = x_33;
goto lbl_32;
}
else
{
obj* x_34; obj* x_36; 
x_34 = lean::cnstr_get(x_1, 0);
lean::inc(x_34);
x_36 = lean::cnstr_get(x_1, 1);
lean::inc(x_36);
lean::dec(x_1);
x_30 = x_36;
x_31 = x_34;
goto lbl_32;
}
lbl_29:
{
switch (lean::obj_tag(x_28)) {
case 0:
{
obj* x_39; obj* x_42; obj* x_43; 
x_39 = lean::cnstr_get(x_28, 0);
lean::inc(x_39);
lean::dec(x_28);
x_42 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_42, 0, x_39);
x_43 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_43, 0, x_18);
lean::cnstr_set(x_43, 1, x_27);
lean::cnstr_set(x_43, 2, x_42);
return x_43;
}
case 3:
{
obj* x_44; obj* x_45; 
x_44 = lean::box(0);
x_45 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_45, 0, x_18);
lean::cnstr_set(x_45, 1, x_27);
lean::cnstr_set(x_45, 2, x_44);
return x_45;
}
default:
{
obj* x_47; obj* x_48; 
lean::dec(x_28);
x_47 = lean::box(0);
x_48 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_48, 0, x_18);
lean::cnstr_set(x_48, 1, x_27);
lean::cnstr_set(x_48, 2, x_47);
return x_48;
}
}
}
lbl_32:
{
obj* x_49; 
x_49 = l_Lean_Parser_Syntax_asNode___main(x_31);
if (lean::obj_tag(x_49) == 0)
{
if (lean::obj_tag(x_30) == 0)
{
obj* x_50; obj* x_51; obj* x_52; 
x_50 = lean::box(0);
x_51 = l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__1;
x_52 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_52, 0, x_18);
lean::cnstr_set(x_52, 1, x_51);
lean::cnstr_set(x_52, 2, x_50);
return x_52;
}
else
{
obj* x_53; obj* x_56; 
x_53 = lean::cnstr_get(x_30, 0);
lean::inc(x_53);
lean::dec(x_30);
x_56 = l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__1;
x_27 = x_56;
x_28 = x_53;
goto lbl_29;
}
}
else
{
obj* x_57; obj* x_59; obj* x_60; 
x_57 = lean::cnstr_get(x_49, 0);
if (lean::is_exclusive(x_49)) {
 lean::cnstr_set(x_49, 0, lean::box(0));
 x_59 = x_49;
} else {
 lean::inc(x_57);
 lean::dec(x_49);
 x_59 = lean::box(0);
}
x_60 = lean::cnstr_get(x_57, 1);
lean::inc(x_60);
lean::dec(x_57);
if (lean::obj_tag(x_60) == 0)
{
obj* x_64; 
lean::dec(x_59);
x_64 = lean::box(0);
if (lean::obj_tag(x_30) == 0)
{
obj* x_65; 
x_65 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_65, 0, x_18);
lean::cnstr_set(x_65, 1, x_64);
lean::cnstr_set(x_65, 2, x_64);
return x_65;
}
else
{
obj* x_66; 
x_66 = lean::cnstr_get(x_30, 0);
lean::inc(x_66);
lean::dec(x_30);
x_27 = x_64;
x_28 = x_66;
goto lbl_29;
}
}
else
{
obj* x_69; 
x_69 = lean::cnstr_get(x_60, 1);
lean::inc(x_69);
if (lean::obj_tag(x_69) == 0)
{
obj* x_71; obj* x_74; obj* x_75; obj* x_78; obj* x_79; 
x_71 = lean::cnstr_get(x_60, 0);
lean::inc(x_71);
lean::dec(x_60);
x_74 = l_Lean_Parser_Term_parenContent_HasView;
x_75 = lean::cnstr_get(x_74, 0);
lean::inc(x_75);
lean::dec(x_74);
x_78 = lean::apply_1(x_75, x_71);
if (lean::is_scalar(x_59)) {
 x_79 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_79 = x_59;
}
lean::cnstr_set(x_79, 0, x_78);
if (lean::obj_tag(x_30) == 0)
{
obj* x_80; obj* x_81; 
x_80 = lean::box(0);
x_81 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_81, 0, x_18);
lean::cnstr_set(x_81, 1, x_79);
lean::cnstr_set(x_81, 2, x_80);
return x_81;
}
else
{
obj* x_82; 
x_82 = lean::cnstr_get(x_30, 0);
lean::inc(x_82);
lean::dec(x_30);
x_27 = x_79;
x_28 = x_82;
goto lbl_29;
}
}
else
{
lean::dec(x_59);
lean::dec(x_60);
lean::dec(x_69);
if (lean::obj_tag(x_30) == 0)
{
obj* x_88; obj* x_89; obj* x_90; 
x_88 = lean::box(0);
x_89 = l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__1;
x_90 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_90, 0, x_18);
lean::cnstr_set(x_90, 1, x_89);
lean::cnstr_set(x_90, 2, x_88);
return x_90;
}
else
{
obj* x_91; obj* x_94; 
x_91 = lean::cnstr_get(x_30, 0);
lean::inc(x_91);
lean::dec(x_30);
x_94 = l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__1;
x_27 = x_94;
x_28 = x_91;
goto lbl_29;
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_paren_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_paren_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_paren_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_paren_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_paren_HasView_x_27;
return x_0;
}
}
obj* l___private_init_lean_parser_combinators_2__sepByAux___main___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__2(obj* x_0, obj* x_1, uint8 x_2, uint8 x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9, obj* x_10) {
_start:
{
obj* x_11; uint8 x_12; 
x_11 = lean::mk_nat_obj(0ul);
x_12 = lean::nat_dec_eq(x_5, x_11);
if (x_12 == 0)
{
obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_19; 
x_13 = lean::mk_nat_obj(1ul);
x_14 = lean::nat_sub(x_5, x_13);
if (x_3 == 0)
{
obj* x_25; obj* x_26; 
lean::inc(x_8);
lean::inc(x_7);
lean::inc(x_6);
lean::inc(x_0);
x_25 = lean::apply_5(x_0, x_6, x_7, x_8, x_9, x_10);
x_26 = lean::cnstr_get(x_25, 0);
lean::inc(x_26);
if (lean::obj_tag(x_26) == 0)
{
obj* x_28; obj* x_31; obj* x_33; obj* x_35; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; 
x_28 = lean::cnstr_get(x_25, 1);
lean::inc(x_28);
lean::dec(x_25);
x_31 = lean::cnstr_get(x_26, 0);
x_33 = lean::cnstr_get(x_26, 1);
x_35 = lean::cnstr_get(x_26, 2);
if (lean::is_exclusive(x_26)) {
 x_37 = x_26;
} else {
 lean::inc(x_31);
 lean::inc(x_33);
 lean::inc(x_35);
 lean::dec(x_26);
 x_37 = lean::box(0);
}
x_38 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_38, 0, x_31);
x_39 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_37)) {
 x_40 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_40 = x_37;
}
lean::cnstr_set(x_40, 0, x_38);
lean::cnstr_set(x_40, 1, x_33);
lean::cnstr_set(x_40, 2, x_39);
x_41 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_35, x_40);
x_18 = x_41;
x_19 = x_28;
goto lbl_20;
}
else
{
obj* x_42; obj* x_45; uint8 x_47; obj* x_48; obj* x_49; obj* x_50; 
x_42 = lean::cnstr_get(x_25, 1);
lean::inc(x_42);
lean::dec(x_25);
x_45 = lean::cnstr_get(x_26, 0);
x_47 = lean::cnstr_get_scalar<uint8>(x_26, sizeof(void*)*1);
if (lean::is_exclusive(x_26)) {
 x_48 = x_26;
} else {
 lean::inc(x_45);
 lean::dec(x_26);
 x_48 = lean::box(0);
}
if (lean::is_scalar(x_48)) {
 x_49 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_49 = x_48;
}
lean::cnstr_set(x_49, 0, x_45);
lean::cnstr_set_scalar(x_49, sizeof(void*)*1, x_47);
x_50 = x_49;
x_18 = x_50;
x_19 = x_42;
goto lbl_20;
}
}
else
{
obj* x_51; obj* x_57; obj* x_58; 
x_51 = lean::box(0);
lean::inc(x_9);
lean::inc(x_8);
lean::inc(x_7);
lean::inc(x_6);
lean::inc(x_0);
x_57 = lean::apply_5(x_0, x_6, x_7, x_8, x_9, x_10);
x_58 = lean::cnstr_get(x_57, 0);
lean::inc(x_58);
if (lean::obj_tag(x_58) == 0)
{
obj* x_60; obj* x_63; obj* x_65; obj* x_67; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; 
x_60 = lean::cnstr_get(x_57, 1);
lean::inc(x_60);
lean::dec(x_57);
x_63 = lean::cnstr_get(x_58, 0);
x_65 = lean::cnstr_get(x_58, 1);
x_67 = lean::cnstr_get(x_58, 2);
if (lean::is_exclusive(x_58)) {
 x_69 = x_58;
} else {
 lean::inc(x_63);
 lean::inc(x_65);
 lean::inc(x_67);
 lean::dec(x_58);
 x_69 = lean::box(0);
}
x_70 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_70, 0, x_63);
x_71 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_69)) {
 x_72 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_72 = x_69;
}
lean::cnstr_set(x_72, 0, x_70);
lean::cnstr_set(x_72, 1, x_65);
lean::cnstr_set(x_72, 2, x_71);
x_73 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_67, x_72);
if (lean::obj_tag(x_73) == 0)
{
lean::dec(x_9);
x_18 = x_73;
x_19 = x_60;
goto lbl_20;
}
else
{
uint8 x_75; 
x_75 = lean::cnstr_get_scalar<uint8>(x_73, sizeof(void*)*1);
if (x_75 == 0)
{
obj* x_76; obj* x_79; obj* x_82; obj* x_83; obj* x_84; obj* x_85; 
x_76 = lean::cnstr_get(x_73, 0);
lean::inc(x_76);
lean::dec(x_73);
x_79 = lean::cnstr_get(x_76, 2);
lean::inc(x_79);
lean::dec(x_76);
x_82 = l_mjoin___rarg___closed__1;
x_83 = lean::alloc_closure(reinterpret_cast<void*>(l_Function_comp___rarg), 3, 2);
lean::closure_set(x_83, 0, x_79);
lean::closure_set(x_83, 1, x_82);
x_84 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_84, 0, x_83);
x_85 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_85, 0, x_51);
lean::cnstr_set(x_85, 1, x_9);
lean::cnstr_set(x_85, 2, x_84);
x_18 = x_85;
x_19 = x_60;
goto lbl_20;
}
else
{
lean::dec(x_9);
x_18 = x_73;
x_19 = x_60;
goto lbl_20;
}
}
}
else
{
uint8 x_87; 
x_87 = lean::cnstr_get_scalar<uint8>(x_58, sizeof(void*)*1);
if (x_87 == 0)
{
obj* x_88; obj* x_91; obj* x_94; obj* x_97; obj* x_98; obj* x_99; obj* x_100; 
x_88 = lean::cnstr_get(x_57, 1);
lean::inc(x_88);
lean::dec(x_57);
x_91 = lean::cnstr_get(x_58, 0);
lean::inc(x_91);
lean::dec(x_58);
x_94 = lean::cnstr_get(x_91, 2);
lean::inc(x_94);
lean::dec(x_91);
x_97 = l_mjoin___rarg___closed__1;
x_98 = lean::alloc_closure(reinterpret_cast<void*>(l_Function_comp___rarg), 3, 2);
lean::closure_set(x_98, 0, x_94);
lean::closure_set(x_98, 1, x_97);
x_99 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_99, 0, x_98);
x_100 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_100, 0, x_51);
lean::cnstr_set(x_100, 1, x_9);
lean::cnstr_set(x_100, 2, x_99);
x_18 = x_100;
x_19 = x_88;
goto lbl_20;
}
else
{
obj* x_102; obj* x_105; obj* x_107; obj* x_108; obj* x_109; 
lean::dec(x_9);
x_102 = lean::cnstr_get(x_57, 1);
lean::inc(x_102);
lean::dec(x_57);
x_105 = lean::cnstr_get(x_58, 0);
if (lean::is_exclusive(x_58)) {
 x_107 = x_58;
} else {
 lean::inc(x_105);
 lean::dec(x_58);
 x_107 = lean::box(0);
}
if (lean::is_scalar(x_107)) {
 x_108 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_108 = x_107;
}
lean::cnstr_set(x_108, 0, x_105);
lean::cnstr_set_scalar(x_108, sizeof(void*)*1, x_87);
x_109 = x_108;
x_18 = x_109;
x_19 = x_102;
goto lbl_20;
}
}
}
lbl_17:
{
if (lean::obj_tag(x_15) == 0)
{
obj* x_110; 
x_110 = lean::cnstr_get(x_15, 0);
lean::inc(x_110);
if (lean::obj_tag(x_110) == 0)
{
obj* x_118; obj* x_120; obj* x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; obj* x_129; 
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_14);
x_118 = lean::cnstr_get(x_15, 1);
x_120 = lean::cnstr_get(x_15, 2);
if (lean::is_exclusive(x_15)) {
 lean::cnstr_release(x_15, 0);
 x_122 = x_15;
} else {
 lean::inc(x_118);
 lean::inc(x_120);
 lean::dec(x_15);
 x_122 = lean::box(0);
}
x_123 = l_List_reverse___rarg(x_4);
x_124 = l_Lean_Parser_noKind;
x_125 = l_Lean_Parser_Syntax_mkNode(x_124, x_123);
x_126 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_122)) {
 x_127 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_127 = x_122;
}
lean::cnstr_set(x_127, 0, x_125);
lean::cnstr_set(x_127, 1, x_118);
lean::cnstr_set(x_127, 2, x_126);
x_128 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_120, x_127);
x_129 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_129, 0, x_128);
lean::cnstr_set(x_129, 1, x_16);
return x_129;
}
else
{
obj* x_130; obj* x_132; obj* x_134; obj* x_135; obj* x_137; obj* x_138; obj* x_139; obj* x_141; obj* x_147; obj* x_148; obj* x_150; obj* x_153; 
x_130 = lean::cnstr_get(x_15, 1);
x_132 = lean::cnstr_get(x_15, 2);
if (lean::is_exclusive(x_15)) {
 lean::cnstr_release(x_15, 0);
 lean::cnstr_set(x_15, 1, lean::box(0));
 lean::cnstr_set(x_15, 2, lean::box(0));
 x_134 = x_15;
} else {
 lean::inc(x_130);
 lean::inc(x_132);
 lean::dec(x_15);
 x_134 = lean::box(0);
}
x_135 = lean::cnstr_get(x_110, 0);
if (lean::is_exclusive(x_110)) {
 lean::cnstr_set(x_110, 0, lean::box(0));
 x_137 = x_110;
} else {
 lean::inc(x_135);
 lean::dec(x_110);
 x_137 = lean::box(0);
}
x_141 = lean::box(0);
lean::inc(x_130);
lean::inc(x_8);
lean::inc(x_7);
lean::inc(x_6);
lean::inc(x_1);
x_147 = lean::apply_5(x_1, x_6, x_7, x_8, x_130, x_16);
x_148 = lean::cnstr_get(x_147, 0);
lean::inc(x_148);
x_150 = lean::cnstr_get(x_147, 1);
lean::inc(x_150);
lean::dec(x_147);
x_153 = l_Lean_Parser_ParsecT_tryMkRes___rarg(x_148);
if (lean::obj_tag(x_153) == 0)
{
obj* x_154; obj* x_156; obj* x_158; obj* x_160; obj* x_161; obj* x_162; obj* x_163; obj* x_164; 
x_154 = lean::cnstr_get(x_153, 0);
x_156 = lean::cnstr_get(x_153, 1);
x_158 = lean::cnstr_get(x_153, 2);
if (lean::is_exclusive(x_153)) {
 x_160 = x_153;
} else {
 lean::inc(x_154);
 lean::inc(x_156);
 lean::inc(x_158);
 lean::dec(x_153);
 x_160 = lean::box(0);
}
if (lean::is_scalar(x_137)) {
 x_161 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_161 = x_137;
}
lean::cnstr_set(x_161, 0, x_154);
x_162 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_160)) {
 x_163 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_163 = x_160;
}
lean::cnstr_set(x_163, 0, x_161);
lean::cnstr_set(x_163, 1, x_156);
lean::cnstr_set(x_163, 2, x_162);
x_164 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_158, x_163);
if (lean::obj_tag(x_164) == 0)
{
lean::dec(x_130);
lean::dec(x_134);
x_138 = x_164;
x_139 = x_150;
goto lbl_140;
}
else
{
uint8 x_167; 
x_167 = lean::cnstr_get_scalar<uint8>(x_164, sizeof(void*)*1);
if (x_167 == 0)
{
obj* x_168; obj* x_171; obj* x_174; obj* x_175; obj* x_176; obj* x_177; 
x_168 = lean::cnstr_get(x_164, 0);
lean::inc(x_168);
lean::dec(x_164);
x_171 = lean::cnstr_get(x_168, 2);
lean::inc(x_171);
lean::dec(x_168);
x_174 = l_mjoin___rarg___closed__1;
x_175 = lean::alloc_closure(reinterpret_cast<void*>(l_Function_comp___rarg), 3, 2);
lean::closure_set(x_175, 0, x_171);
lean::closure_set(x_175, 1, x_174);
x_176 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_176, 0, x_175);
if (lean::is_scalar(x_134)) {
 x_177 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_177 = x_134;
}
lean::cnstr_set(x_177, 0, x_141);
lean::cnstr_set(x_177, 1, x_130);
lean::cnstr_set(x_177, 2, x_176);
x_138 = x_177;
x_139 = x_150;
goto lbl_140;
}
else
{
lean::dec(x_130);
lean::dec(x_134);
x_138 = x_164;
x_139 = x_150;
goto lbl_140;
}
}
}
else
{
uint8 x_180; 
x_180 = lean::cnstr_get_scalar<uint8>(x_153, sizeof(void*)*1);
if (x_180 == 0)
{
obj* x_181; obj* x_184; obj* x_187; obj* x_188; obj* x_189; obj* x_190; 
x_181 = lean::cnstr_get(x_153, 0);
lean::inc(x_181);
lean::dec(x_153);
x_184 = lean::cnstr_get(x_181, 2);
lean::inc(x_184);
lean::dec(x_181);
x_187 = l_mjoin___rarg___closed__1;
x_188 = lean::alloc_closure(reinterpret_cast<void*>(l_Function_comp___rarg), 3, 2);
lean::closure_set(x_188, 0, x_184);
lean::closure_set(x_188, 1, x_187);
if (lean::is_scalar(x_137)) {
 x_189 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_189 = x_137;
}
lean::cnstr_set(x_189, 0, x_188);
if (lean::is_scalar(x_134)) {
 x_190 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_190 = x_134;
}
lean::cnstr_set(x_190, 0, x_141);
lean::cnstr_set(x_190, 1, x_130);
lean::cnstr_set(x_190, 2, x_189);
x_138 = x_190;
x_139 = x_150;
goto lbl_140;
}
else
{
obj* x_194; obj* x_196; obj* x_197; obj* x_198; 
lean::dec(x_130);
lean::dec(x_137);
lean::dec(x_134);
x_194 = lean::cnstr_get(x_153, 0);
if (lean::is_exclusive(x_153)) {
 x_196 = x_153;
} else {
 lean::inc(x_194);
 lean::dec(x_153);
 x_196 = lean::box(0);
}
if (lean::is_scalar(x_196)) {
 x_197 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_197 = x_196;
}
lean::cnstr_set(x_197, 0, x_194);
lean::cnstr_set_scalar(x_197, sizeof(void*)*1, x_180);
x_198 = x_197;
x_138 = x_198;
x_139 = x_150;
goto lbl_140;
}
}
lbl_140:
{
if (lean::obj_tag(x_138) == 0)
{
obj* x_199; 
x_199 = lean::cnstr_get(x_138, 0);
lean::inc(x_199);
if (lean::obj_tag(x_199) == 0)
{
obj* x_207; obj* x_209; obj* x_211; obj* x_212; obj* x_213; obj* x_214; obj* x_215; obj* x_216; obj* x_217; obj* x_218; obj* x_219; obj* x_220; 
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_14);
x_207 = lean::cnstr_get(x_138, 1);
x_209 = lean::cnstr_get(x_138, 2);
if (lean::is_exclusive(x_138)) {
 lean::cnstr_release(x_138, 0);
 x_211 = x_138;
} else {
 lean::inc(x_207);
 lean::inc(x_209);
 lean::dec(x_138);
 x_211 = lean::box(0);
}
x_212 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_212, 0, x_135);
lean::cnstr_set(x_212, 1, x_4);
x_213 = l_List_reverse___rarg(x_212);
x_214 = l_Lean_Parser_noKind;
x_215 = l_Lean_Parser_Syntax_mkNode(x_214, x_213);
x_216 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_211)) {
 x_217 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_217 = x_211;
}
lean::cnstr_set(x_217, 0, x_215);
lean::cnstr_set(x_217, 1, x_207);
lean::cnstr_set(x_217, 2, x_216);
x_218 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_209, x_217);
x_219 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_132, x_218);
x_220 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_220, 0, x_219);
lean::cnstr_set(x_220, 1, x_139);
return x_220;
}
else
{
obj* x_221; obj* x_223; obj* x_226; obj* x_229; obj* x_230; obj* x_231; obj* x_233; obj* x_235; obj* x_237; obj* x_238; obj* x_239; obj* x_240; 
x_221 = lean::cnstr_get(x_138, 1);
lean::inc(x_221);
x_223 = lean::cnstr_get(x_138, 2);
lean::inc(x_223);
lean::dec(x_138);
x_226 = lean::cnstr_get(x_199, 0);
lean::inc(x_226);
lean::dec(x_199);
x_229 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_229, 0, x_135);
lean::cnstr_set(x_229, 1, x_4);
x_230 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_230, 0, x_226);
lean::cnstr_set(x_230, 1, x_229);
x_231 = l___private_init_lean_parser_combinators_2__sepByAux___main___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__2(x_0, x_1, x_2, x_2, x_230, x_14, x_6, x_7, x_8, x_221, x_139);
lean::dec(x_14);
x_233 = lean::cnstr_get(x_231, 0);
x_235 = lean::cnstr_get(x_231, 1);
if (lean::is_exclusive(x_231)) {
 x_237 = x_231;
} else {
 lean::inc(x_233);
 lean::inc(x_235);
 lean::dec(x_231);
 x_237 = lean::box(0);
}
x_238 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_223, x_233);
x_239 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_132, x_238);
if (lean::is_scalar(x_237)) {
 x_240 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_240 = x_237;
}
lean::cnstr_set(x_240, 0, x_239);
lean::cnstr_set(x_240, 1, x_235);
return x_240;
}
}
else
{
obj* x_249; uint8 x_251; obj* x_252; obj* x_253; obj* x_254; obj* x_255; obj* x_256; 
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_135);
lean::dec(x_14);
x_249 = lean::cnstr_get(x_138, 0);
x_251 = lean::cnstr_get_scalar<uint8>(x_138, sizeof(void*)*1);
if (lean::is_exclusive(x_138)) {
 x_252 = x_138;
} else {
 lean::inc(x_249);
 lean::dec(x_138);
 x_252 = lean::box(0);
}
if (lean::is_scalar(x_252)) {
 x_253 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_253 = x_252;
}
lean::cnstr_set(x_253, 0, x_249);
lean::cnstr_set_scalar(x_253, sizeof(void*)*1, x_251);
x_254 = x_253;
x_255 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_132, x_254);
x_256 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_256, 0, x_255);
lean::cnstr_set(x_256, 1, x_139);
return x_256;
}
}
}
}
else
{
obj* x_264; uint8 x_266; obj* x_267; obj* x_268; obj* x_269; obj* x_270; 
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_0);
lean::dec(x_14);
x_264 = lean::cnstr_get(x_15, 0);
x_266 = lean::cnstr_get_scalar<uint8>(x_15, sizeof(void*)*1);
if (lean::is_exclusive(x_15)) {
 x_267 = x_15;
} else {
 lean::inc(x_264);
 lean::dec(x_15);
 x_267 = lean::box(0);
}
if (lean::is_scalar(x_267)) {
 x_268 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_268 = x_267;
}
lean::cnstr_set(x_268, 0, x_264);
lean::cnstr_set_scalar(x_268, sizeof(void*)*1, x_266);
x_269 = x_268;
x_270 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_270, 0, x_269);
lean::cnstr_set(x_270, 1, x_16);
return x_270;
}
}
lbl_20:
{
if (lean::obj_tag(x_18) == 0)
{
x_15 = x_18;
x_16 = x_19;
goto lbl_17;
}
else
{
obj* x_271; uint8 x_273; obj* x_274; obj* x_275; 
x_271 = lean::cnstr_get(x_18, 0);
x_273 = lean::cnstr_get_scalar<uint8>(x_18, sizeof(void*)*1);
if (lean::is_exclusive(x_18)) {
 lean::cnstr_set(x_18, 0, lean::box(0));
 x_274 = x_18;
} else {
 lean::inc(x_271);
 lean::dec(x_18);
 x_274 = lean::box(0);
}
x_275 = lean::cnstr_get(x_271, 3);
lean::inc(x_275);
if (lean::obj_tag(x_275) == 0)
{
obj* x_277; obj* x_279; obj* x_281; obj* x_283; obj* x_284; obj* x_286; obj* x_287; obj* x_288; obj* x_289; obj* x_290; obj* x_291; obj* x_292; 
x_277 = lean::cnstr_get(x_271, 0);
x_279 = lean::cnstr_get(x_271, 1);
x_281 = lean::cnstr_get(x_271, 2);
if (lean::is_exclusive(x_271)) {
 lean::cnstr_release(x_271, 3);
 x_283 = x_271;
} else {
 lean::inc(x_277);
 lean::inc(x_279);
 lean::inc(x_281);
 lean::dec(x_271);
 x_283 = lean::box(0);
}
x_284 = lean::box(3);
lean::inc(x_4);
x_286 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_286, 0, x_284);
lean::cnstr_set(x_286, 1, x_4);
x_287 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_287, 0, x_284);
lean::cnstr_set(x_287, 1, x_286);
x_288 = l_List_reverse___rarg(x_287);
x_289 = l_Lean_Parser_noKind;
x_290 = l_Lean_Parser_Syntax_mkNode(x_289, x_288);
x_291 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_291, 0, x_290);
if (lean::is_scalar(x_283)) {
 x_292 = lean::alloc_cnstr(0, 4, 0);
} else {
 x_292 = x_283;
}
lean::cnstr_set(x_292, 0, x_277);
lean::cnstr_set(x_292, 1, x_279);
lean::cnstr_set(x_292, 2, x_281);
lean::cnstr_set(x_292, 3, x_291);
if (x_273 == 0)
{
uint8 x_293; obj* x_294; obj* x_295; 
x_293 = 0;
if (lean::is_scalar(x_274)) {
 x_294 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_294 = x_274;
}
lean::cnstr_set(x_294, 0, x_292);
lean::cnstr_set_scalar(x_294, sizeof(void*)*1, x_293);
x_295 = x_294;
x_15 = x_295;
x_16 = x_19;
goto lbl_17;
}
else
{
uint8 x_296; obj* x_297; obj* x_298; 
x_296 = 1;
if (lean::is_scalar(x_274)) {
 x_297 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_297 = x_274;
}
lean::cnstr_set(x_297, 0, x_292);
lean::cnstr_set_scalar(x_297, sizeof(void*)*1, x_296);
x_298 = x_297;
x_15 = x_298;
x_16 = x_19;
goto lbl_17;
}
}
else
{
obj* x_299; obj* x_301; obj* x_303; obj* x_305; obj* x_306; obj* x_308; obj* x_310; obj* x_311; obj* x_312; obj* x_313; obj* x_314; obj* x_315; obj* x_316; obj* x_317; 
x_299 = lean::cnstr_get(x_271, 0);
x_301 = lean::cnstr_get(x_271, 1);
x_303 = lean::cnstr_get(x_271, 2);
if (lean::is_exclusive(x_271)) {
 lean::cnstr_release(x_271, 3);
 x_305 = x_271;
} else {
 lean::inc(x_299);
 lean::inc(x_301);
 lean::inc(x_303);
 lean::dec(x_271);
 x_305 = lean::box(0);
}
x_306 = lean::cnstr_get(x_275, 0);
if (lean::is_exclusive(x_275)) {
 x_308 = x_275;
} else {
 lean::inc(x_306);
 lean::dec(x_275);
 x_308 = lean::box(0);
}
lean::inc(x_4);
x_310 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_310, 0, x_306);
lean::cnstr_set(x_310, 1, x_4);
x_311 = lean::box(3);
x_312 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_312, 0, x_311);
lean::cnstr_set(x_312, 1, x_310);
x_313 = l_List_reverse___rarg(x_312);
x_314 = l_Lean_Parser_noKind;
x_315 = l_Lean_Parser_Syntax_mkNode(x_314, x_313);
if (lean::is_scalar(x_308)) {
 x_316 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_316 = x_308;
}
lean::cnstr_set(x_316, 0, x_315);
if (lean::is_scalar(x_305)) {
 x_317 = lean::alloc_cnstr(0, 4, 0);
} else {
 x_317 = x_305;
}
lean::cnstr_set(x_317, 0, x_299);
lean::cnstr_set(x_317, 1, x_301);
lean::cnstr_set(x_317, 2, x_303);
lean::cnstr_set(x_317, 3, x_316);
if (x_273 == 0)
{
uint8 x_318; obj* x_319; obj* x_320; 
x_318 = 0;
if (lean::is_scalar(x_274)) {
 x_319 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_319 = x_274;
}
lean::cnstr_set(x_319, 0, x_317);
lean::cnstr_set_scalar(x_319, sizeof(void*)*1, x_318);
x_320 = x_319;
x_15 = x_320;
x_16 = x_19;
goto lbl_17;
}
else
{
uint8 x_321; obj* x_322; obj* x_323; 
x_321 = 1;
if (lean::is_scalar(x_274)) {
 x_322 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_322 = x_274;
}
lean::cnstr_set(x_322, 0, x_317);
lean::cnstr_set_scalar(x_322, sizeof(void*)*1, x_321);
x_323 = x_322;
x_15 = x_323;
x_16 = x_19;
goto lbl_17;
}
}
}
}
}
else
{
obj* x_327; obj* x_328; obj* x_329; obj* x_330; 
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_0);
x_327 = lean::box(0);
x_328 = l___private_init_lean_parser_combinators_1__many1Aux___main___rarg___closed__1;
x_329 = l_mjoin___rarg___closed__1;
x_330 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__4___rarg(x_328, x_329, x_327, x_327, x_6, x_7, x_8, x_9, x_10);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_6);
return x_330;
}
}
}
obj* l_Lean_Parser_Combinators_sepBy___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__1(obj* x_0, obj* x_1, uint8 x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; uint8 x_13; obj* x_14; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_8 = l_String_OldIterator_remaining___main(x_6);
x_9 = lean::box(0);
x_10 = lean::mk_nat_obj(1ul);
x_11 = lean::nat_add(x_8, x_10);
lean::dec(x_8);
x_13 = 1;
x_14 = l___private_init_lean_parser_combinators_2__sepByAux___main___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__2(x_0, x_1, x_2, x_13, x_9, x_11, x_3, x_4, x_5, x_6, x_7);
lean::dec(x_11);
x_16 = lean::cnstr_get(x_14, 0);
x_18 = lean::cnstr_get(x_14, 1);
if (lean::is_exclusive(x_14)) {
 x_20 = x_14;
} else {
 lean::inc(x_16);
 lean::inc(x_18);
 lean::dec(x_14);
 x_20 = lean::box(0);
}
x_21 = l_Lean_Parser_finishCommentBlock___closed__2;
x_22 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_21, x_16);
if (lean::is_scalar(x_20)) {
 x_23 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_23 = x_20;
}
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_18);
return x_23;
}
}
obj* _init_l_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_16; obj* x_18; obj* x_19; obj* x_21; obj* x_22; obj* x_25; obj* x_27; obj* x_29; obj* x_32; obj* x_34; obj* x_36; obj* x_38; obj* x_40; obj* x_42; obj* x_45; obj* x_47; obj* x_49; obj* x_50; obj* x_52; obj* x_54; obj* x_57; obj* x_60; 
x_0 = lean::mk_string("(");
x_1 = l_Lean_Parser_maxPrec;
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = lean::mk_nat_obj(0ul);
x_5 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_4);
x_6 = lean::mk_string(", ");
x_7 = l_Lean_Parser_symbol_tokens___rarg(x_6, x_4);
lean::dec(x_6);
x_9 = l_Lean_Parser_Combinators_sepBy_tokens___rarg(x_5, x_7);
x_10 = lean::box(0);
x_11 = l_Lean_Parser_List_cons_tokens___rarg(x_9, x_10);
lean::dec(x_9);
x_13 = l_Lean_Parser_List_cons_tokens___rarg(x_7, x_11);
lean::dec(x_11);
lean::dec(x_7);
x_16 = l_Lean_Parser_tokens___rarg(x_13);
lean::dec(x_13);
x_18 = lean::mk_string(" : ");
x_19 = l_Lean_Parser_symbol_tokens___rarg(x_18, x_4);
lean::dec(x_18);
x_21 = l_Lean_Parser_List_cons_tokens___rarg(x_5, x_10);
x_22 = l_Lean_Parser_List_cons_tokens___rarg(x_19, x_21);
lean::dec(x_21);
lean::dec(x_19);
x_25 = l_Lean_Parser_tokens___rarg(x_22);
lean::dec(x_22);
x_27 = l_Lean_Parser_List_cons_tokens___rarg(x_25, x_10);
lean::dec(x_25);
x_29 = l_Lean_Parser_List_cons_tokens___rarg(x_16, x_27);
lean::dec(x_27);
lean::dec(x_16);
x_32 = l_Lean_Parser_tokens___rarg(x_29);
lean::dec(x_29);
x_34 = l_Lean_Parser_List_cons_tokens___rarg(x_32, x_10);
lean::dec(x_32);
x_36 = l_Lean_Parser_tokens___rarg(x_34);
lean::dec(x_34);
x_38 = l_Lean_Parser_tokens___rarg(x_36);
lean::dec(x_36);
x_40 = l_Lean_Parser_List_cons_tokens___rarg(x_38, x_10);
lean::dec(x_38);
x_42 = l_Lean_Parser_List_cons_tokens___rarg(x_5, x_40);
lean::dec(x_40);
lean::dec(x_5);
x_45 = l_Lean_Parser_tokens___rarg(x_42);
lean::dec(x_42);
x_47 = l_Lean_Parser_tokens___rarg(x_45);
lean::dec(x_45);
x_49 = lean::mk_string(")");
x_50 = l_Lean_Parser_symbol_tokens___rarg(x_49, x_4);
lean::dec(x_49);
x_52 = l_Lean_Parser_List_cons_tokens___rarg(x_50, x_10);
lean::dec(x_50);
x_54 = l_Lean_Parser_List_cons_tokens___rarg(x_47, x_52);
lean::dec(x_52);
lean::dec(x_47);
x_57 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_54);
lean::dec(x_54);
lean::dec(x_2);
x_60 = l_Lean_Parser_tokens___rarg(x_57);
lean::dec(x_57);
return x_60;
}
}
obj* l___private_init_lean_parser_combinators_2__sepByAux___main___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__2___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9, obj* x_10) {
_start:
{
uint8 x_11; uint8 x_12; obj* x_13; 
x_11 = lean::unbox(x_2);
x_12 = lean::unbox(x_3);
x_13 = l___private_init_lean_parser_combinators_2__sepByAux___main___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__2(x_0, x_1, x_11, x_12, x_4, x_5, x_6, x_7, x_8, x_9, x_10);
lean::dec(x_5);
return x_13;
}
}
obj* l_Lean_Parser_Combinators_sepBy___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
uint8 x_8; obj* x_9; 
x_8 = lean::unbox(x_2);
x_9 = l_Lean_Parser_Combinators_sepBy___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__1(x_0, x_1, x_8, x_3, x_4, x_5, x_6, x_7);
return x_9;
}
}
obj* _init_l_Lean_Parser_Term_paren_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_13; obj* x_14; uint8 x_15; obj* x_16; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; 
x_0 = lean::mk_string("(");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_nat_obj(0ul);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::mk_string(", ");
x_10 = l_String_trim(x_9);
lean::dec(x_9);
lean::inc(x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_13, 0, x_10);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_14, 0, x_10);
lean::closure_set(x_14, 1, x_7);
lean::closure_set(x_14, 2, x_13);
x_15 = 0;
x_16 = lean::box(x_15);
lean::inc(x_16);
lean::inc(x_14);
lean::inc(x_8);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_sepBy___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_20, 0, x_8);
lean::closure_set(x_20, 1, x_14);
lean::closure_set(x_20, 2, x_16);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_14);
lean::cnstr_set(x_23, 1, x_22);
x_24 = l_Lean_Parser_Term_tuple;
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_25, 0, x_24);
lean::closure_set(x_25, 1, x_23);
x_26 = lean::mk_string(" : ");
x_27 = l_String_trim(x_26);
lean::dec(x_26);
lean::inc(x_27);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_30, 0, x_27);
x_31 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_31, 0, x_27);
lean::closure_set(x_31, 1, x_7);
lean::closure_set(x_31, 2, x_30);
lean::inc(x_8);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_8);
lean::cnstr_set(x_33, 1, x_21);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_31);
lean::cnstr_set(x_34, 1, x_33);
x_35 = l_Lean_Parser_Term_typed;
x_36 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_36, 0, x_35);
lean::closure_set(x_36, 1, x_34);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_21);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_25);
lean::cnstr_set(x_38, 1, x_37);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_39, 0, x_38);
lean::closure_set(x_39, 1, x_7);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_21);
x_41 = l_Lean_Parser_Term_parenSpecial;
x_42 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_42, 0, x_41);
lean::closure_set(x_42, 1, x_40);
lean::inc(x_16);
x_44 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_44, 0, x_42);
lean::closure_set(x_44, 1, x_16);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_21);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_8);
lean::cnstr_set(x_46, 1, x_45);
x_47 = l_Lean_Parser_Term_parenContent;
x_48 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_48, 0, x_47);
lean::closure_set(x_48, 1, x_46);
x_49 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_49, 0, x_48);
lean::closure_set(x_49, 1, x_16);
x_50 = lean::mk_string(")");
x_51 = l_String_trim(x_50);
lean::dec(x_50);
lean::inc(x_51);
x_54 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_54, 0, x_51);
x_55 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_55, 0, x_51);
lean::closure_set(x_55, 1, x_7);
lean::closure_set(x_55, 2, x_54);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_55);
lean::cnstr_set(x_56, 1, x_21);
x_57 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_57, 0, x_49);
lean::cnstr_set(x_57, 1, x_56);
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_6);
lean::cnstr_set(x_58, 1, x_57);
x_59 = l_Lean_Parser_TermParserM_Monad;
x_60 = l_Lean_Parser_TermParserM_MonadExcept;
x_61 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_62 = l_Lean_Parser_TermParserM_Alternative;
x_63 = l_Lean_Parser_Term_paren;
x_64 = l_Lean_Parser_Term_paren_HasView;
x_65 = l_Lean_Parser_Combinators_node_view___rarg(x_59, x_60, x_61, x_62, x_63, x_58, x_64);
lean::dec(x_58);
return x_65;
}
}
obj* _init_l_Lean_Parser_Term_paren_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_13; obj* x_14; uint8 x_15; obj* x_16; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; 
x_0 = lean::mk_string("(");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_nat_obj(0ul);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::mk_string(", ");
x_10 = l_String_trim(x_9);
lean::dec(x_9);
lean::inc(x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_13, 0, x_10);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_14, 0, x_10);
lean::closure_set(x_14, 1, x_7);
lean::closure_set(x_14, 2, x_13);
x_15 = 0;
x_16 = lean::box(x_15);
lean::inc(x_16);
lean::inc(x_14);
lean::inc(x_8);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_sepBy___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_20, 0, x_8);
lean::closure_set(x_20, 1, x_14);
lean::closure_set(x_20, 2, x_16);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_14);
lean::cnstr_set(x_23, 1, x_22);
x_24 = l_Lean_Parser_Term_tuple;
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_25, 0, x_24);
lean::closure_set(x_25, 1, x_23);
x_26 = lean::mk_string(" : ");
x_27 = l_String_trim(x_26);
lean::dec(x_26);
lean::inc(x_27);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_30, 0, x_27);
x_31 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_31, 0, x_27);
lean::closure_set(x_31, 1, x_7);
lean::closure_set(x_31, 2, x_30);
lean::inc(x_8);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_8);
lean::cnstr_set(x_33, 1, x_21);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_31);
lean::cnstr_set(x_34, 1, x_33);
x_35 = l_Lean_Parser_Term_typed;
x_36 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_36, 0, x_35);
lean::closure_set(x_36, 1, x_34);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_21);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_25);
lean::cnstr_set(x_38, 1, x_37);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_39, 0, x_38);
lean::closure_set(x_39, 1, x_7);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_21);
x_41 = l_Lean_Parser_Term_parenSpecial;
x_42 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_42, 0, x_41);
lean::closure_set(x_42, 1, x_40);
lean::inc(x_16);
x_44 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_44, 0, x_42);
lean::closure_set(x_44, 1, x_16);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_21);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_8);
lean::cnstr_set(x_46, 1, x_45);
x_47 = l_Lean_Parser_Term_parenContent;
x_48 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_48, 0, x_47);
lean::closure_set(x_48, 1, x_46);
x_49 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_49, 0, x_48);
lean::closure_set(x_49, 1, x_16);
x_50 = lean::mk_string(")");
x_51 = l_String_trim(x_50);
lean::dec(x_50);
lean::inc(x_51);
x_54 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_54, 0, x_51);
x_55 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_55, 0, x_51);
lean::closure_set(x_55, 1, x_7);
lean::closure_set(x_55, 2, x_54);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_55);
lean::cnstr_set(x_56, 1, x_21);
x_57 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_57, 0, x_49);
lean::cnstr_set(x_57, 1, x_56);
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_6);
lean::cnstr_set(x_58, 1, x_57);
return x_58;
}
}
obj* l_Lean_Parser_Term_paren_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_paren;
x_6 = l_Lean_Parser_Term_paren_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_hole() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("hole");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_hole_HasView_x_27___elambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = l_Lean_Parser_Term_hole;
x_4 = l_Lean_Parser_Syntax_mkNode(x_3, x_2);
return x_4;
}
}
obj* l_Lean_Parser_Term_hole_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = l_Lean_Parser_Term_hole_HasView_x_27___elambda__1___closed__1;
return x_1;
}
else
{
obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_2);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = l_Lean_Parser_Term_hole;
x_9 = l_Lean_Parser_Syntax_mkNode(x_8, x_7);
return x_9;
}
}
}
obj* l_Lean_Parser_Term_hole_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = lean::box(0);
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
lean::dec(x_6);
switch (lean::obj_tag(x_11)) {
case 0:
{
obj* x_14; obj* x_17; 
x_14 = lean::cnstr_get(x_11, 0);
lean::inc(x_14);
lean::dec(x_11);
if (lean::is_scalar(x_5)) {
 x_17 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_17 = x_5;
}
lean::cnstr_set(x_17, 0, x_14);
return x_17;
}
case 3:
{
obj* x_19; 
lean::dec(x_5);
x_19 = lean::box(0);
return x_19;
}
default:
{
obj* x_22; 
lean::dec(x_11);
lean::dec(x_5);
x_22 = lean::box(0);
return x_22;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_hole_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_hole_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_hole_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_hole_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_hole_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_hole_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; 
x_0 = lean::mk_string("_");
x_1 = l_Lean_Parser_maxPrec;
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = lean::box(0);
x_5 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_4);
lean::dec(x_2);
x_7 = l_Lean_Parser_tokens___rarg(x_5);
lean::dec(x_5);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_hole_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_0 = lean::mk_string("_");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_Lean_Parser_TermParserM_Monad;
x_10 = l_Lean_Parser_TermParserM_MonadExcept;
x_11 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_12 = l_Lean_Parser_TermParserM_Alternative;
x_13 = l_Lean_Parser_Term_hole;
x_14 = l_Lean_Parser_Term_hole_HasView;
x_15 = l_Lean_Parser_Combinators_node_view___rarg(x_9, x_10, x_11, x_12, x_13, x_8, x_14);
lean::dec(x_8);
return x_15;
}
}
obj* _init_l_Lean_Parser_Term_hole_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::mk_string("_");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_hole_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_hole;
x_6 = l_Lean_Parser_Term_hole_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_sort() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("sort");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_sort_HasView_x_27___elambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::box(0);
x_1 = lean::box(0);
x_2 = lean::mk_nat_obj(0ul);
x_3 = lean_name_mk_numeral(x_1, x_2);
x_4 = lean::box(3);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_4);
lean::cnstr_set(x_5, 1, x_0);
x_6 = l_Lean_Parser_Syntax_mkNode(x_3, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
x_8 = l_Lean_Parser_Term_sort;
x_9 = l_Lean_Parser_Syntax_mkNode(x_8, x_7);
return x_9;
}
}
obj* _init_l_Lean_Parser_Term_sort_HasView_x_27___elambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::box(0);
x_1 = lean::box(0);
x_2 = lean::mk_nat_obj(1ul);
x_3 = lean_name_mk_numeral(x_1, x_2);
x_4 = lean::box(3);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_4);
lean::cnstr_set(x_5, 1, x_0);
x_6 = l_Lean_Parser_Syntax_mkNode(x_3, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
x_8 = l_Lean_Parser_Term_sort;
x_9 = l_Lean_Parser_Syntax_mkNode(x_8, x_7);
return x_9;
}
}
obj* l_Lean_Parser_Term_sort_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
if (lean::obj_tag(x_2) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_sort_HasView_x_27___elambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_6 = lean::cnstr_get(x_2, 0);
lean::inc(x_6);
lean::dec(x_2);
x_9 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_9, 0, x_6);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_12 = l_Lean_Parser_Syntax_mkNode(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_Lean_Parser_Term_sort;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
}
else
{
obj* x_16; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
if (lean::obj_tag(x_16) == 0)
{
obj* x_19; 
x_19 = l_Lean_Parser_Term_sort_HasView_x_27___elambda__1___closed__2;
return x_19;
}
else
{
obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_20 = lean::cnstr_get(x_16, 0);
lean::inc(x_20);
lean::dec(x_16);
x_23 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_26 = l_Lean_Parser_Syntax_mkNode(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_Lean_Parser_Term_sort;
x_29 = l_Lean_Parser_Syntax_mkNode(x_28, x_27);
return x_29;
}
}
}
}
obj* _init_l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(0);
x_1 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(0);
x_1 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__2;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("sort");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_sort_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__4;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3;
return x_23;
}
else
{
obj* x_24; obj* x_26; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
if (lean::is_exclusive(x_22)) {
 lean::cnstr_set(x_22, 0, lean::box(0));
 x_26 = x_22;
} else {
 lean::inc(x_24);
 lean::dec(x_22);
 x_26 = lean::box(0);
}
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_31; 
lean::dec(x_26);
lean::dec(x_24);
x_31 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3;
return x_31;
}
case 1:
{
obj* x_35; 
lean::dec(x_26);
lean::dec(x_27);
lean::dec(x_24);
x_35 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3;
return x_35;
}
default:
{
obj* x_36; obj* x_39; obj* x_41; obj* x_44; uint8 x_45; 
x_36 = lean::cnstr_get(x_24, 1);
lean::inc(x_36);
lean::dec(x_24);
x_39 = lean::cnstr_get(x_27, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_27, 1);
lean::inc(x_41);
lean::dec(x_27);
x_44 = lean::box(0);
x_45 = lean_name_dec_eq(x_39, x_44);
lean::dec(x_39);
if (x_45 == 0)
{
obj* x_50; 
lean::dec(x_26);
lean::dec(x_41);
lean::dec(x_36);
x_50 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3;
return x_50;
}
else
{
if (lean::obj_tag(x_36) == 0)
{
obj* x_53; 
lean::dec(x_26);
lean::dec(x_41);
x_53 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3;
return x_53;
}
else
{
obj* x_54; 
x_54 = lean::cnstr_get(x_36, 1);
lean::inc(x_54);
if (lean::obj_tag(x_54) == 0)
{
obj* x_56; obj* x_59; uint8 x_60; 
x_56 = lean::cnstr_get(x_36, 0);
lean::inc(x_56);
lean::dec(x_36);
x_59 = lean::mk_nat_obj(0ul);
x_60 = lean::nat_dec_eq(x_41, x_59);
lean::dec(x_41);
if (x_60 == 0)
{
switch (lean::obj_tag(x_56)) {
case 0:
{
obj* x_62; obj* x_65; obj* x_66; 
x_62 = lean::cnstr_get(x_56, 0);
lean::inc(x_62);
lean::dec(x_56);
if (lean::is_scalar(x_26)) {
 x_65 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_65 = x_26;
}
lean::cnstr_set(x_65, 0, x_62);
x_66 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_66, 0, x_65);
return x_66;
}
case 3:
{
obj* x_68; 
lean::dec(x_26);
x_68 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__1;
return x_68;
}
default:
{
obj* x_71; 
lean::dec(x_56);
lean::dec(x_26);
x_71 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__1;
return x_71;
}
}
}
else
{
switch (lean::obj_tag(x_56)) {
case 0:
{
obj* x_72; obj* x_75; obj* x_76; 
x_72 = lean::cnstr_get(x_56, 0);
lean::inc(x_72);
lean::dec(x_56);
if (lean::is_scalar(x_26)) {
 x_75 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_75 = x_26;
}
lean::cnstr_set(x_75, 0, x_72);
x_76 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_76, 0, x_75);
return x_76;
}
case 3:
{
obj* x_78; 
lean::dec(x_26);
x_78 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__2;
return x_78;
}
default:
{
obj* x_81; 
lean::dec(x_56);
lean::dec(x_26);
x_81 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__2;
return x_81;
}
}
}
}
else
{
obj* x_86; 
lean::dec(x_26);
lean::dec(x_41);
lean::dec(x_54);
lean::dec(x_36);
x_86 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3;
return x_86;
}
}
}
}
}
}
}
else
{
obj* x_89; 
lean::dec(x_8);
lean::dec(x_17);
x_89 = l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3;
return x_89;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_sort_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_sort_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_sort_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_sort_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_sort_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_sort_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_8; obj* x_10; obj* x_13; obj* x_15; obj* x_17; 
x_0 = lean::mk_string("Sort");
x_1 = l_Lean_Parser_maxPrec;
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = lean::mk_string("Type");
x_5 = l_Lean_Parser_symbol_tokens___rarg(x_4, x_1);
lean::dec(x_4);
x_7 = lean::box(0);
x_8 = l_Lean_Parser_List_cons_tokens___rarg(x_5, x_7);
lean::dec(x_5);
x_10 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_8);
lean::dec(x_8);
lean::dec(x_2);
x_13 = l_Lean_Parser_tokens___rarg(x_10);
lean::dec(x_10);
x_15 = l_Lean_Parser_List_cons_tokens___rarg(x_13, x_7);
lean::dec(x_13);
x_17 = l_Lean_Parser_tokens___rarg(x_15);
lean::dec(x_15);
return x_17;
}
}
obj* _init_l_Lean_Parser_Term_sort_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_0 = lean::mk_string("Sort");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_string("Type");
x_8 = l_String_trim(x_7);
lean::dec(x_7);
lean::inc(x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_11, 0, x_8);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_12, 0, x_8);
lean::closure_set(x_12, 1, x_5);
lean::closure_set(x_12, 2, x_11);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_6);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::mk_nat_obj(0ul);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_17, 0, x_15);
lean::closure_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_13);
x_19 = l_Lean_Parser_TermParserM_Monad;
x_20 = l_Lean_Parser_TermParserM_MonadExcept;
x_21 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_22 = l_Lean_Parser_TermParserM_Alternative;
x_23 = l_Lean_Parser_Term_sort;
x_24 = l_Lean_Parser_Term_sort_HasView;
x_25 = l_Lean_Parser_Combinators_node_view___rarg(x_19, x_20, x_21, x_22, x_23, x_18, x_24);
lean::dec(x_18);
return x_25;
}
}
obj* _init_l_Lean_Parser_Term_sort_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_0 = lean::mk_string("Sort");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_string("Type");
x_8 = l_String_trim(x_7);
lean::dec(x_7);
lean::inc(x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_11, 0, x_8);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_12, 0, x_8);
lean::closure_set(x_12, 1, x_5);
lean::closure_set(x_12, 2, x_11);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_6);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::mk_nat_obj(0ul);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_17, 0, x_15);
lean::closure_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_13);
return x_18;
}
}
obj* l_Lean_Parser_Term_sort_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_sort;
x_6 = l_Lean_Parser_Term_sort_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_typeSpec() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("typeSpec");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
if (lean::obj_tag(x_1) == 0)
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_8 = lean::box(3);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_Lean_Parser_Term_typeSpec;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
return x_11;
}
else
{
obj* x_12; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_12 = lean::cnstr_get(x_1, 0);
lean::inc(x_12);
lean::dec(x_1);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_12);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_7);
x_17 = l_Lean_Parser_Term_typeSpec;
x_18 = l_Lean_Parser_Syntax_mkNode(x_17, x_16);
return x_18;
}
}
}
obj* _init_l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__2___closed__1;
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
switch (lean::obj_tag(x_11)) {
case 0:
{
obj* x_13; obj* x_16; obj* x_19; 
x_13 = lean::cnstr_get(x_6, 1);
lean::inc(x_13);
lean::dec(x_6);
x_16 = lean::cnstr_get(x_11, 0);
lean::inc(x_16);
lean::dec(x_11);
if (lean::is_scalar(x_5)) {
 x_19 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_19 = x_5;
}
lean::cnstr_set(x_19, 0, x_16);
if (lean::obj_tag(x_13) == 0)
{
obj* x_20; obj* x_21; 
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_13, 0);
lean::inc(x_22);
lean::dec(x_13);
x_25 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_25, 0, x_19);
lean::cnstr_set(x_25, 1, x_22);
return x_25;
}
}
case 3:
{
obj* x_27; 
lean::dec(x_5);
x_27 = lean::cnstr_get(x_6, 1);
lean::inc(x_27);
lean::dec(x_6);
if (lean::obj_tag(x_27) == 0)
{
obj* x_30; 
x_30 = l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__2___closed__1;
return x_30;
}
else
{
obj* x_31; obj* x_34; obj* x_35; 
x_31 = lean::cnstr_get(x_27, 0);
lean::inc(x_31);
lean::dec(x_27);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_31);
return x_35;
}
}
default:
{
obj* x_38; 
lean::dec(x_11);
lean::dec(x_5);
x_38 = lean::cnstr_get(x_6, 1);
lean::inc(x_38);
lean::dec(x_6);
if (lean::obj_tag(x_38) == 0)
{
obj* x_41; 
x_41 = l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__2___closed__1;
return x_41;
}
else
{
obj* x_42; obj* x_45; obj* x_46; 
x_42 = lean::cnstr_get(x_38, 0);
lean::inc(x_42);
lean::dec(x_38);
x_45 = lean::box(0);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_42);
return x_46;
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_typeSpec_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_typeSpec_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_typeSpec_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_typeSpec_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_11; 
x_0 = lean::mk_string(" : ");
x_1 = lean::mk_nat_obj(0ul);
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_1);
x_5 = lean::box(0);
x_6 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_5);
lean::dec(x_4);
x_8 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_6);
lean::dec(x_6);
lean::dec(x_2);
x_11 = l_Lean_Parser_tokens___rarg(x_8);
lean::dec(x_8);
return x_11;
}
}
obj* _init_l_Lean_Parser_Term_typeSpec_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_0 = lean::mk_string(" : ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_6);
lean::cnstr_set(x_10, 1, x_9);
x_11 = l_Lean_Parser_TermParserM_Monad;
x_12 = l_Lean_Parser_TermParserM_MonadExcept;
x_13 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_14 = l_Lean_Parser_TermParserM_Alternative;
x_15 = l_Lean_Parser_Term_typeSpec;
x_16 = l_Lean_Parser_Term_typeSpec_HasView;
x_17 = l_Lean_Parser_Combinators_node_view___rarg(x_11, x_12, x_13, x_14, x_15, x_10, x_16);
lean::dec(x_10);
return x_17;
}
}
obj* _init_l_Lean_Parser_Term_typeSpec_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_0 = lean::mk_string(" : ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_6);
lean::cnstr_set(x_10, 1, x_9);
return x_10;
}
}
obj* l_Lean_Parser_Term_typeSpec_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_typeSpec;
x_6 = l_Lean_Parser_Term_typeSpec_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_optType_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_Lean_Parser_Term_typeSpec_Parser_Lean_Parser_HasTokens;
x_1 = l_Lean_Parser_tokens___rarg(x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_optType_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; uint8 x_6; obj* x_7; 
x_0 = l_Lean_Parser_TermParserM_Monad;
x_1 = l_Lean_Parser_TermParserM_MonadExcept;
x_2 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_3 = l_Lean_Parser_TermParserM_Alternative;
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_typeSpec_Parser), 5, 0);
x_5 = l_Lean_Parser_Term_typeSpec_Parser_Lean_Parser_HasView;
x_6 = 0;
x_7 = l_Lean_Parser_Combinators_optional_view___rarg(x_0, x_1, x_2, x_3, x_4, x_5, x_6);
lean::dec(x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_optType_Parser___closed__1() {
_start:
{
obj* x_0; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_typeSpec_Parser), 5, 0);
return x_0;
}
}
obj* l_Lean_Parser_Term_optType_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; uint8 x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_optType_Parser___closed__1;
x_6 = 0;
x_7 = l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_optType_viewDefault() {
_start:
{
obj* x_0; 
x_0 = lean::box(0);
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_binderIdent() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binderIdent");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_binderIdent_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_2);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_1);
x_7 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_8 = l_Lean_Parser_Syntax_mkNode(x_7, x_6);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_1);
x_10 = l_Lean_Parser_Term_binderIdent;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
return x_11;
}
else
{
obj* x_12; obj* x_15; obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_12 = lean::cnstr_get(x_0, 0);
lean::inc(x_12);
lean::dec(x_0);
x_15 = l_Lean_Parser_Term_hole_HasView;
x_16 = lean::cnstr_get(x_15, 1);
lean::inc(x_16);
lean::dec(x_15);
x_19 = lean::apply_1(x_16, x_12);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_1);
x_21 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_22 = l_Lean_Parser_Syntax_mkNode(x_21, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_1);
x_24 = l_Lean_Parser_Term_binderIdent;
x_25 = l_Lean_Parser_Syntax_mkNode(x_24, x_23);
return x_25;
}
}
}
obj* _init_l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOTAnIdent");
lean::inc(x_1);
x_3 = l_Lean_Parser_Substring_ofString(x_1);
x_4 = lean::box(0);
x_5 = lean_name_mk_string(x_4, x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_7, 0, x_0);
lean::cnstr_set(x_7, 1, x_3);
lean::cnstr_set(x_7, 2, x_5);
lean::cnstr_set(x_7, 3, x_6);
lean::cnstr_set(x_7, 4, x_6);
x_8 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__1;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__2;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binderIdent");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__4;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
obj* x_58; obj* x_59; obj* x_62; obj* x_63; 
x_58 = l_Lean_Parser_Term_hole_HasView;
x_59 = lean::cnstr_get(x_58, 0);
lean::inc(x_59);
lean::dec(x_58);
x_62 = lean::apply_1(x_59, x_52);
x_63 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_63, 0, x_62);
return x_63;
}
else
{
switch (lean::obj_tag(x_52)) {
case 1:
{
obj* x_64; obj* x_67; 
x_64 = lean::cnstr_get(x_52, 0);
lean::inc(x_64);
lean::dec(x_52);
x_67 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_67, 0, x_64);
return x_67;
}
case 3:
{
obj* x_68; 
x_68 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__2;
return x_68;
}
default:
{
obj* x_70; 
lean::dec(x_52);
x_70 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__2;
return x_70;
}
}
}
}
else
{
obj* x_74; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_74 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3;
return x_74;
}
}
}
}
}
}
}
else
{
obj* x_77; 
lean::dec(x_8);
lean::dec(x_17);
x_77 = l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3;
return x_77;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_binderIdent_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderIdent_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_binderIdent_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_binderIdent_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_binderIdent_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_7; obj* x_9; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_Term_hole_Parser_Lean_Parser_HasTokens;
x_2 = l_Lean_Parser_List_cons_tokens___rarg(x_1, x_0);
x_3 = l_Lean_Parser_List_cons_tokens___rarg(x_0, x_2);
lean::dec(x_2);
x_5 = l_Lean_Parser_tokens___rarg(x_3);
lean::dec(x_3);
x_7 = l_Lean_Parser_List_cons_tokens___rarg(x_5, x_0);
lean::dec(x_5);
x_9 = l_Lean_Parser_tokens___rarg(x_7);
lean::dec(x_7);
return x_9;
}
}
obj* _init_l_Lean_Parser_Term_binderIdent_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_hole_Parser), 5, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_6, 0, x_4);
lean::closure_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
x_8 = l_Lean_Parser_TermParserM_Monad;
x_9 = l_Lean_Parser_TermParserM_MonadExcept;
x_10 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_11 = l_Lean_Parser_TermParserM_Alternative;
x_12 = l_Lean_Parser_Term_binderIdent;
x_13 = l_Lean_Parser_Term_binderIdent_HasView;
x_14 = l_Lean_Parser_Combinators_node_view___rarg(x_8, x_9, x_10, x_11, x_12, x_7, x_13);
lean::dec(x_7);
return x_14;
}
}
obj* _init_l_Lean_Parser_Term_binderIdent_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_hole_Parser), 5, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_6, 0, x_4);
lean::closure_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
return x_7;
}
}
obj* l_Lean_Parser_Term_binderIdent_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_binderIdent;
x_6 = l_Lean_Parser_Term_binderIdent_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_binderDefaultVal() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binderDefaultVal");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
if (lean::obj_tag(x_1) == 0)
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_8 = lean::box(3);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_Lean_Parser_Term_binderDefaultVal;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
return x_11;
}
else
{
obj* x_12; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_12 = lean::cnstr_get(x_1, 0);
lean::inc(x_12);
lean::dec(x_1);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_12);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_7);
x_17 = l_Lean_Parser_Term_binderDefaultVal;
x_18 = l_Lean_Parser_Syntax_mkNode(x_17, x_16);
return x_18;
}
}
}
obj* _init_l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__2___closed__1;
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
switch (lean::obj_tag(x_11)) {
case 0:
{
obj* x_13; obj* x_16; obj* x_19; 
x_13 = lean::cnstr_get(x_6, 1);
lean::inc(x_13);
lean::dec(x_6);
x_16 = lean::cnstr_get(x_11, 0);
lean::inc(x_16);
lean::dec(x_11);
if (lean::is_scalar(x_5)) {
 x_19 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_19 = x_5;
}
lean::cnstr_set(x_19, 0, x_16);
if (lean::obj_tag(x_13) == 0)
{
obj* x_20; obj* x_21; 
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_13, 0);
lean::inc(x_22);
lean::dec(x_13);
x_25 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_25, 0, x_19);
lean::cnstr_set(x_25, 1, x_22);
return x_25;
}
}
case 3:
{
obj* x_27; 
lean::dec(x_5);
x_27 = lean::cnstr_get(x_6, 1);
lean::inc(x_27);
lean::dec(x_6);
if (lean::obj_tag(x_27) == 0)
{
obj* x_30; 
x_30 = l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__2___closed__1;
return x_30;
}
else
{
obj* x_31; obj* x_34; obj* x_35; 
x_31 = lean::cnstr_get(x_27, 0);
lean::inc(x_31);
lean::dec(x_27);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_31);
return x_35;
}
}
default:
{
obj* x_38; 
lean::dec(x_11);
lean::dec(x_5);
x_38 = lean::cnstr_get(x_6, 1);
lean::inc(x_38);
lean::dec(x_6);
if (lean::obj_tag(x_38) == 0)
{
obj* x_41; 
x_41 = l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__2___closed__1;
return x_41;
}
else
{
obj* x_42; obj* x_45; obj* x_46; 
x_42 = lean::cnstr_get(x_38, 0);
lean::inc(x_42);
lean::dec(x_38);
x_45 = lean::box(0);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_42);
return x_46;
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_binderDefaultVal_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_binderDefaultVal_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_binderDefaultVal_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_binderDefaultTac() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binderDefaultTac");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
if (lean::obj_tag(x_1) == 0)
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_8 = lean::box(3);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_Lean_Parser_Term_binderDefaultTac;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
return x_11;
}
else
{
obj* x_12; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_12 = lean::cnstr_get(x_1, 0);
lean::inc(x_12);
lean::dec(x_1);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_12);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_7);
x_17 = l_Lean_Parser_Term_binderDefaultTac;
x_18 = l_Lean_Parser_Syntax_mkNode(x_17, x_16);
return x_18;
}
}
}
obj* _init_l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__2___closed__1;
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
switch (lean::obj_tag(x_11)) {
case 0:
{
obj* x_13; obj* x_16; obj* x_19; 
x_13 = lean::cnstr_get(x_6, 1);
lean::inc(x_13);
lean::dec(x_6);
x_16 = lean::cnstr_get(x_11, 0);
lean::inc(x_16);
lean::dec(x_11);
if (lean::is_scalar(x_5)) {
 x_19 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_19 = x_5;
}
lean::cnstr_set(x_19, 0, x_16);
if (lean::obj_tag(x_13) == 0)
{
obj* x_20; obj* x_21; 
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_13, 0);
lean::inc(x_22);
lean::dec(x_13);
x_25 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_25, 0, x_19);
lean::cnstr_set(x_25, 1, x_22);
return x_25;
}
}
case 3:
{
obj* x_27; 
lean::dec(x_5);
x_27 = lean::cnstr_get(x_6, 1);
lean::inc(x_27);
lean::dec(x_6);
if (lean::obj_tag(x_27) == 0)
{
obj* x_30; 
x_30 = l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__2___closed__1;
return x_30;
}
else
{
obj* x_31; obj* x_34; obj* x_35; 
x_31 = lean::cnstr_get(x_27, 0);
lean::inc(x_31);
lean::dec(x_27);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_31);
return x_35;
}
}
default:
{
obj* x_38; 
lean::dec(x_11);
lean::dec(x_5);
x_38 = lean::cnstr_get(x_6, 1);
lean::inc(x_38);
lean::dec(x_6);
if (lean::obj_tag(x_38) == 0)
{
obj* x_41; 
x_41 = l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__2___closed__1;
return x_41;
}
else
{
obj* x_42; obj* x_45; obj* x_46; 
x_42 = lean::cnstr_get(x_38, 0);
lean::inc(x_42);
lean::dec(x_38);
x_45 = lean::box(0);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_42);
return x_46;
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_binderDefaultTac_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_binderDefaultTac_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_binderDefaultTac_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_binderDefault() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binderDefault");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_binderDefault_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_Lean_Parser_Term_binderDefaultVal_HasView;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_12 = l_Lean_Parser_Syntax_mkNode(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_Lean_Parser_Term_binderDefault;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_Lean_Parser_Term_binderDefaultTac_HasView;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_26 = l_Lean_Parser_Syntax_mkNode(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_Lean_Parser_Term_binderDefault;
x_29 = l_Lean_Parser_Syntax_mkNode(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_binderDefaultVal_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binderDefault");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__2;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
obj* x_58; obj* x_59; obj* x_62; obj* x_63; 
x_58 = l_Lean_Parser_Term_binderDefaultTac_HasView;
x_59 = lean::cnstr_get(x_58, 0);
lean::inc(x_59);
lean::dec(x_58);
x_62 = lean::apply_1(x_59, x_52);
x_63 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_63, 0, x_62);
return x_63;
}
else
{
obj* x_64; obj* x_65; obj* x_68; obj* x_69; 
x_64 = l_Lean_Parser_Term_binderDefaultVal_HasView;
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
lean::dec(x_64);
x_68 = lean::apply_1(x_65, x_52);
x_69 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_69, 0, x_68);
return x_69;
}
}
else
{
obj* x_73; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_73 = l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1;
return x_73;
}
}
}
}
}
}
}
else
{
obj* x_76; 
lean::dec(x_8);
lean::dec(x_17);
x_76 = l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1;
return x_76;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_binderDefault_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderDefault_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_binderDefault_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_binderDefault_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_binderDefault_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_18; obj* x_20; obj* x_22; obj* x_25; obj* x_27; obj* x_29; 
x_0 = lean::mk_string(":=");
x_1 = lean::mk_nat_obj(0ul);
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_1);
x_5 = lean::box(0);
x_6 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_5);
lean::dec(x_4);
x_8 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_6);
lean::dec(x_2);
x_10 = l_Lean_Parser_tokens___rarg(x_8);
lean::dec(x_8);
x_12 = lean::mk_string(".");
x_13 = l_Lean_Parser_symbol_tokens___rarg(x_12, x_1);
lean::dec(x_12);
x_15 = l_Lean_Parser_List_cons_tokens___rarg(x_13, x_6);
lean::dec(x_6);
lean::dec(x_13);
x_18 = l_Lean_Parser_tokens___rarg(x_15);
lean::dec(x_15);
x_20 = l_Lean_Parser_List_cons_tokens___rarg(x_18, x_5);
lean::dec(x_18);
x_22 = l_Lean_Parser_List_cons_tokens___rarg(x_10, x_20);
lean::dec(x_20);
lean::dec(x_10);
x_25 = l_Lean_Parser_tokens___rarg(x_22);
lean::dec(x_22);
x_27 = l_Lean_Parser_List_cons_tokens___rarg(x_25, x_5);
lean::dec(x_25);
x_29 = l_Lean_Parser_tokens___rarg(x_27);
lean::dec(x_27);
return x_29;
}
}
obj* _init_l_Lean_Parser_Term_binderDefault_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_0 = lean::mk_string(":=");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
lean::inc(x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_6);
lean::cnstr_set(x_11, 1, x_9);
x_12 = l_Lean_Parser_Term_binderDefaultVal;
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_13, 0, x_12);
lean::closure_set(x_13, 1, x_11);
x_14 = lean::mk_string(".");
x_15 = l_String_trim(x_14);
lean::dec(x_14);
lean::inc(x_15);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_18, 0, x_15);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_19, 0, x_15);
lean::closure_set(x_19, 1, x_5);
lean::closure_set(x_19, 2, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_9);
x_21 = l_Lean_Parser_Term_binderDefaultTac;
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_22, 0, x_21);
lean::closure_set(x_22, 1, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_8);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_13);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_25, 0, x_24);
lean::closure_set(x_25, 1, x_5);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_8);
x_27 = l_Lean_Parser_TermParserM_Monad;
x_28 = l_Lean_Parser_TermParserM_MonadExcept;
x_29 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_30 = l_Lean_Parser_TermParserM_Alternative;
x_31 = l_Lean_Parser_Term_binderDefault;
x_32 = l_Lean_Parser_Term_binderDefault_HasView;
x_33 = l_Lean_Parser_Combinators_node_view___rarg(x_27, x_28, x_29, x_30, x_31, x_26, x_32);
lean::dec(x_26);
return x_33;
}
}
obj* _init_l_Lean_Parser_Term_binderDefault_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_0 = lean::mk_string(":=");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
lean::inc(x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_6);
lean::cnstr_set(x_11, 1, x_9);
x_12 = l_Lean_Parser_Term_binderDefaultVal;
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_13, 0, x_12);
lean::closure_set(x_13, 1, x_11);
x_14 = lean::mk_string(".");
x_15 = l_String_trim(x_14);
lean::dec(x_14);
lean::inc(x_15);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_18, 0, x_15);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_19, 0, x_15);
lean::closure_set(x_19, 1, x_5);
lean::closure_set(x_19, 2, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_9);
x_21 = l_Lean_Parser_Term_binderDefaultTac;
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_22, 0, x_21);
lean::closure_set(x_22, 1, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_8);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_13);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_25, 0, x_24);
lean::closure_set(x_25, 1, x_5);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_8);
return x_26;
}
}
obj* l_Lean_Parser_Term_binderDefault_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_binderDefault;
x_6 = l_Lean_Parser_Term_binderDefault_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_binderContent___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binderContent");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_binderContent(uint8 x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Term_binderContent___closed__1;
return x_1;
}
}
obj* l_Lean_Parser_Term_binderContent___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_binderContent(x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_Lean_Parser_Term_binderIdent_HasView;
x_1 = lean::cnstr_get(x_0, 1);
lean::inc(x_1);
lean::dec(x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_noKind;
x_2 = l_Lean_Parser_Syntax_mkNode(x_1, x_0);
lean::inc(x_2);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_2);
lean::cnstr_set(x_5, 1, x_4);
return x_5;
}
}
obj* _init_l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__3() {
_start:
{
uint8 x_0; obj* x_1; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_binderContent(x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__1;
x_9 = l_List_map___main___rarg(x_8, x_1);
x_10 = l_Lean_Parser_noKind;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
x_12 = lean::box(0);
if (lean::obj_tag(x_3) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_13 = l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__2;
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_11);
lean::cnstr_set(x_14, 1, x_13);
x_15 = l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__3;
x_16 = l_Lean_Parser_Syntax_mkNode(x_15, x_14);
return x_16;
}
else
{
obj* x_17; obj* x_20; obj* x_21; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
x_17 = lean::cnstr_get(x_5, 0);
lean::inc(x_17);
lean::dec(x_5);
x_20 = l_Lean_Parser_Term_binderDefault_HasView;
x_21 = lean::cnstr_get(x_20, 1);
lean::inc(x_21);
lean::dec(x_20);
x_24 = lean::apply_1(x_21, x_17);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_12);
x_26 = l_Lean_Parser_Syntax_mkNode(x_10, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_12);
x_28 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_27);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_11);
lean::cnstr_set(x_30, 1, x_29);
x_31 = l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__3;
x_32 = l_Lean_Parser_Syntax_mkNode(x_31, x_30);
return x_32;
}
}
else
{
obj* x_33; obj* x_36; obj* x_37; obj* x_40; obj* x_41; obj* x_42; 
x_33 = lean::cnstr_get(x_3, 0);
lean::inc(x_33);
lean::dec(x_3);
x_36 = l_Lean_Parser_Term_typeSpec_HasView;
x_37 = lean::cnstr_get(x_36, 1);
lean::inc(x_37);
lean::dec(x_36);
x_40 = lean::apply_1(x_37, x_33);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_12);
x_42 = l_Lean_Parser_Syntax_mkNode(x_10, x_41);
if (lean::obj_tag(x_5) == 0)
{
obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; 
x_43 = l_Lean_Parser_detailIdent_HasView_x_27___elambda__1___closed__1;
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_42);
lean::cnstr_set(x_44, 1, x_43);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_11);
lean::cnstr_set(x_45, 1, x_44);
x_46 = l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__3;
x_47 = l_Lean_Parser_Syntax_mkNode(x_46, x_45);
return x_47;
}
else
{
obj* x_48; obj* x_51; obj* x_52; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; 
x_48 = lean::cnstr_get(x_5, 0);
lean::inc(x_48);
lean::dec(x_5);
x_51 = l_Lean_Parser_Term_binderDefault_HasView;
x_52 = lean::cnstr_get(x_51, 1);
lean::inc(x_52);
lean::dec(x_51);
x_55 = lean::apply_1(x_52, x_48);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_55);
lean::cnstr_set(x_56, 1, x_12);
x_57 = l_Lean_Parser_Syntax_mkNode(x_10, x_56);
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_57);
lean::cnstr_set(x_58, 1, x_12);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_42);
lean::cnstr_set(x_59, 1, x_58);
x_60 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_60, 0, x_11);
lean::cnstr_set(x_60, 1, x_59);
x_61 = l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__3;
x_62 = l_Lean_Parser_Syntax_mkNode(x_61, x_60);
return x_62;
}
}
}
}
obj* _init_l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_binderDefault_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_typeSpec_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = l_Lean_Parser_Term_binderIdent_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_Lean_Parser_Term_binderIdent_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__5() {
_start:
{
obj* x_0; obj* x_2; obj* x_3; 
x_2 = lean::box(3);
x_3 = l_Lean_Parser_Syntax_asNode___main(x_2);
if (lean::obj_tag(x_3) == 0)
{
obj* x_4; 
x_4 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__3;
x_0 = x_4;
goto lbl_1;
}
else
{
obj* x_5; obj* x_8; obj* x_11; obj* x_12; 
x_5 = lean::cnstr_get(x_3, 0);
lean::inc(x_5);
lean::dec(x_3);
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
x_11 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__4;
x_12 = l_List_map___main___rarg(x_11, x_8);
x_0 = x_12;
goto lbl_1;
}
lbl_1:
{
obj* x_13; obj* x_15; obj* x_16; 
x_15 = lean::box(3);
x_16 = l_Lean_Parser_Syntax_asNode___main(x_15);
if (lean::obj_tag(x_16) == 0)
{
obj* x_17; 
x_17 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_13 = x_17;
goto lbl_14;
}
else
{
obj* x_18; obj* x_20; obj* x_21; 
x_18 = lean::cnstr_get(x_16, 0);
if (lean::is_exclusive(x_16)) {
 lean::cnstr_set(x_16, 0, lean::box(0));
 x_20 = x_16;
} else {
 lean::inc(x_18);
 lean::dec(x_16);
 x_20 = lean::box(0);
}
x_21 = lean::cnstr_get(x_18, 1);
lean::inc(x_21);
lean::dec(x_18);
if (lean::obj_tag(x_21) == 0)
{
obj* x_25; 
lean::dec(x_20);
x_25 = lean::box(0);
x_13 = x_25;
goto lbl_14;
}
else
{
obj* x_26; 
x_26 = lean::cnstr_get(x_21, 1);
lean::inc(x_26);
if (lean::obj_tag(x_26) == 0)
{
obj* x_28; obj* x_31; obj* x_32; obj* x_35; obj* x_36; 
x_28 = lean::cnstr_get(x_21, 0);
lean::inc(x_28);
lean::dec(x_21);
x_31 = l_Lean_Parser_Term_typeSpec_HasView;
x_32 = lean::cnstr_get(x_31, 0);
lean::inc(x_32);
lean::dec(x_31);
x_35 = lean::apply_1(x_32, x_28);
if (lean::is_scalar(x_20)) {
 x_36 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_36 = x_20;
}
lean::cnstr_set(x_36, 0, x_35);
x_13 = x_36;
goto lbl_14;
}
else
{
obj* x_40; 
lean::dec(x_26);
lean::dec(x_20);
lean::dec(x_21);
x_40 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_13 = x_40;
goto lbl_14;
}
}
}
lbl_14:
{
obj* x_41; obj* x_42; 
x_41 = lean::box(3);
x_42 = l_Lean_Parser_Syntax_asNode___main(x_41);
if (lean::obj_tag(x_42) == 0)
{
obj* x_43; obj* x_44; 
x_43 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__1;
x_44 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_44, 0, x_0);
lean::cnstr_set(x_44, 1, x_13);
lean::cnstr_set(x_44, 2, x_43);
return x_44;
}
else
{
obj* x_45; obj* x_47; obj* x_48; 
x_45 = lean::cnstr_get(x_42, 0);
if (lean::is_exclusive(x_42)) {
 lean::cnstr_set(x_42, 0, lean::box(0));
 x_47 = x_42;
} else {
 lean::inc(x_45);
 lean::dec(x_42);
 x_47 = lean::box(0);
}
x_48 = lean::cnstr_get(x_45, 1);
lean::inc(x_48);
lean::dec(x_45);
if (lean::obj_tag(x_48) == 0)
{
obj* x_52; obj* x_53; 
lean::dec(x_47);
x_52 = lean::box(0);
x_53 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_53, 0, x_0);
lean::cnstr_set(x_53, 1, x_13);
lean::cnstr_set(x_53, 2, x_52);
return x_53;
}
else
{
obj* x_54; 
x_54 = lean::cnstr_get(x_48, 1);
lean::inc(x_54);
if (lean::obj_tag(x_54) == 0)
{
obj* x_56; obj* x_59; obj* x_60; obj* x_63; obj* x_64; obj* x_65; 
x_56 = lean::cnstr_get(x_48, 0);
lean::inc(x_56);
lean::dec(x_48);
x_59 = l_Lean_Parser_Term_binderDefault_HasView;
x_60 = lean::cnstr_get(x_59, 0);
lean::inc(x_60);
lean::dec(x_59);
x_63 = lean::apply_1(x_60, x_56);
if (lean::is_scalar(x_47)) {
 x_64 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_64 = x_47;
}
lean::cnstr_set(x_64, 0, x_63);
x_65 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_65, 0, x_0);
lean::cnstr_set(x_65, 1, x_13);
lean::cnstr_set(x_65, 2, x_64);
return x_65;
}
else
{
obj* x_69; obj* x_70; 
lean::dec(x_47);
lean::dec(x_48);
lean::dec(x_54);
x_69 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__1;
x_70 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_70, 0, x_0);
lean::cnstr_set(x_70, 1, x_13);
lean::cnstr_set(x_70, 2, x_69);
return x_70;
}
}
}
}
}
}
}
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__5;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; obj* x_20; 
x_20 = l_Lean_Parser_Syntax_asNode___main(x_2);
if (lean::obj_tag(x_20) == 0)
{
obj* x_21; 
x_21 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__3;
x_18 = x_21;
goto lbl_19;
}
else
{
obj* x_22; obj* x_25; obj* x_28; obj* x_29; 
x_22 = lean::cnstr_get(x_20, 0);
lean::inc(x_22);
lean::dec(x_20);
x_25 = lean::cnstr_get(x_22, 1);
lean::inc(x_25);
lean::dec(x_22);
x_28 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__4;
x_29 = l_List_map___main___rarg(x_28, x_25);
x_18 = x_29;
goto lbl_19;
}
lbl_19:
{
obj* x_30; obj* x_32; obj* x_33; obj* x_35; obj* x_36; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_38; 
x_38 = lean::box(3);
x_35 = x_1;
x_36 = x_38;
goto lbl_37;
}
else
{
obj* x_39; obj* x_41; 
x_39 = lean::cnstr_get(x_1, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_1, 1);
lean::inc(x_41);
lean::dec(x_1);
x_35 = x_41;
x_36 = x_39;
goto lbl_37;
}
lbl_31:
{
obj* x_44; obj* x_45; 
x_44 = lean::box(3);
x_45 = l_Lean_Parser_Syntax_asNode___main(x_44);
if (lean::obj_tag(x_45) == 0)
{
obj* x_46; obj* x_47; 
x_46 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__1;
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_18);
lean::cnstr_set(x_47, 1, x_30);
lean::cnstr_set(x_47, 2, x_46);
return x_47;
}
else
{
obj* x_48; obj* x_50; obj* x_51; 
x_48 = lean::cnstr_get(x_45, 0);
if (lean::is_exclusive(x_45)) {
 lean::cnstr_set(x_45, 0, lean::box(0));
 x_50 = x_45;
} else {
 lean::inc(x_48);
 lean::dec(x_45);
 x_50 = lean::box(0);
}
x_51 = lean::cnstr_get(x_48, 1);
lean::inc(x_51);
lean::dec(x_48);
if (lean::obj_tag(x_51) == 0)
{
obj* x_55; obj* x_56; 
lean::dec(x_50);
x_55 = lean::box(0);
x_56 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_56, 0, x_18);
lean::cnstr_set(x_56, 1, x_30);
lean::cnstr_set(x_56, 2, x_55);
return x_56;
}
else
{
obj* x_57; 
x_57 = lean::cnstr_get(x_51, 1);
lean::inc(x_57);
if (lean::obj_tag(x_57) == 0)
{
obj* x_59; obj* x_62; obj* x_63; obj* x_66; obj* x_67; obj* x_68; 
x_59 = lean::cnstr_get(x_51, 0);
lean::inc(x_59);
lean::dec(x_51);
x_62 = l_Lean_Parser_Term_binderDefault_HasView;
x_63 = lean::cnstr_get(x_62, 0);
lean::inc(x_63);
lean::dec(x_62);
x_66 = lean::apply_1(x_63, x_59);
if (lean::is_scalar(x_50)) {
 x_67 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_67 = x_50;
}
lean::cnstr_set(x_67, 0, x_66);
x_68 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_68, 0, x_18);
lean::cnstr_set(x_68, 1, x_30);
lean::cnstr_set(x_68, 2, x_67);
return x_68;
}
else
{
obj* x_72; obj* x_73; 
lean::dec(x_57);
lean::dec(x_51);
lean::dec(x_50);
x_72 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__1;
x_73 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_73, 0, x_18);
lean::cnstr_set(x_73, 1, x_30);
lean::cnstr_set(x_73, 2, x_72);
return x_73;
}
}
}
}
lbl_34:
{
obj* x_74; 
x_74 = l_Lean_Parser_Syntax_asNode___main(x_33);
if (lean::obj_tag(x_74) == 0)
{
obj* x_75; obj* x_76; 
x_75 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__1;
x_76 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_76, 0, x_18);
lean::cnstr_set(x_76, 1, x_32);
lean::cnstr_set(x_76, 2, x_75);
return x_76;
}
else
{
obj* x_77; obj* x_79; obj* x_80; 
x_77 = lean::cnstr_get(x_74, 0);
if (lean::is_exclusive(x_74)) {
 lean::cnstr_set(x_74, 0, lean::box(0));
 x_79 = x_74;
} else {
 lean::inc(x_77);
 lean::dec(x_74);
 x_79 = lean::box(0);
}
x_80 = lean::cnstr_get(x_77, 1);
lean::inc(x_80);
lean::dec(x_77);
if (lean::obj_tag(x_80) == 0)
{
obj* x_84; obj* x_85; 
lean::dec(x_79);
x_84 = lean::box(0);
x_85 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_85, 0, x_18);
lean::cnstr_set(x_85, 1, x_32);
lean::cnstr_set(x_85, 2, x_84);
return x_85;
}
else
{
obj* x_86; 
x_86 = lean::cnstr_get(x_80, 1);
lean::inc(x_86);
if (lean::obj_tag(x_86) == 0)
{
obj* x_88; obj* x_91; obj* x_92; obj* x_95; obj* x_96; obj* x_97; 
x_88 = lean::cnstr_get(x_80, 0);
lean::inc(x_88);
lean::dec(x_80);
x_91 = l_Lean_Parser_Term_binderDefault_HasView;
x_92 = lean::cnstr_get(x_91, 0);
lean::inc(x_92);
lean::dec(x_91);
x_95 = lean::apply_1(x_92, x_88);
if (lean::is_scalar(x_79)) {
 x_96 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_96 = x_79;
}
lean::cnstr_set(x_96, 0, x_95);
x_97 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_97, 0, x_18);
lean::cnstr_set(x_97, 1, x_32);
lean::cnstr_set(x_97, 2, x_96);
return x_97;
}
else
{
obj* x_101; obj* x_102; 
lean::dec(x_79);
lean::dec(x_80);
lean::dec(x_86);
x_101 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__1;
x_102 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_102, 0, x_18);
lean::cnstr_set(x_102, 1, x_32);
lean::cnstr_set(x_102, 2, x_101);
return x_102;
}
}
}
}
lbl_37:
{
obj* x_103; 
x_103 = l_Lean_Parser_Syntax_asNode___main(x_36);
if (lean::obj_tag(x_103) == 0)
{
if (lean::obj_tag(x_35) == 0)
{
obj* x_104; 
x_104 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_30 = x_104;
goto lbl_31;
}
else
{
obj* x_105; obj* x_108; 
x_105 = lean::cnstr_get(x_35, 0);
lean::inc(x_105);
lean::dec(x_35);
x_108 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_32 = x_108;
x_33 = x_105;
goto lbl_34;
}
}
else
{
obj* x_109; obj* x_111; obj* x_112; 
x_109 = lean::cnstr_get(x_103, 0);
if (lean::is_exclusive(x_103)) {
 lean::cnstr_set(x_103, 0, lean::box(0));
 x_111 = x_103;
} else {
 lean::inc(x_109);
 lean::dec(x_103);
 x_111 = lean::box(0);
}
x_112 = lean::cnstr_get(x_109, 1);
lean::inc(x_112);
lean::dec(x_109);
if (lean::obj_tag(x_112) == 0)
{
obj* x_116; 
lean::dec(x_111);
x_116 = lean::box(0);
if (lean::obj_tag(x_35) == 0)
{
x_30 = x_116;
goto lbl_31;
}
else
{
obj* x_117; 
x_117 = lean::cnstr_get(x_35, 0);
lean::inc(x_117);
lean::dec(x_35);
x_32 = x_116;
x_33 = x_117;
goto lbl_34;
}
}
else
{
obj* x_120; 
x_120 = lean::cnstr_get(x_112, 1);
lean::inc(x_120);
if (lean::obj_tag(x_120) == 0)
{
obj* x_122; obj* x_125; obj* x_126; obj* x_129; obj* x_130; 
x_122 = lean::cnstr_get(x_112, 0);
lean::inc(x_122);
lean::dec(x_112);
x_125 = l_Lean_Parser_Term_typeSpec_HasView;
x_126 = lean::cnstr_get(x_125, 0);
lean::inc(x_126);
lean::dec(x_125);
x_129 = lean::apply_1(x_126, x_122);
if (lean::is_scalar(x_111)) {
 x_130 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_130 = x_111;
}
lean::cnstr_set(x_130, 0, x_129);
if (lean::obj_tag(x_35) == 0)
{
x_30 = x_130;
goto lbl_31;
}
else
{
obj* x_131; 
x_131 = lean::cnstr_get(x_35, 0);
lean::inc(x_131);
lean::dec(x_35);
x_32 = x_130;
x_33 = x_131;
goto lbl_34;
}
}
else
{
lean::dec(x_112);
lean::dec(x_111);
lean::dec(x_120);
if (lean::obj_tag(x_35) == 0)
{
obj* x_137; 
x_137 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_30 = x_137;
goto lbl_31;
}
else
{
obj* x_138; obj* x_141; 
x_138 = lean::cnstr_get(x_35, 0);
lean::inc(x_138);
lean::dec(x_35);
x_141 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_32 = x_141;
x_33 = x_138;
goto lbl_34;
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_binderContent_HasView_x_27___closed__1() {
_start:
{
obj* x_0; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1), 1, 0);
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_binderContent_HasView_x_27___closed__2() {
_start:
{
obj* x_0; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1), 1, 0);
return x_0;
}
}
obj* l_Lean_Parser_Term_binderContent_HasView_x_27(uint8 x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = l_Lean_Parser_Term_binderContent_HasView_x_27___closed__1;
x_2 = l_Lean_Parser_Term_binderContent_HasView_x_27___closed__2;
x_3 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_3, 0, x_1);
lean::cnstr_set(x_3, 1, x_2);
return x_3;
}
}
obj* l_Lean_Parser_Term_binderContent_HasView_x_27___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_binderContent_HasView_x_27(x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_binderContent_HasView(uint8 x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Term_binderContent_HasView_x_27(x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_binderContent_HasView___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_binderContent_HasView(x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasTokens___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_12; obj* x_15; 
x_0 = l_Lean_Parser_Term_binderIdent_Parser_Lean_Parser_HasTokens;
x_1 = l_Lean_Parser_tokens___rarg(x_0);
x_2 = l_Lean_Parser_Term_typeSpec_Parser_Lean_Parser_HasTokens;
x_3 = l_Lean_Parser_tokens___rarg(x_2);
x_4 = l_Lean_Parser_Term_binderDefault_Parser_Lean_Parser_HasTokens;
x_5 = l_Lean_Parser_tokens___rarg(x_4);
x_6 = lean::box(0);
x_7 = l_Lean_Parser_List_cons_tokens___rarg(x_5, x_6);
lean::dec(x_5);
x_9 = l_Lean_Parser_List_cons_tokens___rarg(x_3, x_7);
lean::dec(x_7);
lean::dec(x_3);
x_12 = l_Lean_Parser_List_cons_tokens___rarg(x_1, x_9);
lean::dec(x_9);
lean::dec(x_1);
x_15 = l_Lean_Parser_tokens___rarg(x_12);
lean::dec(x_12);
return x_15;
}
}
obj* l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasTokens(uint8 x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasTokens___closed__1;
return x_1;
}
}
obj* l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasTokens___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasTokens(x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__1() {
_start:
{
obj* x_0; uint8 x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderDefault_Parser), 5, 0);
x_1 = 0;
x_2 = lean::box(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_2);
x_4 = lean::box(0);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_3);
lean::cnstr_set(x_5, 1, x_4);
return x_5;
}
}
obj* _init_l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderIdent_Parser), 5, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_many1___at_Lean_Parser_command_NotationSpec_Parser_Lean_Parser_HasTokens___spec__2), 6, 1);
lean::closure_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__3() {
_start:
{
uint8 x_0; obj* x_1; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_binderContent_HasView_x_27(x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView(uint8 x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_1 = l_Lean_Parser_Term_optType_Parser___closed__1;
x_2 = lean::box(x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_3, 0, x_1);
lean::closure_set(x_3, 1, x_2);
x_4 = l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__1;
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_3);
lean::cnstr_set(x_5, 1, x_4);
x_6 = l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__2;
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = l_Lean_Parser_TermParserM_Monad;
x_9 = l_Lean_Parser_TermParserM_MonadExcept;
x_10 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_11 = l_Lean_Parser_TermParserM_Alternative;
x_12 = l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__3;
x_13 = l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__3;
x_14 = l_Lean_Parser_Combinators_node_view___rarg(x_8, x_9, x_10, x_11, x_12, x_7, x_13);
lean::dec(x_7);
return x_14;
}
}
obj* l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView(x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_binderContent_Parser(uint8 x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_6 = l_Lean_Parser_Term_optType_Parser___closed__1;
x_7 = lean::box(x_0);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_8, 0, x_6);
lean::closure_set(x_8, 1, x_7);
x_9 = l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__1;
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_9);
x_11 = l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__2;
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_10);
x_13 = l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__3;
x_14 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_13, x_12, x_1, x_2, x_3, x_4, x_5);
return x_14;
}
}
obj* l_Lean_Parser_Term_binderContent_Parser___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
uint8 x_6; obj* x_7; 
x_6 = lean::unbox(x_0);
x_7 = l_Lean_Parser_Term_binderContent_Parser(x_6, x_1, x_2, x_3, x_4, x_5);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_simpleExplicitBinder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("simpleExplicitBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_13; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_12, 0, x_3);
x_13 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
x_14 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_7);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::box(3);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_15);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_12);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_16);
lean::cnstr_set(x_19, 1, x_18);
x_20 = l_Lean_Parser_Term_simpleExplicitBinder;
x_21 = l_Lean_Parser_Syntax_mkNode(x_20, x_19);
return x_21;
}
else
{
obj* x_22; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_22 = lean::cnstr_get(x_9, 0);
lean::inc(x_22);
lean::dec(x_9);
x_25 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_13);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_7);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::box(3);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_27);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_12);
lean::cnstr_set(x_30, 1, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_30);
x_32 = l_Lean_Parser_Term_simpleExplicitBinder;
x_33 = l_Lean_Parser_Syntax_mkNode(x_32, x_31);
return x_33;
}
}
else
{
obj* x_34; obj* x_37; 
x_34 = lean::cnstr_get(x_5, 0);
lean::inc(x_34);
lean::dec(x_5);
x_37 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_37, 0, x_34);
if (lean::obj_tag(x_9) == 0)
{
obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; 
x_38 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_7);
lean::cnstr_set(x_39, 1, x_38);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_37);
lean::cnstr_set(x_40, 1, x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_12);
lean::cnstr_set(x_41, 1, x_40);
x_42 = lean::box(3);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_41);
x_44 = l_Lean_Parser_Term_simpleExplicitBinder;
x_45 = l_Lean_Parser_Syntax_mkNode(x_44, x_43);
return x_45;
}
else
{
obj* x_46; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; 
x_46 = lean::cnstr_get(x_9, 0);
lean::inc(x_46);
lean::dec(x_9);
x_49 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_49, 0, x_46);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_13);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_7);
lean::cnstr_set(x_51, 1, x_50);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_37);
lean::cnstr_set(x_52, 1, x_51);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_12);
lean::cnstr_set(x_53, 1, x_52);
x_54 = lean::box(3);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_53);
x_56 = l_Lean_Parser_Term_simpleExplicitBinder;
x_57 = l_Lean_Parser_Syntax_mkNode(x_56, x_55);
return x_57;
}
}
}
else
{
obj* x_58; obj* x_61; 
x_58 = lean::cnstr_get(x_1, 0);
lean::inc(x_58);
lean::dec(x_1);
x_61 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_61, 0, x_58);
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; 
x_62 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_7);
lean::cnstr_set(x_63, 1, x_62);
x_64 = lean::box(3);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_63);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_12);
lean::cnstr_set(x_66, 1, x_65);
x_67 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_67, 0, x_61);
lean::cnstr_set(x_67, 1, x_66);
x_68 = l_Lean_Parser_Term_simpleExplicitBinder;
x_69 = l_Lean_Parser_Syntax_mkNode(x_68, x_67);
return x_69;
}
else
{
obj* x_70; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; 
x_70 = lean::cnstr_get(x_9, 0);
lean::inc(x_70);
lean::dec(x_9);
x_73 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_73, 0, x_70);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_13);
x_75 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_75, 0, x_7);
lean::cnstr_set(x_75, 1, x_74);
x_76 = lean::box(3);
x_77 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_77, 0, x_76);
lean::cnstr_set(x_77, 1, x_75);
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_12);
lean::cnstr_set(x_78, 1, x_77);
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_61);
lean::cnstr_set(x_79, 1, x_78);
x_80 = l_Lean_Parser_Term_simpleExplicitBinder;
x_81 = l_Lean_Parser_Syntax_mkNode(x_80, x_79);
return x_81;
}
}
else
{
obj* x_82; obj* x_85; 
x_82 = lean::cnstr_get(x_5, 0);
lean::inc(x_82);
lean::dec(x_5);
x_85 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_85, 0, x_82);
if (lean::obj_tag(x_9) == 0)
{
obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; 
x_86 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_87 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_87, 0, x_7);
lean::cnstr_set(x_87, 1, x_86);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_85);
lean::cnstr_set(x_88, 1, x_87);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_12);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_61);
lean::cnstr_set(x_90, 1, x_89);
x_91 = l_Lean_Parser_Term_simpleExplicitBinder;
x_92 = l_Lean_Parser_Syntax_mkNode(x_91, x_90);
return x_92;
}
else
{
obj* x_93; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; 
x_93 = lean::cnstr_get(x_9, 0);
lean::inc(x_93);
lean::dec(x_9);
x_96 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_96, 0, x_93);
x_97 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_97, 0, x_96);
lean::cnstr_set(x_97, 1, x_13);
x_98 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_98, 0, x_7);
lean::cnstr_set(x_98, 1, x_97);
x_99 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_99, 0, x_85);
lean::cnstr_set(x_99, 1, x_98);
x_100 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_100, 0, x_12);
lean::cnstr_set(x_100, 1, x_99);
x_101 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_101, 0, x_61);
lean::cnstr_set(x_101, 1, x_100);
x_102 = l_Lean_Parser_Term_simpleExplicitBinder;
x_103 = l_Lean_Parser_Syntax_mkNode(x_102, x_101);
return x_103;
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_2 = lean::box(3);
x_3 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_3, 0, x_0);
lean::cnstr_set(x_3, 1, x_1);
lean::cnstr_set(x_3, 2, x_0);
lean::cnstr_set(x_3, 3, x_2);
lean::cnstr_set(x_3, 4, x_0);
return x_3;
}
}
obj* l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; 
switch (lean::obj_tag(x_28)) {
case 1:
{
obj* x_38; 
x_38 = lean::cnstr_get(x_28, 0);
lean::inc(x_38);
lean::dec(x_28);
x_36 = x_38;
goto lbl_37;
}
case 3:
{
obj* x_41; 
x_41 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_36 = x_41;
goto lbl_37;
}
default:
{
obj* x_43; 
lean::dec(x_28);
x_43 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_36 = x_43;
goto lbl_37;
}
}
lbl_37:
{
obj* x_44; obj* x_45; obj* x_46; obj* x_48; obj* x_49; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_51; 
x_51 = lean::box(3);
x_48 = x_27;
x_49 = x_51;
goto lbl_50;
}
else
{
obj* x_52; obj* x_54; 
x_52 = lean::cnstr_get(x_27, 0);
lean::inc(x_52);
x_54 = lean::cnstr_get(x_27, 1);
lean::inc(x_54);
lean::dec(x_27);
x_48 = x_54;
x_49 = x_52;
goto lbl_50;
}
lbl_47:
{
if (lean::obj_tag(x_46) == 0)
{
obj* x_57; obj* x_58; 
x_57 = lean::box(0);
x_58 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_58, 0, x_18);
lean::cnstr_set(x_58, 1, x_36);
lean::cnstr_set(x_58, 2, x_44);
lean::cnstr_set(x_58, 3, x_45);
lean::cnstr_set(x_58, 4, x_57);
return x_58;
}
else
{
obj* x_59; 
x_59 = lean::cnstr_get(x_46, 0);
lean::inc(x_59);
lean::dec(x_46);
switch (lean::obj_tag(x_59)) {
case 0:
{
obj* x_62; obj* x_65; obj* x_66; 
x_62 = lean::cnstr_get(x_59, 0);
lean::inc(x_62);
lean::dec(x_59);
x_65 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_65, 0, x_62);
x_66 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_66, 0, x_18);
lean::cnstr_set(x_66, 1, x_36);
lean::cnstr_set(x_66, 2, x_44);
lean::cnstr_set(x_66, 3, x_45);
lean::cnstr_set(x_66, 4, x_65);
return x_66;
}
case 3:
{
obj* x_67; obj* x_68; 
x_67 = lean::box(0);
x_68 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_68, 0, x_18);
lean::cnstr_set(x_68, 1, x_36);
lean::cnstr_set(x_68, 2, x_44);
lean::cnstr_set(x_68, 3, x_45);
lean::cnstr_set(x_68, 4, x_67);
return x_68;
}
default:
{
obj* x_70; obj* x_71; 
lean::dec(x_59);
x_70 = lean::box(0);
x_71 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_71, 0, x_18);
lean::cnstr_set(x_71, 1, x_36);
lean::cnstr_set(x_71, 2, x_44);
lean::cnstr_set(x_71, 3, x_45);
lean::cnstr_set(x_71, 4, x_70);
return x_71;
}
}
}
}
lbl_50:
{
switch (lean::obj_tag(x_49)) {
case 0:
{
obj* x_72; obj* x_75; 
x_72 = lean::cnstr_get(x_49, 0);
lean::inc(x_72);
lean::dec(x_49);
x_75 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_75, 0, x_72);
if (lean::obj_tag(x_48) == 0)
{
obj* x_76; obj* x_77; obj* x_78; 
x_76 = lean::box(0);
x_77 = lean::box(3);
x_78 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_78, 0, x_18);
lean::cnstr_set(x_78, 1, x_36);
lean::cnstr_set(x_78, 2, x_75);
lean::cnstr_set(x_78, 3, x_77);
lean::cnstr_set(x_78, 4, x_76);
return x_78;
}
else
{
obj* x_79; obj* x_81; 
x_79 = lean::cnstr_get(x_48, 0);
lean::inc(x_79);
x_81 = lean::cnstr_get(x_48, 1);
lean::inc(x_81);
lean::dec(x_48);
x_44 = x_75;
x_45 = x_79;
x_46 = x_81;
goto lbl_47;
}
}
case 3:
{
obj* x_84; 
x_84 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
obj* x_85; obj* x_86; 
x_85 = lean::box(3);
x_86 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_86, 0, x_18);
lean::cnstr_set(x_86, 1, x_36);
lean::cnstr_set(x_86, 2, x_84);
lean::cnstr_set(x_86, 3, x_85);
lean::cnstr_set(x_86, 4, x_84);
return x_86;
}
else
{
obj* x_87; obj* x_89; 
x_87 = lean::cnstr_get(x_48, 0);
lean::inc(x_87);
x_89 = lean::cnstr_get(x_48, 1);
lean::inc(x_89);
lean::dec(x_48);
x_44 = x_84;
x_45 = x_87;
x_46 = x_89;
goto lbl_47;
}
}
default:
{
obj* x_93; 
lean::dec(x_49);
x_93 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
obj* x_94; obj* x_95; 
x_94 = lean::box(3);
x_95 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_95, 0, x_18);
lean::cnstr_set(x_95, 1, x_36);
lean::cnstr_set(x_95, 2, x_93);
lean::cnstr_set(x_95, 3, x_94);
lean::cnstr_set(x_95, 4, x_93);
return x_95;
}
else
{
obj* x_96; obj* x_98; 
x_96 = lean::cnstr_get(x_48, 0);
lean::inc(x_96);
x_98 = lean::cnstr_get(x_48, 1);
lean::inc(x_98);
lean::dec(x_48);
x_44 = x_93;
x_45 = x_96;
x_46 = x_98;
goto lbl_47;
}
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_simpleExplicitBinder_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_simpleImplicitBinder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("simpleImplicitBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_13; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_12, 0, x_3);
x_13 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
x_14 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_7);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::box(3);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_15);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_12);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_16);
lean::cnstr_set(x_19, 1, x_18);
x_20 = l_Lean_Parser_Term_simpleImplicitBinder;
x_21 = l_Lean_Parser_Syntax_mkNode(x_20, x_19);
return x_21;
}
else
{
obj* x_22; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_22 = lean::cnstr_get(x_9, 0);
lean::inc(x_22);
lean::dec(x_9);
x_25 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_13);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_7);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::box(3);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_27);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_12);
lean::cnstr_set(x_30, 1, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_30);
x_32 = l_Lean_Parser_Term_simpleImplicitBinder;
x_33 = l_Lean_Parser_Syntax_mkNode(x_32, x_31);
return x_33;
}
}
else
{
obj* x_34; obj* x_37; 
x_34 = lean::cnstr_get(x_5, 0);
lean::inc(x_34);
lean::dec(x_5);
x_37 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_37, 0, x_34);
if (lean::obj_tag(x_9) == 0)
{
obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; 
x_38 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_7);
lean::cnstr_set(x_39, 1, x_38);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_37);
lean::cnstr_set(x_40, 1, x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_12);
lean::cnstr_set(x_41, 1, x_40);
x_42 = lean::box(3);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_41);
x_44 = l_Lean_Parser_Term_simpleImplicitBinder;
x_45 = l_Lean_Parser_Syntax_mkNode(x_44, x_43);
return x_45;
}
else
{
obj* x_46; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; 
x_46 = lean::cnstr_get(x_9, 0);
lean::inc(x_46);
lean::dec(x_9);
x_49 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_49, 0, x_46);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_13);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_7);
lean::cnstr_set(x_51, 1, x_50);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_37);
lean::cnstr_set(x_52, 1, x_51);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_12);
lean::cnstr_set(x_53, 1, x_52);
x_54 = lean::box(3);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_53);
x_56 = l_Lean_Parser_Term_simpleImplicitBinder;
x_57 = l_Lean_Parser_Syntax_mkNode(x_56, x_55);
return x_57;
}
}
}
else
{
obj* x_58; obj* x_61; 
x_58 = lean::cnstr_get(x_1, 0);
lean::inc(x_58);
lean::dec(x_1);
x_61 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_61, 0, x_58);
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; 
x_62 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_7);
lean::cnstr_set(x_63, 1, x_62);
x_64 = lean::box(3);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_63);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_12);
lean::cnstr_set(x_66, 1, x_65);
x_67 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_67, 0, x_61);
lean::cnstr_set(x_67, 1, x_66);
x_68 = l_Lean_Parser_Term_simpleImplicitBinder;
x_69 = l_Lean_Parser_Syntax_mkNode(x_68, x_67);
return x_69;
}
else
{
obj* x_70; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; 
x_70 = lean::cnstr_get(x_9, 0);
lean::inc(x_70);
lean::dec(x_9);
x_73 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_73, 0, x_70);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_13);
x_75 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_75, 0, x_7);
lean::cnstr_set(x_75, 1, x_74);
x_76 = lean::box(3);
x_77 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_77, 0, x_76);
lean::cnstr_set(x_77, 1, x_75);
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_12);
lean::cnstr_set(x_78, 1, x_77);
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_61);
lean::cnstr_set(x_79, 1, x_78);
x_80 = l_Lean_Parser_Term_simpleImplicitBinder;
x_81 = l_Lean_Parser_Syntax_mkNode(x_80, x_79);
return x_81;
}
}
else
{
obj* x_82; obj* x_85; 
x_82 = lean::cnstr_get(x_5, 0);
lean::inc(x_82);
lean::dec(x_5);
x_85 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_85, 0, x_82);
if (lean::obj_tag(x_9) == 0)
{
obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; 
x_86 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_87 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_87, 0, x_7);
lean::cnstr_set(x_87, 1, x_86);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_85);
lean::cnstr_set(x_88, 1, x_87);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_12);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_61);
lean::cnstr_set(x_90, 1, x_89);
x_91 = l_Lean_Parser_Term_simpleImplicitBinder;
x_92 = l_Lean_Parser_Syntax_mkNode(x_91, x_90);
return x_92;
}
else
{
obj* x_93; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; 
x_93 = lean::cnstr_get(x_9, 0);
lean::inc(x_93);
lean::dec(x_9);
x_96 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_96, 0, x_93);
x_97 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_97, 0, x_96);
lean::cnstr_set(x_97, 1, x_13);
x_98 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_98, 0, x_7);
lean::cnstr_set(x_98, 1, x_97);
x_99 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_99, 0, x_85);
lean::cnstr_set(x_99, 1, x_98);
x_100 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_100, 0, x_12);
lean::cnstr_set(x_100, 1, x_99);
x_101 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_101, 0, x_61);
lean::cnstr_set(x_101, 1, x_100);
x_102 = l_Lean_Parser_Term_simpleImplicitBinder;
x_103 = l_Lean_Parser_Syntax_mkNode(x_102, x_101);
return x_103;
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_2 = lean::box(3);
x_3 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_3, 0, x_0);
lean::cnstr_set(x_3, 1, x_1);
lean::cnstr_set(x_3, 2, x_0);
lean::cnstr_set(x_3, 3, x_2);
lean::cnstr_set(x_3, 4, x_0);
return x_3;
}
}
obj* l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; 
switch (lean::obj_tag(x_28)) {
case 1:
{
obj* x_38; 
x_38 = lean::cnstr_get(x_28, 0);
lean::inc(x_38);
lean::dec(x_28);
x_36 = x_38;
goto lbl_37;
}
case 3:
{
obj* x_41; 
x_41 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_36 = x_41;
goto lbl_37;
}
default:
{
obj* x_43; 
lean::dec(x_28);
x_43 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_36 = x_43;
goto lbl_37;
}
}
lbl_37:
{
obj* x_44; obj* x_45; obj* x_46; obj* x_48; obj* x_49; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_51; 
x_51 = lean::box(3);
x_48 = x_27;
x_49 = x_51;
goto lbl_50;
}
else
{
obj* x_52; obj* x_54; 
x_52 = lean::cnstr_get(x_27, 0);
lean::inc(x_52);
x_54 = lean::cnstr_get(x_27, 1);
lean::inc(x_54);
lean::dec(x_27);
x_48 = x_54;
x_49 = x_52;
goto lbl_50;
}
lbl_47:
{
if (lean::obj_tag(x_46) == 0)
{
obj* x_57; obj* x_58; 
x_57 = lean::box(0);
x_58 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_58, 0, x_18);
lean::cnstr_set(x_58, 1, x_36);
lean::cnstr_set(x_58, 2, x_44);
lean::cnstr_set(x_58, 3, x_45);
lean::cnstr_set(x_58, 4, x_57);
return x_58;
}
else
{
obj* x_59; 
x_59 = lean::cnstr_get(x_46, 0);
lean::inc(x_59);
lean::dec(x_46);
switch (lean::obj_tag(x_59)) {
case 0:
{
obj* x_62; obj* x_65; obj* x_66; 
x_62 = lean::cnstr_get(x_59, 0);
lean::inc(x_62);
lean::dec(x_59);
x_65 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_65, 0, x_62);
x_66 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_66, 0, x_18);
lean::cnstr_set(x_66, 1, x_36);
lean::cnstr_set(x_66, 2, x_44);
lean::cnstr_set(x_66, 3, x_45);
lean::cnstr_set(x_66, 4, x_65);
return x_66;
}
case 3:
{
obj* x_67; obj* x_68; 
x_67 = lean::box(0);
x_68 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_68, 0, x_18);
lean::cnstr_set(x_68, 1, x_36);
lean::cnstr_set(x_68, 2, x_44);
lean::cnstr_set(x_68, 3, x_45);
lean::cnstr_set(x_68, 4, x_67);
return x_68;
}
default:
{
obj* x_70; obj* x_71; 
lean::dec(x_59);
x_70 = lean::box(0);
x_71 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_71, 0, x_18);
lean::cnstr_set(x_71, 1, x_36);
lean::cnstr_set(x_71, 2, x_44);
lean::cnstr_set(x_71, 3, x_45);
lean::cnstr_set(x_71, 4, x_70);
return x_71;
}
}
}
}
lbl_50:
{
switch (lean::obj_tag(x_49)) {
case 0:
{
obj* x_72; obj* x_75; 
x_72 = lean::cnstr_get(x_49, 0);
lean::inc(x_72);
lean::dec(x_49);
x_75 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_75, 0, x_72);
if (lean::obj_tag(x_48) == 0)
{
obj* x_76; obj* x_77; obj* x_78; 
x_76 = lean::box(0);
x_77 = lean::box(3);
x_78 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_78, 0, x_18);
lean::cnstr_set(x_78, 1, x_36);
lean::cnstr_set(x_78, 2, x_75);
lean::cnstr_set(x_78, 3, x_77);
lean::cnstr_set(x_78, 4, x_76);
return x_78;
}
else
{
obj* x_79; obj* x_81; 
x_79 = lean::cnstr_get(x_48, 0);
lean::inc(x_79);
x_81 = lean::cnstr_get(x_48, 1);
lean::inc(x_81);
lean::dec(x_48);
x_44 = x_75;
x_45 = x_79;
x_46 = x_81;
goto lbl_47;
}
}
case 3:
{
obj* x_84; 
x_84 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
obj* x_85; obj* x_86; 
x_85 = lean::box(3);
x_86 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_86, 0, x_18);
lean::cnstr_set(x_86, 1, x_36);
lean::cnstr_set(x_86, 2, x_84);
lean::cnstr_set(x_86, 3, x_85);
lean::cnstr_set(x_86, 4, x_84);
return x_86;
}
else
{
obj* x_87; obj* x_89; 
x_87 = lean::cnstr_get(x_48, 0);
lean::inc(x_87);
x_89 = lean::cnstr_get(x_48, 1);
lean::inc(x_89);
lean::dec(x_48);
x_44 = x_84;
x_45 = x_87;
x_46 = x_89;
goto lbl_47;
}
}
default:
{
obj* x_93; 
lean::dec(x_49);
x_93 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
obj* x_94; obj* x_95; 
x_94 = lean::box(3);
x_95 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_95, 0, x_18);
lean::cnstr_set(x_95, 1, x_36);
lean::cnstr_set(x_95, 2, x_93);
lean::cnstr_set(x_95, 3, x_94);
lean::cnstr_set(x_95, 4, x_93);
return x_95;
}
else
{
obj* x_96; obj* x_98; 
x_96 = lean::cnstr_get(x_48, 0);
lean::inc(x_96);
x_98 = lean::cnstr_get(x_48, 1);
lean::inc(x_98);
lean::dec(x_48);
x_44 = x_93;
x_45 = x_96;
x_46 = x_98;
goto lbl_47;
}
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_simpleImplicitBinder_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_simpleStrictImplicitBinder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("simpleStrictImplicitBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_13; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_12, 0, x_3);
x_13 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
x_14 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_7);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::box(3);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_15);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_12);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_16);
lean::cnstr_set(x_19, 1, x_18);
x_20 = l_Lean_Parser_Term_simpleStrictImplicitBinder;
x_21 = l_Lean_Parser_Syntax_mkNode(x_20, x_19);
return x_21;
}
else
{
obj* x_22; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_22 = lean::cnstr_get(x_9, 0);
lean::inc(x_22);
lean::dec(x_9);
x_25 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_13);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_7);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::box(3);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_27);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_12);
lean::cnstr_set(x_30, 1, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_30);
x_32 = l_Lean_Parser_Term_simpleStrictImplicitBinder;
x_33 = l_Lean_Parser_Syntax_mkNode(x_32, x_31);
return x_33;
}
}
else
{
obj* x_34; obj* x_37; 
x_34 = lean::cnstr_get(x_5, 0);
lean::inc(x_34);
lean::dec(x_5);
x_37 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_37, 0, x_34);
if (lean::obj_tag(x_9) == 0)
{
obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; 
x_38 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_7);
lean::cnstr_set(x_39, 1, x_38);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_37);
lean::cnstr_set(x_40, 1, x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_12);
lean::cnstr_set(x_41, 1, x_40);
x_42 = lean::box(3);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_41);
x_44 = l_Lean_Parser_Term_simpleStrictImplicitBinder;
x_45 = l_Lean_Parser_Syntax_mkNode(x_44, x_43);
return x_45;
}
else
{
obj* x_46; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; 
x_46 = lean::cnstr_get(x_9, 0);
lean::inc(x_46);
lean::dec(x_9);
x_49 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_49, 0, x_46);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_13);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_7);
lean::cnstr_set(x_51, 1, x_50);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_37);
lean::cnstr_set(x_52, 1, x_51);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_12);
lean::cnstr_set(x_53, 1, x_52);
x_54 = lean::box(3);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_53);
x_56 = l_Lean_Parser_Term_simpleStrictImplicitBinder;
x_57 = l_Lean_Parser_Syntax_mkNode(x_56, x_55);
return x_57;
}
}
}
else
{
obj* x_58; obj* x_61; 
x_58 = lean::cnstr_get(x_1, 0);
lean::inc(x_58);
lean::dec(x_1);
x_61 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_61, 0, x_58);
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; 
x_62 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_7);
lean::cnstr_set(x_63, 1, x_62);
x_64 = lean::box(3);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_63);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_12);
lean::cnstr_set(x_66, 1, x_65);
x_67 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_67, 0, x_61);
lean::cnstr_set(x_67, 1, x_66);
x_68 = l_Lean_Parser_Term_simpleStrictImplicitBinder;
x_69 = l_Lean_Parser_Syntax_mkNode(x_68, x_67);
return x_69;
}
else
{
obj* x_70; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; 
x_70 = lean::cnstr_get(x_9, 0);
lean::inc(x_70);
lean::dec(x_9);
x_73 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_73, 0, x_70);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_13);
x_75 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_75, 0, x_7);
lean::cnstr_set(x_75, 1, x_74);
x_76 = lean::box(3);
x_77 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_77, 0, x_76);
lean::cnstr_set(x_77, 1, x_75);
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_12);
lean::cnstr_set(x_78, 1, x_77);
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_61);
lean::cnstr_set(x_79, 1, x_78);
x_80 = l_Lean_Parser_Term_simpleStrictImplicitBinder;
x_81 = l_Lean_Parser_Syntax_mkNode(x_80, x_79);
return x_81;
}
}
else
{
obj* x_82; obj* x_85; 
x_82 = lean::cnstr_get(x_5, 0);
lean::inc(x_82);
lean::dec(x_5);
x_85 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_85, 0, x_82);
if (lean::obj_tag(x_9) == 0)
{
obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; 
x_86 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_87 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_87, 0, x_7);
lean::cnstr_set(x_87, 1, x_86);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_85);
lean::cnstr_set(x_88, 1, x_87);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_12);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_61);
lean::cnstr_set(x_90, 1, x_89);
x_91 = l_Lean_Parser_Term_simpleStrictImplicitBinder;
x_92 = l_Lean_Parser_Syntax_mkNode(x_91, x_90);
return x_92;
}
else
{
obj* x_93; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; 
x_93 = lean::cnstr_get(x_9, 0);
lean::inc(x_93);
lean::dec(x_9);
x_96 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_96, 0, x_93);
x_97 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_97, 0, x_96);
lean::cnstr_set(x_97, 1, x_13);
x_98 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_98, 0, x_7);
lean::cnstr_set(x_98, 1, x_97);
x_99 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_99, 0, x_85);
lean::cnstr_set(x_99, 1, x_98);
x_100 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_100, 0, x_12);
lean::cnstr_set(x_100, 1, x_99);
x_101 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_101, 0, x_61);
lean::cnstr_set(x_101, 1, x_100);
x_102 = l_Lean_Parser_Term_simpleStrictImplicitBinder;
x_103 = l_Lean_Parser_Syntax_mkNode(x_102, x_101);
return x_103;
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_2 = lean::box(3);
x_3 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_3, 0, x_0);
lean::cnstr_set(x_3, 1, x_1);
lean::cnstr_set(x_3, 2, x_0);
lean::cnstr_set(x_3, 3, x_2);
lean::cnstr_set(x_3, 4, x_0);
return x_3;
}
}
obj* l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; 
switch (lean::obj_tag(x_28)) {
case 1:
{
obj* x_38; 
x_38 = lean::cnstr_get(x_28, 0);
lean::inc(x_38);
lean::dec(x_28);
x_36 = x_38;
goto lbl_37;
}
case 3:
{
obj* x_41; 
x_41 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_36 = x_41;
goto lbl_37;
}
default:
{
obj* x_43; 
lean::dec(x_28);
x_43 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_36 = x_43;
goto lbl_37;
}
}
lbl_37:
{
obj* x_44; obj* x_45; obj* x_46; obj* x_48; obj* x_49; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_51; 
x_51 = lean::box(3);
x_48 = x_27;
x_49 = x_51;
goto lbl_50;
}
else
{
obj* x_52; obj* x_54; 
x_52 = lean::cnstr_get(x_27, 0);
lean::inc(x_52);
x_54 = lean::cnstr_get(x_27, 1);
lean::inc(x_54);
lean::dec(x_27);
x_48 = x_54;
x_49 = x_52;
goto lbl_50;
}
lbl_47:
{
if (lean::obj_tag(x_46) == 0)
{
obj* x_57; obj* x_58; 
x_57 = lean::box(0);
x_58 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_58, 0, x_18);
lean::cnstr_set(x_58, 1, x_36);
lean::cnstr_set(x_58, 2, x_44);
lean::cnstr_set(x_58, 3, x_45);
lean::cnstr_set(x_58, 4, x_57);
return x_58;
}
else
{
obj* x_59; 
x_59 = lean::cnstr_get(x_46, 0);
lean::inc(x_59);
lean::dec(x_46);
switch (lean::obj_tag(x_59)) {
case 0:
{
obj* x_62; obj* x_65; obj* x_66; 
x_62 = lean::cnstr_get(x_59, 0);
lean::inc(x_62);
lean::dec(x_59);
x_65 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_65, 0, x_62);
x_66 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_66, 0, x_18);
lean::cnstr_set(x_66, 1, x_36);
lean::cnstr_set(x_66, 2, x_44);
lean::cnstr_set(x_66, 3, x_45);
lean::cnstr_set(x_66, 4, x_65);
return x_66;
}
case 3:
{
obj* x_67; obj* x_68; 
x_67 = lean::box(0);
x_68 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_68, 0, x_18);
lean::cnstr_set(x_68, 1, x_36);
lean::cnstr_set(x_68, 2, x_44);
lean::cnstr_set(x_68, 3, x_45);
lean::cnstr_set(x_68, 4, x_67);
return x_68;
}
default:
{
obj* x_70; obj* x_71; 
lean::dec(x_59);
x_70 = lean::box(0);
x_71 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_71, 0, x_18);
lean::cnstr_set(x_71, 1, x_36);
lean::cnstr_set(x_71, 2, x_44);
lean::cnstr_set(x_71, 3, x_45);
lean::cnstr_set(x_71, 4, x_70);
return x_71;
}
}
}
}
lbl_50:
{
switch (lean::obj_tag(x_49)) {
case 0:
{
obj* x_72; obj* x_75; 
x_72 = lean::cnstr_get(x_49, 0);
lean::inc(x_72);
lean::dec(x_49);
x_75 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_75, 0, x_72);
if (lean::obj_tag(x_48) == 0)
{
obj* x_76; obj* x_77; obj* x_78; 
x_76 = lean::box(0);
x_77 = lean::box(3);
x_78 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_78, 0, x_18);
lean::cnstr_set(x_78, 1, x_36);
lean::cnstr_set(x_78, 2, x_75);
lean::cnstr_set(x_78, 3, x_77);
lean::cnstr_set(x_78, 4, x_76);
return x_78;
}
else
{
obj* x_79; obj* x_81; 
x_79 = lean::cnstr_get(x_48, 0);
lean::inc(x_79);
x_81 = lean::cnstr_get(x_48, 1);
lean::inc(x_81);
lean::dec(x_48);
x_44 = x_75;
x_45 = x_79;
x_46 = x_81;
goto lbl_47;
}
}
case 3:
{
obj* x_84; 
x_84 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
obj* x_85; obj* x_86; 
x_85 = lean::box(3);
x_86 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_86, 0, x_18);
lean::cnstr_set(x_86, 1, x_36);
lean::cnstr_set(x_86, 2, x_84);
lean::cnstr_set(x_86, 3, x_85);
lean::cnstr_set(x_86, 4, x_84);
return x_86;
}
else
{
obj* x_87; obj* x_89; 
x_87 = lean::cnstr_get(x_48, 0);
lean::inc(x_87);
x_89 = lean::cnstr_get(x_48, 1);
lean::inc(x_89);
lean::dec(x_48);
x_44 = x_84;
x_45 = x_87;
x_46 = x_89;
goto lbl_47;
}
}
default:
{
obj* x_93; 
lean::dec(x_49);
x_93 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
obj* x_94; obj* x_95; 
x_94 = lean::box(3);
x_95 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_95, 0, x_18);
lean::cnstr_set(x_95, 1, x_36);
lean::cnstr_set(x_95, 2, x_93);
lean::cnstr_set(x_95, 3, x_94);
lean::cnstr_set(x_95, 4, x_93);
return x_95;
}
else
{
obj* x_96; obj* x_98; 
x_96 = lean::cnstr_get(x_48, 0);
lean::inc(x_96);
x_98 = lean::cnstr_get(x_48, 1);
lean::inc(x_98);
lean::dec(x_48);
x_44 = x_93;
x_45 = x_96;
x_46 = x_98;
goto lbl_47;
}
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_simpleInstImplicitBinder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("simpleInstImplicitBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_13; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_12, 0, x_3);
x_13 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
x_14 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_7);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::box(3);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_15);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_12);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_16);
lean::cnstr_set(x_19, 1, x_18);
x_20 = l_Lean_Parser_Term_simpleInstImplicitBinder;
x_21 = l_Lean_Parser_Syntax_mkNode(x_20, x_19);
return x_21;
}
else
{
obj* x_22; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_22 = lean::cnstr_get(x_9, 0);
lean::inc(x_22);
lean::dec(x_9);
x_25 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_13);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_7);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::box(3);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_27);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_12);
lean::cnstr_set(x_30, 1, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_30);
x_32 = l_Lean_Parser_Term_simpleInstImplicitBinder;
x_33 = l_Lean_Parser_Syntax_mkNode(x_32, x_31);
return x_33;
}
}
else
{
obj* x_34; obj* x_37; 
x_34 = lean::cnstr_get(x_5, 0);
lean::inc(x_34);
lean::dec(x_5);
x_37 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_37, 0, x_34);
if (lean::obj_tag(x_9) == 0)
{
obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; 
x_38 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_7);
lean::cnstr_set(x_39, 1, x_38);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_37);
lean::cnstr_set(x_40, 1, x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_12);
lean::cnstr_set(x_41, 1, x_40);
x_42 = lean::box(3);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_41);
x_44 = l_Lean_Parser_Term_simpleInstImplicitBinder;
x_45 = l_Lean_Parser_Syntax_mkNode(x_44, x_43);
return x_45;
}
else
{
obj* x_46; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; 
x_46 = lean::cnstr_get(x_9, 0);
lean::inc(x_46);
lean::dec(x_9);
x_49 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_49, 0, x_46);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_13);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_7);
lean::cnstr_set(x_51, 1, x_50);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_37);
lean::cnstr_set(x_52, 1, x_51);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_12);
lean::cnstr_set(x_53, 1, x_52);
x_54 = lean::box(3);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_53);
x_56 = l_Lean_Parser_Term_simpleInstImplicitBinder;
x_57 = l_Lean_Parser_Syntax_mkNode(x_56, x_55);
return x_57;
}
}
}
else
{
obj* x_58; obj* x_61; 
x_58 = lean::cnstr_get(x_1, 0);
lean::inc(x_58);
lean::dec(x_1);
x_61 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_61, 0, x_58);
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; 
x_62 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_7);
lean::cnstr_set(x_63, 1, x_62);
x_64 = lean::box(3);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_63);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_12);
lean::cnstr_set(x_66, 1, x_65);
x_67 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_67, 0, x_61);
lean::cnstr_set(x_67, 1, x_66);
x_68 = l_Lean_Parser_Term_simpleInstImplicitBinder;
x_69 = l_Lean_Parser_Syntax_mkNode(x_68, x_67);
return x_69;
}
else
{
obj* x_70; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; 
x_70 = lean::cnstr_get(x_9, 0);
lean::inc(x_70);
lean::dec(x_9);
x_73 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_73, 0, x_70);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_13);
x_75 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_75, 0, x_7);
lean::cnstr_set(x_75, 1, x_74);
x_76 = lean::box(3);
x_77 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_77, 0, x_76);
lean::cnstr_set(x_77, 1, x_75);
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_12);
lean::cnstr_set(x_78, 1, x_77);
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_61);
lean::cnstr_set(x_79, 1, x_78);
x_80 = l_Lean_Parser_Term_simpleInstImplicitBinder;
x_81 = l_Lean_Parser_Syntax_mkNode(x_80, x_79);
return x_81;
}
}
else
{
obj* x_82; obj* x_85; 
x_82 = lean::cnstr_get(x_5, 0);
lean::inc(x_82);
lean::dec(x_5);
x_85 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_85, 0, x_82);
if (lean::obj_tag(x_9) == 0)
{
obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; 
x_86 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_87 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_87, 0, x_7);
lean::cnstr_set(x_87, 1, x_86);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_85);
lean::cnstr_set(x_88, 1, x_87);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_12);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_61);
lean::cnstr_set(x_90, 1, x_89);
x_91 = l_Lean_Parser_Term_simpleInstImplicitBinder;
x_92 = l_Lean_Parser_Syntax_mkNode(x_91, x_90);
return x_92;
}
else
{
obj* x_93; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; 
x_93 = lean::cnstr_get(x_9, 0);
lean::inc(x_93);
lean::dec(x_9);
x_96 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_96, 0, x_93);
x_97 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_97, 0, x_96);
lean::cnstr_set(x_97, 1, x_13);
x_98 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_98, 0, x_7);
lean::cnstr_set(x_98, 1, x_97);
x_99 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_99, 0, x_85);
lean::cnstr_set(x_99, 1, x_98);
x_100 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_100, 0, x_12);
lean::cnstr_set(x_100, 1, x_99);
x_101 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_101, 0, x_61);
lean::cnstr_set(x_101, 1, x_100);
x_102 = l_Lean_Parser_Term_simpleInstImplicitBinder;
x_103 = l_Lean_Parser_Syntax_mkNode(x_102, x_101);
return x_103;
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_2 = lean::box(3);
x_3 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_3, 0, x_0);
lean::cnstr_set(x_3, 1, x_1);
lean::cnstr_set(x_3, 2, x_0);
lean::cnstr_set(x_3, 3, x_2);
lean::cnstr_set(x_3, 4, x_0);
return x_3;
}
}
obj* l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; 
switch (lean::obj_tag(x_28)) {
case 1:
{
obj* x_38; 
x_38 = lean::cnstr_get(x_28, 0);
lean::inc(x_38);
lean::dec(x_28);
x_36 = x_38;
goto lbl_37;
}
case 3:
{
obj* x_41; 
x_41 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_36 = x_41;
goto lbl_37;
}
default:
{
obj* x_43; 
lean::dec(x_28);
x_43 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_36 = x_43;
goto lbl_37;
}
}
lbl_37:
{
obj* x_44; obj* x_45; obj* x_46; obj* x_48; obj* x_49; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_51; 
x_51 = lean::box(3);
x_48 = x_27;
x_49 = x_51;
goto lbl_50;
}
else
{
obj* x_52; obj* x_54; 
x_52 = lean::cnstr_get(x_27, 0);
lean::inc(x_52);
x_54 = lean::cnstr_get(x_27, 1);
lean::inc(x_54);
lean::dec(x_27);
x_48 = x_54;
x_49 = x_52;
goto lbl_50;
}
lbl_47:
{
if (lean::obj_tag(x_46) == 0)
{
obj* x_57; obj* x_58; 
x_57 = lean::box(0);
x_58 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_58, 0, x_18);
lean::cnstr_set(x_58, 1, x_36);
lean::cnstr_set(x_58, 2, x_44);
lean::cnstr_set(x_58, 3, x_45);
lean::cnstr_set(x_58, 4, x_57);
return x_58;
}
else
{
obj* x_59; 
x_59 = lean::cnstr_get(x_46, 0);
lean::inc(x_59);
lean::dec(x_46);
switch (lean::obj_tag(x_59)) {
case 0:
{
obj* x_62; obj* x_65; obj* x_66; 
x_62 = lean::cnstr_get(x_59, 0);
lean::inc(x_62);
lean::dec(x_59);
x_65 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_65, 0, x_62);
x_66 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_66, 0, x_18);
lean::cnstr_set(x_66, 1, x_36);
lean::cnstr_set(x_66, 2, x_44);
lean::cnstr_set(x_66, 3, x_45);
lean::cnstr_set(x_66, 4, x_65);
return x_66;
}
case 3:
{
obj* x_67; obj* x_68; 
x_67 = lean::box(0);
x_68 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_68, 0, x_18);
lean::cnstr_set(x_68, 1, x_36);
lean::cnstr_set(x_68, 2, x_44);
lean::cnstr_set(x_68, 3, x_45);
lean::cnstr_set(x_68, 4, x_67);
return x_68;
}
default:
{
obj* x_70; obj* x_71; 
lean::dec(x_59);
x_70 = lean::box(0);
x_71 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_71, 0, x_18);
lean::cnstr_set(x_71, 1, x_36);
lean::cnstr_set(x_71, 2, x_44);
lean::cnstr_set(x_71, 3, x_45);
lean::cnstr_set(x_71, 4, x_70);
return x_71;
}
}
}
}
lbl_50:
{
switch (lean::obj_tag(x_49)) {
case 0:
{
obj* x_72; obj* x_75; 
x_72 = lean::cnstr_get(x_49, 0);
lean::inc(x_72);
lean::dec(x_49);
x_75 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_75, 0, x_72);
if (lean::obj_tag(x_48) == 0)
{
obj* x_76; obj* x_77; obj* x_78; 
x_76 = lean::box(0);
x_77 = lean::box(3);
x_78 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_78, 0, x_18);
lean::cnstr_set(x_78, 1, x_36);
lean::cnstr_set(x_78, 2, x_75);
lean::cnstr_set(x_78, 3, x_77);
lean::cnstr_set(x_78, 4, x_76);
return x_78;
}
else
{
obj* x_79; obj* x_81; 
x_79 = lean::cnstr_get(x_48, 0);
lean::inc(x_79);
x_81 = lean::cnstr_get(x_48, 1);
lean::inc(x_81);
lean::dec(x_48);
x_44 = x_75;
x_45 = x_79;
x_46 = x_81;
goto lbl_47;
}
}
case 3:
{
obj* x_84; 
x_84 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
obj* x_85; obj* x_86; 
x_85 = lean::box(3);
x_86 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_86, 0, x_18);
lean::cnstr_set(x_86, 1, x_36);
lean::cnstr_set(x_86, 2, x_84);
lean::cnstr_set(x_86, 3, x_85);
lean::cnstr_set(x_86, 4, x_84);
return x_86;
}
else
{
obj* x_87; obj* x_89; 
x_87 = lean::cnstr_get(x_48, 0);
lean::inc(x_87);
x_89 = lean::cnstr_get(x_48, 1);
lean::inc(x_89);
lean::dec(x_48);
x_44 = x_84;
x_45 = x_87;
x_46 = x_89;
goto lbl_47;
}
}
default:
{
obj* x_93; 
lean::dec(x_49);
x_93 = lean::box(0);
if (lean::obj_tag(x_48) == 0)
{
obj* x_94; obj* x_95; 
x_94 = lean::box(3);
x_95 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_95, 0, x_18);
lean::cnstr_set(x_95, 1, x_36);
lean::cnstr_set(x_95, 2, x_93);
lean::cnstr_set(x_95, 3, x_94);
lean::cnstr_set(x_95, 4, x_93);
return x_95;
}
else
{
obj* x_96; obj* x_98; 
x_96 = lean::cnstr_get(x_48, 0);
lean::inc(x_96);
x_98 = lean::cnstr_get(x_48, 1);
lean::inc(x_98);
lean::dec(x_48);
x_44 = x_93;
x_45 = x_96;
x_46 = x_98;
goto lbl_47;
}
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_simpleInstImplicitBinder_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_simpleBinder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("simpleBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_simpleBinder_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_Lean_Parser_Term_simpleExplicitBinder_HasView;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_12 = l_Lean_Parser_Syntax_mkNode(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_Lean_Parser_Term_simpleBinder;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
case 1:
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_Lean_Parser_Term_simpleImplicitBinder_HasView;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_26 = l_Lean_Parser_Syntax_mkNode(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_Lean_Parser_Term_simpleBinder;
x_29 = l_Lean_Parser_Syntax_mkNode(x_28, x_27);
return x_29;
}
case 2:
{
obj* x_30; obj* x_33; obj* x_34; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; 
x_30 = lean::cnstr_get(x_0, 0);
lean::inc(x_30);
lean::dec(x_0);
x_33 = l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView;
x_34 = lean::cnstr_get(x_33, 1);
lean::inc(x_34);
lean::dec(x_33);
x_37 = lean::apply_1(x_34, x_30);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_1);
x_39 = l_Lean_Parser_number_HasView_x_27___elambda__1___closed__4;
x_40 = l_Lean_Parser_Syntax_mkNode(x_39, x_38);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_1);
x_42 = l_Lean_Parser_Term_simpleBinder;
x_43 = l_Lean_Parser_Syntax_mkNode(x_42, x_41);
return x_43;
}
default:
{
obj* x_44; obj* x_47; obj* x_48; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; 
x_44 = lean::cnstr_get(x_0, 0);
lean::inc(x_44);
lean::dec(x_0);
x_47 = l_Lean_Parser_Term_simpleInstImplicitBinder_HasView;
x_48 = lean::cnstr_get(x_47, 1);
lean::inc(x_48);
lean::dec(x_47);
x_51 = lean::apply_1(x_48, x_44);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_1);
x_53 = l_Lean_Parser_number_HasView_x_27___elambda__1___closed__6;
x_54 = l_Lean_Parser_Syntax_mkNode(x_53, x_52);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_1);
x_56 = l_Lean_Parser_Term_simpleBinder;
x_57 = l_Lean_Parser_Syntax_mkNode(x_56, x_55);
return x_57;
}
}
}
}
obj* _init_l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_simpleExplicitBinder_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("simpleBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__2;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
if (x_56 == 0)
{
obj* x_57; uint8 x_58; 
x_57 = lean::mk_nat_obj(1ul);
x_58 = lean::nat_dec_eq(x_39, x_57);
if (x_58 == 0)
{
obj* x_59; uint8 x_60; 
x_59 = lean::mk_nat_obj(2ul);
x_60 = lean::nat_dec_eq(x_39, x_59);
lean::dec(x_39);
if (x_60 == 0)
{
obj* x_62; obj* x_63; obj* x_66; obj* x_67; 
x_62 = l_Lean_Parser_Term_simpleInstImplicitBinder_HasView;
x_63 = lean::cnstr_get(x_62, 0);
lean::inc(x_63);
lean::dec(x_62);
x_66 = lean::apply_1(x_63, x_52);
x_67 = lean::alloc_cnstr(3, 1, 0);
lean::cnstr_set(x_67, 0, x_66);
return x_67;
}
else
{
obj* x_68; obj* x_69; obj* x_72; obj* x_73; 
x_68 = l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView;
x_69 = lean::cnstr_get(x_68, 0);
lean::inc(x_69);
lean::dec(x_68);
x_72 = lean::apply_1(x_69, x_52);
x_73 = lean::alloc_cnstr(2, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
return x_73;
}
}
else
{
obj* x_75; obj* x_76; obj* x_79; obj* x_80; 
lean::dec(x_39);
x_75 = l_Lean_Parser_Term_simpleImplicitBinder_HasView;
x_76 = lean::cnstr_get(x_75, 0);
lean::inc(x_76);
lean::dec(x_75);
x_79 = lean::apply_1(x_76, x_52);
x_80 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_80, 0, x_79);
return x_80;
}
}
else
{
obj* x_82; obj* x_83; obj* x_86; obj* x_87; 
lean::dec(x_39);
x_82 = l_Lean_Parser_Term_simpleExplicitBinder_HasView;
x_83 = lean::cnstr_get(x_82, 0);
lean::inc(x_83);
lean::dec(x_82);
x_86 = lean::apply_1(x_83, x_52);
x_87 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_87, 0, x_86);
return x_87;
}
}
else
{
obj* x_91; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_91 = l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1;
return x_91;
}
}
}
}
}
}
}
else
{
obj* x_94; 
lean::dec(x_8);
lean::dec(x_17);
x_94 = l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1;
return x_94;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_simpleBinder_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_simpleBinder_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_simpleBinder_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_simpleBinder_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_simpleBinder_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_14; obj* x_16; obj* x_18; obj* x_20; obj* x_23; obj* x_25; obj* x_26; obj* x_28; obj* x_29; obj* x_31; obj* x_33; obj* x_35; obj* x_37; obj* x_39; obj* x_42; obj* x_44; obj* x_45; obj* x_47; obj* x_48; obj* x_50; obj* x_52; obj* x_54; obj* x_56; obj* x_58; obj* x_61; obj* x_63; obj* x_64; obj* x_66; obj* x_67; obj* x_69; obj* x_71; obj* x_74; obj* x_77; obj* x_79; obj* x_82; obj* x_84; obj* x_86; obj* x_89; obj* x_92; obj* x_95; obj* x_97; obj* x_99; 
x_0 = lean::mk_string("(");
x_1 = lean::mk_nat_obj(0ul);
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = lean::box(0);
x_5 = lean::mk_string(" : ");
x_6 = l_Lean_Parser_symbol_tokens___rarg(x_5, x_1);
lean::dec(x_5);
x_8 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_1);
x_9 = lean::mk_string(")");
x_10 = l_Lean_Parser_symbol_tokens___rarg(x_9, x_1);
lean::dec(x_9);
x_12 = l_Lean_Parser_List_cons_tokens___rarg(x_10, x_4);
lean::dec(x_10);
x_14 = l_Lean_Parser_List_cons_tokens___rarg(x_8, x_12);
lean::dec(x_12);
x_16 = l_Lean_Parser_List_cons_tokens___rarg(x_6, x_14);
lean::dec(x_14);
x_18 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_16);
lean::dec(x_16);
x_20 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_18);
lean::dec(x_18);
lean::dec(x_2);
x_23 = l_Lean_Parser_tokens___rarg(x_20);
lean::dec(x_20);
x_25 = lean::mk_string("{");
x_26 = l_Lean_Parser_symbol_tokens___rarg(x_25, x_1);
lean::dec(x_25);
x_28 = lean::mk_string("}");
x_29 = l_Lean_Parser_symbol_tokens___rarg(x_28, x_1);
lean::dec(x_28);
x_31 = l_Lean_Parser_List_cons_tokens___rarg(x_29, x_4);
lean::dec(x_29);
x_33 = l_Lean_Parser_List_cons_tokens___rarg(x_8, x_31);
lean::dec(x_31);
x_35 = l_Lean_Parser_List_cons_tokens___rarg(x_6, x_33);
lean::dec(x_33);
x_37 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_35);
lean::dec(x_35);
x_39 = l_Lean_Parser_List_cons_tokens___rarg(x_26, x_37);
lean::dec(x_37);
lean::dec(x_26);
x_42 = l_Lean_Parser_tokens___rarg(x_39);
lean::dec(x_39);
x_44 = lean::mk_string("\xe2\xa6\x83");
x_45 = l_Lean_Parser_symbol_tokens___rarg(x_44, x_1);
lean::dec(x_44);
x_47 = lean::mk_string("\xe2\xa6\x84");
x_48 = l_Lean_Parser_symbol_tokens___rarg(x_47, x_1);
lean::dec(x_47);
x_50 = l_Lean_Parser_List_cons_tokens___rarg(x_48, x_4);
lean::dec(x_48);
x_52 = l_Lean_Parser_List_cons_tokens___rarg(x_8, x_50);
lean::dec(x_50);
x_54 = l_Lean_Parser_List_cons_tokens___rarg(x_6, x_52);
lean::dec(x_52);
x_56 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_54);
lean::dec(x_54);
x_58 = l_Lean_Parser_List_cons_tokens___rarg(x_45, x_56);
lean::dec(x_56);
lean::dec(x_45);
x_61 = l_Lean_Parser_tokens___rarg(x_58);
lean::dec(x_58);
x_63 = lean::mk_string("[");
x_64 = l_Lean_Parser_symbol_tokens___rarg(x_63, x_1);
lean::dec(x_63);
x_66 = lean::mk_string("]");
x_67 = l_Lean_Parser_symbol_tokens___rarg(x_66, x_1);
lean::dec(x_66);
x_69 = l_Lean_Parser_List_cons_tokens___rarg(x_67, x_4);
lean::dec(x_67);
x_71 = l_Lean_Parser_List_cons_tokens___rarg(x_8, x_69);
lean::dec(x_69);
lean::dec(x_8);
x_74 = l_Lean_Parser_List_cons_tokens___rarg(x_6, x_71);
lean::dec(x_71);
lean::dec(x_6);
x_77 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_74);
lean::dec(x_74);
x_79 = l_Lean_Parser_List_cons_tokens___rarg(x_64, x_77);
lean::dec(x_77);
lean::dec(x_64);
x_82 = l_Lean_Parser_tokens___rarg(x_79);
lean::dec(x_79);
x_84 = l_Lean_Parser_List_cons_tokens___rarg(x_82, x_4);
lean::dec(x_82);
x_86 = l_Lean_Parser_List_cons_tokens___rarg(x_61, x_84);
lean::dec(x_84);
lean::dec(x_61);
x_89 = l_Lean_Parser_List_cons_tokens___rarg(x_42, x_86);
lean::dec(x_86);
lean::dec(x_42);
x_92 = l_Lean_Parser_List_cons_tokens___rarg(x_23, x_89);
lean::dec(x_89);
lean::dec(x_23);
x_95 = l_Lean_Parser_tokens___rarg(x_92);
lean::dec(x_92);
x_97 = l_Lean_Parser_List_cons_tokens___rarg(x_95, x_4);
lean::dec(x_95);
x_99 = l_Lean_Parser_tokens___rarg(x_97);
lean::dec(x_97);
return x_99;
}
}
obj* _init_l_Lean_Parser_Term_simpleBinder_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_25; obj* x_26; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_42; obj* x_43; obj* x_44; obj* x_46; obj* x_48; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_64; obj* x_65; obj* x_66; obj* x_68; obj* x_70; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; 
x_0 = lean::mk_string("(");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_string(" : ");
x_8 = l_String_trim(x_7);
lean::dec(x_7);
lean::inc(x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_11, 0, x_8);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_12, 0, x_8);
lean::closure_set(x_12, 1, x_5);
lean::closure_set(x_12, 2, x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_13, 0, x_5);
x_14 = lean::mk_string(")");
x_15 = l_String_trim(x_14);
lean::dec(x_14);
lean::inc(x_15);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_18, 0, x_15);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_19, 0, x_15);
lean::closure_set(x_19, 1, x_5);
lean::closure_set(x_19, 2, x_18);
x_20 = lean::box(0);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
lean::inc(x_13);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_13);
lean::cnstr_set(x_23, 1, x_21);
lean::inc(x_12);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_12);
lean::cnstr_set(x_25, 1, x_23);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
lean::inc(x_26);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_26);
lean::cnstr_set(x_28, 1, x_25);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_6);
lean::cnstr_set(x_29, 1, x_28);
x_30 = l_Lean_Parser_Term_simpleExplicitBinder;
x_31 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_31, 0, x_30);
lean::closure_set(x_31, 1, x_29);
x_32 = lean::mk_string("{");
x_33 = l_String_trim(x_32);
lean::dec(x_32);
lean::inc(x_33);
x_36 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_36, 0, x_33);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_37, 0, x_33);
lean::closure_set(x_37, 1, x_5);
lean::closure_set(x_37, 2, x_36);
x_38 = lean::mk_string("}");
x_39 = l_String_trim(x_38);
lean::dec(x_38);
lean::inc(x_39);
x_42 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_42, 0, x_39);
x_43 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_43, 0, x_39);
lean::closure_set(x_43, 1, x_5);
lean::closure_set(x_43, 2, x_42);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_43);
lean::cnstr_set(x_44, 1, x_20);
lean::inc(x_13);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_13);
lean::cnstr_set(x_46, 1, x_44);
lean::inc(x_12);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_12);
lean::cnstr_set(x_48, 1, x_46);
lean::inc(x_26);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_26);
lean::cnstr_set(x_50, 1, x_48);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_37);
lean::cnstr_set(x_51, 1, x_50);
x_52 = l_Lean_Parser_Term_simpleImplicitBinder;
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_53, 0, x_52);
lean::closure_set(x_53, 1, x_51);
x_54 = lean::mk_string("\xe2\xa6\x83");
x_55 = l_String_trim(x_54);
lean::dec(x_54);
lean::inc(x_55);
x_58 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_58, 0, x_55);
x_59 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_59, 0, x_55);
lean::closure_set(x_59, 1, x_5);
lean::closure_set(x_59, 2, x_58);
x_60 = lean::mk_string("\xe2\xa6\x84");
x_61 = l_String_trim(x_60);
lean::dec(x_60);
lean::inc(x_61);
x_64 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_64, 0, x_61);
x_65 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_65, 0, x_61);
lean::closure_set(x_65, 1, x_5);
lean::closure_set(x_65, 2, x_64);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_65);
lean::cnstr_set(x_66, 1, x_20);
lean::inc(x_13);
x_68 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_68, 0, x_13);
lean::cnstr_set(x_68, 1, x_66);
lean::inc(x_12);
x_70 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_70, 0, x_12);
lean::cnstr_set(x_70, 1, x_68);
lean::inc(x_26);
x_72 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_72, 0, x_26);
lean::cnstr_set(x_72, 1, x_70);
x_73 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_73, 0, x_59);
lean::cnstr_set(x_73, 1, x_72);
x_74 = l_Lean_Parser_Term_simpleStrictImplicitBinder;
x_75 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_75, 0, x_74);
lean::closure_set(x_75, 1, x_73);
x_76 = lean::mk_string("[");
x_77 = l_String_trim(x_76);
lean::dec(x_76);
lean::inc(x_77);
x_80 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_80, 0, x_77);
x_81 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_81, 0, x_77);
lean::closure_set(x_81, 1, x_5);
lean::closure_set(x_81, 2, x_80);
x_82 = lean::mk_string("]");
x_83 = l_String_trim(x_82);
lean::dec(x_82);
lean::inc(x_83);
x_86 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_86, 0, x_83);
x_87 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_87, 0, x_83);
lean::closure_set(x_87, 1, x_5);
lean::closure_set(x_87, 2, x_86);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_87);
lean::cnstr_set(x_88, 1, x_20);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_13);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_12);
lean::cnstr_set(x_90, 1, x_89);
x_91 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_91, 0, x_26);
lean::cnstr_set(x_91, 1, x_90);
x_92 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_92, 0, x_81);
lean::cnstr_set(x_92, 1, x_91);
x_93 = l_Lean_Parser_Term_simpleInstImplicitBinder;
x_94 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_94, 0, x_93);
lean::closure_set(x_94, 1, x_92);
x_95 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_95, 0, x_94);
lean::cnstr_set(x_95, 1, x_20);
x_96 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_96, 0, x_75);
lean::cnstr_set(x_96, 1, x_95);
x_97 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_97, 0, x_53);
lean::cnstr_set(x_97, 1, x_96);
x_98 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_98, 0, x_31);
lean::cnstr_set(x_98, 1, x_97);
x_99 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_99, 0, x_98);
lean::closure_set(x_99, 1, x_5);
x_100 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_100, 0, x_99);
lean::cnstr_set(x_100, 1, x_20);
x_101 = l_Lean_Parser_TermParserM_Monad;
x_102 = l_Lean_Parser_TermParserM_MonadExcept;
x_103 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_104 = l_Lean_Parser_TermParserM_Alternative;
x_105 = l_Lean_Parser_Term_simpleBinder;
x_106 = l_Lean_Parser_Term_simpleBinder_HasView;
x_107 = l_Lean_Parser_Combinators_node_view___rarg(x_101, x_102, x_103, x_104, x_105, x_100, x_106);
lean::dec(x_100);
return x_107;
}
}
obj* _init_l_Lean_Parser_Term_simpleBinder_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_25; obj* x_26; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_42; obj* x_43; obj* x_44; obj* x_46; obj* x_48; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_64; obj* x_65; obj* x_66; obj* x_68; obj* x_70; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; 
x_0 = lean::mk_string("(");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_string(" : ");
x_8 = l_String_trim(x_7);
lean::dec(x_7);
lean::inc(x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_11, 0, x_8);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_12, 0, x_8);
lean::closure_set(x_12, 1, x_5);
lean::closure_set(x_12, 2, x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_13, 0, x_5);
x_14 = lean::mk_string(")");
x_15 = l_String_trim(x_14);
lean::dec(x_14);
lean::inc(x_15);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_18, 0, x_15);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_19, 0, x_15);
lean::closure_set(x_19, 1, x_5);
lean::closure_set(x_19, 2, x_18);
x_20 = lean::box(0);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
lean::inc(x_13);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_13);
lean::cnstr_set(x_23, 1, x_21);
lean::inc(x_12);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_12);
lean::cnstr_set(x_25, 1, x_23);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
lean::inc(x_26);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_26);
lean::cnstr_set(x_28, 1, x_25);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_6);
lean::cnstr_set(x_29, 1, x_28);
x_30 = l_Lean_Parser_Term_simpleExplicitBinder;
x_31 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_31, 0, x_30);
lean::closure_set(x_31, 1, x_29);
x_32 = lean::mk_string("{");
x_33 = l_String_trim(x_32);
lean::dec(x_32);
lean::inc(x_33);
x_36 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_36, 0, x_33);
x_37 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_37, 0, x_33);
lean::closure_set(x_37, 1, x_5);
lean::closure_set(x_37, 2, x_36);
x_38 = lean::mk_string("}");
x_39 = l_String_trim(x_38);
lean::dec(x_38);
lean::inc(x_39);
x_42 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_42, 0, x_39);
x_43 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_43, 0, x_39);
lean::closure_set(x_43, 1, x_5);
lean::closure_set(x_43, 2, x_42);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_43);
lean::cnstr_set(x_44, 1, x_20);
lean::inc(x_13);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_13);
lean::cnstr_set(x_46, 1, x_44);
lean::inc(x_12);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_12);
lean::cnstr_set(x_48, 1, x_46);
lean::inc(x_26);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_26);
lean::cnstr_set(x_50, 1, x_48);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_37);
lean::cnstr_set(x_51, 1, x_50);
x_52 = l_Lean_Parser_Term_simpleImplicitBinder;
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_53, 0, x_52);
lean::closure_set(x_53, 1, x_51);
x_54 = lean::mk_string("\xe2\xa6\x83");
x_55 = l_String_trim(x_54);
lean::dec(x_54);
lean::inc(x_55);
x_58 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_58, 0, x_55);
x_59 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_59, 0, x_55);
lean::closure_set(x_59, 1, x_5);
lean::closure_set(x_59, 2, x_58);
x_60 = lean::mk_string("\xe2\xa6\x84");
x_61 = l_String_trim(x_60);
lean::dec(x_60);
lean::inc(x_61);
x_64 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_64, 0, x_61);
x_65 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_65, 0, x_61);
lean::closure_set(x_65, 1, x_5);
lean::closure_set(x_65, 2, x_64);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_65);
lean::cnstr_set(x_66, 1, x_20);
lean::inc(x_13);
x_68 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_68, 0, x_13);
lean::cnstr_set(x_68, 1, x_66);
lean::inc(x_12);
x_70 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_70, 0, x_12);
lean::cnstr_set(x_70, 1, x_68);
lean::inc(x_26);
x_72 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_72, 0, x_26);
lean::cnstr_set(x_72, 1, x_70);
x_73 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_73, 0, x_59);
lean::cnstr_set(x_73, 1, x_72);
x_74 = l_Lean_Parser_Term_simpleStrictImplicitBinder;
x_75 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_75, 0, x_74);
lean::closure_set(x_75, 1, x_73);
x_76 = lean::mk_string("[");
x_77 = l_String_trim(x_76);
lean::dec(x_76);
lean::inc(x_77);
x_80 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_80, 0, x_77);
x_81 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_81, 0, x_77);
lean::closure_set(x_81, 1, x_5);
lean::closure_set(x_81, 2, x_80);
x_82 = lean::mk_string("]");
x_83 = l_String_trim(x_82);
lean::dec(x_82);
lean::inc(x_83);
x_86 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_86, 0, x_83);
x_87 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_87, 0, x_83);
lean::closure_set(x_87, 1, x_5);
lean::closure_set(x_87, 2, x_86);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_87);
lean::cnstr_set(x_88, 1, x_20);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_13);
lean::cnstr_set(x_89, 1, x_88);
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_12);
lean::cnstr_set(x_90, 1, x_89);
x_91 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_91, 0, x_26);
lean::cnstr_set(x_91, 1, x_90);
x_92 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_92, 0, x_81);
lean::cnstr_set(x_92, 1, x_91);
x_93 = l_Lean_Parser_Term_simpleInstImplicitBinder;
x_94 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_94, 0, x_93);
lean::closure_set(x_94, 1, x_92);
x_95 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_95, 0, x_94);
lean::cnstr_set(x_95, 1, x_20);
x_96 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_96, 0, x_75);
lean::cnstr_set(x_96, 1, x_95);
x_97 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_97, 0, x_53);
lean::cnstr_set(x_97, 1, x_96);
x_98 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_98, 0, x_31);
lean::cnstr_set(x_98, 1, x_97);
x_99 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_99, 0, x_98);
lean::closure_set(x_99, 1, x_5);
x_100 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_100, 0, x_99);
lean::cnstr_set(x_100, 1, x_20);
return x_100;
}
}
obj* l_Lean_Parser_Term_simpleBinder_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_simpleBinder;
x_6 = l_Lean_Parser_Term_simpleBinder_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* l_Lean_Parser_Term_simpleBinder_View_toBinderInfo___main(obj* x_0) {
_start:
{
switch (lean::obj_tag(x_0)) {
case 0:
{
obj* x_1; obj* x_4; obj* x_6; obj* x_9; uint8 x_10; obj* x_11; obj* x_12; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::cnstr_get(x_1, 1);
lean::inc(x_4);
x_6 = lean::cnstr_get(x_1, 3);
lean::inc(x_6);
lean::dec(x_1);
x_9 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_9, 0, x_4);
lean::cnstr_set(x_9, 1, x_6);
x_10 = 0;
x_11 = lean::box(x_10);
x_12 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_9);
return x_12;
}
case 1:
{
obj* x_13; obj* x_16; obj* x_18; obj* x_21; uint8 x_22; obj* x_23; obj* x_24; 
x_13 = lean::cnstr_get(x_0, 0);
lean::inc(x_13);
lean::dec(x_0);
x_16 = lean::cnstr_get(x_13, 1);
lean::inc(x_16);
x_18 = lean::cnstr_get(x_13, 3);
lean::inc(x_18);
lean::dec(x_13);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_16);
lean::cnstr_set(x_21, 1, x_18);
x_22 = 1;
x_23 = lean::box(x_22);
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_21);
return x_24;
}
case 2:
{
obj* x_25; obj* x_28; obj* x_30; obj* x_33; uint8 x_34; obj* x_35; obj* x_36; 
x_25 = lean::cnstr_get(x_0, 0);
lean::inc(x_25);
lean::dec(x_0);
x_28 = lean::cnstr_get(x_25, 1);
lean::inc(x_28);
x_30 = lean::cnstr_get(x_25, 3);
lean::inc(x_30);
lean::dec(x_25);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_28);
lean::cnstr_set(x_33, 1, x_30);
x_34 = 2;
x_35 = lean::box(x_34);
x_36 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_33);
return x_36;
}
default:
{
obj* x_37; obj* x_40; obj* x_42; obj* x_45; uint8 x_46; obj* x_47; obj* x_48; 
x_37 = lean::cnstr_get(x_0, 0);
lean::inc(x_37);
lean::dec(x_0);
x_40 = lean::cnstr_get(x_37, 1);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_37, 3);
lean::inc(x_42);
lean::dec(x_37);
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_40);
lean::cnstr_set(x_45, 1, x_42);
x_46 = 3;
x_47 = lean::box(x_46);
x_48 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_48, 0, x_47);
lean::cnstr_set(x_48, 1, x_45);
return x_48;
}
}
}
}
obj* l_Lean_Parser_Term_simpleBinder_View_toBinderInfo(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Term_simpleBinder_View_toBinderInfo___main(x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_anonymousConstructor() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("anonymousConstructor");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_List_map___main___at_Lean_Parser_Term_tuple_HasView_x_27___elambda__1___spec__1(x_3);
x_9 = l_List_join___main___rarg(x_8);
x_10 = l_Lean_Parser_noKind;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
x_12 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_13 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_11);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::box(3);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_14);
x_17 = l_Lean_Parser_Term_anonymousConstructor;
x_18 = l_Lean_Parser_Syntax_mkNode(x_17, x_16);
return x_18;
}
else
{
obj* x_19; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_19 = lean::cnstr_get(x_5, 0);
lean::inc(x_19);
lean::dec(x_5);
x_22 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_12);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_11);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::box(3);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_24);
x_27 = l_Lean_Parser_Term_anonymousConstructor;
x_28 = l_Lean_Parser_Syntax_mkNode(x_27, x_26);
return x_28;
}
}
else
{
obj* x_29; obj* x_32; 
x_29 = lean::cnstr_get(x_1, 0);
lean::inc(x_29);
lean::dec(x_1);
x_32 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_32, 0, x_29);
if (lean::obj_tag(x_5) == 0)
{
obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; 
x_33 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_11);
lean::cnstr_set(x_34, 1, x_33);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_32);
lean::cnstr_set(x_35, 1, x_34);
x_36 = l_Lean_Parser_Term_anonymousConstructor;
x_37 = l_Lean_Parser_Syntax_mkNode(x_36, x_35);
return x_37;
}
else
{
obj* x_38; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; 
x_38 = lean::cnstr_get(x_5, 0);
lean::inc(x_38);
lean::dec(x_5);
x_41 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_41, 0, x_38);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_12);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_11);
lean::cnstr_set(x_43, 1, x_42);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_32);
lean::cnstr_set(x_44, 1, x_43);
x_45 = l_Lean_Parser_Term_anonymousConstructor;
x_46 = l_Lean_Parser_Syntax_mkNode(x_45, x_44);
return x_46;
}
}
}
}
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_anonymousConstructor_HasView_x_27___spec__1(obj* x_0, obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; 
x_3 = lean::box(0);
return x_3;
}
else
{
obj* x_4; 
x_4 = lean::cnstr_get(x_2, 1);
lean::inc(x_4);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_6 = lean::cnstr_get(x_2, 0);
if (lean::is_exclusive(x_2)) {
 lean::cnstr_release(x_2, 1);
 x_8 = x_2;
} else {
 lean::inc(x_6);
 lean::dec(x_2);
 x_8 = lean::box(0);
}
x_9 = lean::box(0);
x_10 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_10, 0, x_6);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::box(0);
if (lean::is_scalar(x_8)) {
 x_12 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_12 = x_8;
}
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
return x_12;
}
else
{
obj* x_13; obj* x_16; obj* x_18; obj* x_20; obj* x_21; 
x_13 = lean::cnstr_get(x_2, 0);
lean::inc(x_13);
lean::dec(x_2);
x_16 = lean::cnstr_get(x_4, 0);
x_18 = lean::cnstr_get(x_4, 1);
if (lean::is_exclusive(x_4)) {
 lean::cnstr_set(x_4, 0, lean::box(0));
 lean::cnstr_set(x_4, 1, lean::box(0));
 x_20 = x_4;
} else {
 lean::inc(x_16);
 lean::inc(x_18);
 lean::dec(x_4);
 x_20 = lean::box(0);
}
x_21 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_anonymousConstructor_HasView_x_27___spec__1(x_0, x_1, x_18);
switch (lean::obj_tag(x_16)) {
case 0:
{
obj* x_22; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_22 = lean::cnstr_get(x_16, 0);
lean::inc(x_22);
lean::dec(x_16);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_22);
x_26 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_26, 0, x_25);
x_27 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_27, 0, x_13);
lean::cnstr_set(x_27, 1, x_26);
if (lean::is_scalar(x_20)) {
 x_28 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_28 = x_20;
}
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_21);
return x_28;
}
case 3:
{
obj* x_29; obj* x_30; obj* x_31; 
x_29 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_13);
lean::cnstr_set(x_30, 1, x_29);
if (lean::is_scalar(x_20)) {
 x_31 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_31 = x_20;
}
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_21);
return x_31;
}
default:
{
obj* x_33; obj* x_34; obj* x_35; 
lean::dec(x_16);
x_33 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_34 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_34, 0, x_13);
lean::cnstr_set(x_34, 1, x_33);
if (lean::is_scalar(x_20)) {
 x_35 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_35 = x_20;
}
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_21);
return x_35;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::mk_string(",");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = l_Lean_Parser_Syntax_asNode___main(x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; obj* x_4; 
x_3 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
x_4 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_4, 0, x_0);
lean::cnstr_set(x_4, 1, x_3);
lean::cnstr_set(x_4, 2, x_0);
return x_4;
}
else
{
obj* x_5; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_5 = lean::cnstr_get(x_2, 0);
lean::inc(x_5);
lean::dec(x_2);
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
x_11 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__2;
x_12 = l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1___closed__1;
x_13 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_anonymousConstructor_HasView_x_27___spec__1(x_11, x_12, x_8);
x_14 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_14, 0, x_0);
lean::cnstr_set(x_14, 1, x_13);
lean::cnstr_set(x_14, 2, x_0);
return x_14;
}
}
}
obj* l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; 
x_36 = l_Lean_Parser_Syntax_asNode___main(x_28);
if (lean::obj_tag(x_36) == 0)
{
obj* x_37; 
x_37 = lean::box(0);
if (lean::obj_tag(x_27) == 0)
{
obj* x_38; obj* x_39; 
x_38 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
x_39 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_39, 0, x_18);
lean::cnstr_set(x_39, 1, x_38);
lean::cnstr_set(x_39, 2, x_37);
return x_39;
}
else
{
obj* x_40; 
x_40 = lean::cnstr_get(x_27, 0);
lean::inc(x_40);
lean::dec(x_27);
switch (lean::obj_tag(x_40)) {
case 0:
{
obj* x_43; obj* x_46; obj* x_47; obj* x_48; 
x_43 = lean::cnstr_get(x_40, 0);
lean::inc(x_43);
lean::dec(x_40);
x_46 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_46, 0, x_43);
x_47 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
x_48 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_48, 0, x_18);
lean::cnstr_set(x_48, 1, x_47);
lean::cnstr_set(x_48, 2, x_46);
return x_48;
}
case 3:
{
obj* x_49; obj* x_50; 
x_49 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
x_50 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_50, 0, x_18);
lean::cnstr_set(x_50, 1, x_49);
lean::cnstr_set(x_50, 2, x_37);
return x_50;
}
default:
{
obj* x_52; obj* x_53; 
lean::dec(x_40);
x_52 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
x_53 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_53, 0, x_18);
lean::cnstr_set(x_53, 1, x_52);
lean::cnstr_set(x_53, 2, x_37);
return x_53;
}
}
}
}
else
{
obj* x_54; obj* x_56; obj* x_57; obj* x_60; obj* x_61; obj* x_62; 
x_54 = lean::cnstr_get(x_36, 0);
if (lean::is_exclusive(x_36)) {
 lean::cnstr_set(x_36, 0, lean::box(0));
 x_56 = x_36;
} else {
 lean::inc(x_54);
 lean::dec(x_36);
 x_56 = lean::box(0);
}
x_57 = lean::cnstr_get(x_54, 1);
lean::inc(x_57);
lean::dec(x_54);
x_60 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__2;
x_61 = l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1___closed__1;
x_62 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_anonymousConstructor_HasView_x_27___spec__1(x_60, x_61, x_57);
if (lean::obj_tag(x_27) == 0)
{
obj* x_64; obj* x_65; 
lean::dec(x_56);
x_64 = lean::box(0);
x_65 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_65, 0, x_18);
lean::cnstr_set(x_65, 1, x_62);
lean::cnstr_set(x_65, 2, x_64);
return x_65;
}
else
{
obj* x_66; 
x_66 = lean::cnstr_get(x_27, 0);
lean::inc(x_66);
lean::dec(x_27);
switch (lean::obj_tag(x_66)) {
case 0:
{
obj* x_69; obj* x_72; obj* x_73; 
x_69 = lean::cnstr_get(x_66, 0);
lean::inc(x_69);
lean::dec(x_66);
if (lean::is_scalar(x_56)) {
 x_72 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_72 = x_56;
}
lean::cnstr_set(x_72, 0, x_69);
x_73 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_73, 0, x_18);
lean::cnstr_set(x_73, 1, x_62);
lean::cnstr_set(x_73, 2, x_72);
return x_73;
}
case 3:
{
obj* x_75; obj* x_76; 
lean::dec(x_56);
x_75 = lean::box(0);
x_76 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_76, 0, x_18);
lean::cnstr_set(x_76, 1, x_62);
lean::cnstr_set(x_76, 2, x_75);
return x_76;
}
default:
{
obj* x_79; obj* x_80; 
lean::dec(x_56);
lean::dec(x_66);
x_79 = lean::box(0);
x_80 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_80, 0, x_18);
lean::cnstr_set(x_80, 1, x_62);
lean::cnstr_set(x_80, 2, x_79);
return x_80;
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_anonymousConstructor_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_anonymousConstructor_HasView_x_27___spec__1___boxed(obj* x_0, obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_anonymousConstructor_HasView_x_27___spec__1(x_0, x_1, x_2);
lean::dec(x_0);
lean::dec(x_1);
return x_3;
}
}
obj* _init_l_Lean_Parser_Term_anonymousConstructor_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_anonymousConstructor_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_anonymousConstructor_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_18; obj* x_21; obj* x_24; 
x_0 = lean::mk_string("\xe2\x9f\xa8");
x_1 = l_Lean_Parser_maxPrec;
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = lean::mk_nat_obj(0ul);
x_5 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_4);
x_6 = lean::mk_string(",");
x_7 = l_Lean_Parser_symbol_tokens___rarg(x_6, x_4);
lean::dec(x_6);
x_9 = l_Lean_Parser_Combinators_sepBy_tokens___rarg(x_5, x_7);
lean::dec(x_7);
lean::dec(x_5);
x_12 = lean::mk_string("\xe2\x9f\xa9");
x_13 = l_Lean_Parser_symbol_tokens___rarg(x_12, x_4);
lean::dec(x_12);
x_15 = lean::box(0);
x_16 = l_Lean_Parser_List_cons_tokens___rarg(x_13, x_15);
lean::dec(x_13);
x_18 = l_Lean_Parser_List_cons_tokens___rarg(x_9, x_16);
lean::dec(x_16);
lean::dec(x_9);
x_21 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_18);
lean::dec(x_18);
lean::dec(x_2);
x_24 = l_Lean_Parser_tokens___rarg(x_21);
lean::dec(x_21);
return x_24;
}
}
obj* _init_l_Lean_Parser_Term_anonymousConstructor_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_13; obj* x_14; uint8 x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_0 = lean::mk_string("\xe2\x9f\xa8");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_nat_obj(0ul);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::mk_string(",");
x_10 = l_String_trim(x_9);
lean::dec(x_9);
lean::inc(x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_13, 0, x_10);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_14, 0, x_10);
lean::closure_set(x_14, 1, x_7);
lean::closure_set(x_14, 2, x_13);
x_15 = 1;
x_16 = lean::box(x_15);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_sepBy___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_17, 0, x_8);
lean::closure_set(x_17, 1, x_14);
lean::closure_set(x_17, 2, x_16);
x_18 = lean::mk_string("\xe2\x9f\xa9");
x_19 = l_String_trim(x_18);
lean::dec(x_18);
lean::inc(x_19);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_22, 0, x_19);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_23, 0, x_19);
lean::closure_set(x_23, 1, x_7);
lean::closure_set(x_23, 2, x_22);
x_24 = lean::box(0);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_23);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_17);
lean::cnstr_set(x_26, 1, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_6);
lean::cnstr_set(x_27, 1, x_26);
x_28 = l_Lean_Parser_TermParserM_Monad;
x_29 = l_Lean_Parser_TermParserM_MonadExcept;
x_30 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_31 = l_Lean_Parser_TermParserM_Alternative;
x_32 = l_Lean_Parser_Term_anonymousConstructor;
x_33 = l_Lean_Parser_Term_anonymousConstructor_HasView;
x_34 = l_Lean_Parser_Combinators_node_view___rarg(x_28, x_29, x_30, x_31, x_32, x_27, x_33);
lean::dec(x_27);
return x_34;
}
}
obj* _init_l_Lean_Parser_Term_anonymousConstructor_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_13; obj* x_14; uint8 x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_0 = lean::mk_string("\xe2\x9f\xa8");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_nat_obj(0ul);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::mk_string(",");
x_10 = l_String_trim(x_9);
lean::dec(x_9);
lean::inc(x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_13, 0, x_10);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_14, 0, x_10);
lean::closure_set(x_14, 1, x_7);
lean::closure_set(x_14, 2, x_13);
x_15 = 1;
x_16 = lean::box(x_15);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_sepBy___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_17, 0, x_8);
lean::closure_set(x_17, 1, x_14);
lean::closure_set(x_17, 2, x_16);
x_18 = lean::mk_string("\xe2\x9f\xa9");
x_19 = l_String_trim(x_18);
lean::dec(x_18);
lean::inc(x_19);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_22, 0, x_19);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_23, 0, x_19);
lean::closure_set(x_23, 1, x_7);
lean::closure_set(x_23, 2, x_22);
x_24 = lean::box(0);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_23);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_17);
lean::cnstr_set(x_26, 1, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_6);
lean::cnstr_set(x_27, 1, x_26);
return x_27;
}
}
obj* l_Lean_Parser_Term_anonymousConstructor_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_anonymousConstructor;
x_6 = l_Lean_Parser_Term_anonymousConstructor_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_explicitBinderContent___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("explicitBinderContent");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_explicitBinderContent(uint8 x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Term_explicitBinderContent___closed__1;
return x_1;
}
}
obj* l_Lean_Parser_Term_explicitBinderContent___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_explicitBinderContent(x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___elambda__1(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; obj* x_6; obj* x_7; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = l_Lean_Parser_command_notationLike_HasView;
x_7 = lean::cnstr_get(x_6, 1);
lean::inc(x_7);
lean::dec(x_6);
x_10 = lean::apply_1(x_7, x_3);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_10);
lean::cnstr_set(x_11, 1, x_2);
x_12 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_13 = l_Lean_Parser_Syntax_mkNode(x_12, x_11);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_2);
x_15 = l_Lean_Parser_Syntax_mkNode(x_0, x_14);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_16 = lean::cnstr_get(x_1, 0);
lean::inc(x_16);
lean::dec(x_1);
x_19 = l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1(x_16);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_2);
x_21 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_22 = l_Lean_Parser_Syntax_mkNode(x_21, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_2);
x_24 = l_Lean_Parser_Syntax_mkNode(x_0, x_23);
return x_24;
}
}
}
obj* _init_l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_command_notationLike_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_explicitBinderContent___closed__1;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
uint8 x_58; obj* x_59; obj* x_60; obj* x_63; obj* x_64; 
x_58 = 0;
x_59 = l_Lean_Parser_Term_binderContent_HasView_x_27(x_58);
x_60 = lean::cnstr_get(x_59, 0);
lean::inc(x_60);
lean::dec(x_59);
x_63 = lean::apply_1(x_60, x_52);
x_64 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_64, 0, x_63);
return x_64;
}
else
{
obj* x_65; obj* x_66; obj* x_69; obj* x_70; 
x_65 = l_Lean_Parser_command_notationLike_HasView;
x_66 = lean::cnstr_get(x_65, 0);
lean::inc(x_66);
lean::dec(x_65);
x_69 = lean::apply_1(x_66, x_52);
x_70 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_70, 0, x_69);
return x_70;
}
}
else
{
obj* x_74; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_74 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_74;
}
}
}
}
}
}
}
else
{
obj* x_77; 
lean::dec(x_8);
lean::dec(x_17);
x_77 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_77;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___closed__1() {
_start:
{
obj* x_0; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1), 1, 0);
return x_0;
}
}
obj* l_Lean_Parser_Term_explicitBinderContent_HasView_x_27(uint8 x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_1 = l_Lean_Parser_Term_explicitBinderContent(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___elambda__1), 2, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___closed__1;
x_4 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
return x_4;
}
}
obj* l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27(x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_explicitBinderContent_HasView(uint8 x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27(x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_explicitBinderContent_HasView___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_explicitBinderContent_HasView(x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_explicitBinder___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("explicitBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_explicitBinder(uint8 x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Term_explicitBinder___closed__1;
return x_1;
}
}
obj* l_Lean_Parser_Term_explicitBinder___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_explicitBinder(x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1___closed__1() {
_start:
{
uint8 x_0; obj* x_1; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_explicitBinder(x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; uint8 x_8; obj* x_9; obj* x_10; obj* x_13; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = 0;
x_9 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27(x_8);
x_10 = lean::cnstr_get(x_9, 1);
lean::inc(x_10);
lean::dec(x_9);
x_13 = lean::apply_1(x_10, x_3);
x_14 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
x_15 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_13);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::box(3);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_16);
x_19 = l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1___closed__1;
x_20 = l_Lean_Parser_Syntax_mkNode(x_19, x_18);
return x_20;
}
else
{
obj* x_21; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; 
x_21 = lean::cnstr_get(x_5, 0);
lean::inc(x_21);
lean::dec(x_5);
x_24 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_24, 0, x_21);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_14);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_13);
lean::cnstr_set(x_26, 1, x_25);
x_27 = lean::box(3);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_26);
x_29 = l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1___closed__1;
x_30 = l_Lean_Parser_Syntax_mkNode(x_29, x_28);
return x_30;
}
}
else
{
obj* x_31; obj* x_34; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
lean::dec(x_1);
x_34 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_34, 0, x_31);
if (lean::obj_tag(x_5) == 0)
{
obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_35 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_13);
lean::cnstr_set(x_36, 1, x_35);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_34);
lean::cnstr_set(x_37, 1, x_36);
x_38 = l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1___closed__1;
x_39 = l_Lean_Parser_Syntax_mkNode(x_38, x_37);
return x_39;
}
else
{
obj* x_40; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; 
x_40 = lean::cnstr_get(x_5, 0);
lean::inc(x_40);
lean::dec(x_5);
x_43 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_43, 0, x_40);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_43);
lean::cnstr_set(x_44, 1, x_14);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_13);
lean::cnstr_set(x_45, 1, x_44);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_34);
lean::cnstr_set(x_46, 1, x_45);
x_47 = l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1___closed__1;
x_48 = l_Lean_Parser_Syntax_mkNode(x_47, x_46);
return x_48;
}
}
}
}
obj* _init_l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__1() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27(x_0);
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; uint8 x_1; obj* x_2; obj* x_3; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = 0;
x_2 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27(x_1);
x_3 = lean::cnstr_get(x_2, 0);
lean::inc(x_3);
lean::dec(x_2);
x_6 = lean::box(3);
x_7 = lean::apply_1(x_3, x_6);
x_8 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_8, 0, x_0);
lean::cnstr_set(x_8, 1, x_7);
lean::cnstr_set(x_8, 2, x_0);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__2;
return x_0;
}
}
obj* l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_9; 
x_9 = l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__3;
return x_9;
}
else
{
obj* x_10; obj* x_13; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
lean::dec(x_10);
if (lean::obj_tag(x_13) == 0)
{
obj* x_16; 
x_16 = lean::box(3);
x_5 = x_13;
x_6 = x_16;
goto lbl_7;
}
else
{
obj* x_17; obj* x_19; 
x_17 = lean::cnstr_get(x_13, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_13, 1);
lean::inc(x_19);
lean::dec(x_13);
x_5 = x_19;
x_6 = x_17;
goto lbl_7;
}
}
lbl_4:
{
uint8 x_22; obj* x_23; obj* x_24; obj* x_27; 
x_22 = 0;
x_23 = l_Lean_Parser_Term_explicitBinderContent_HasView_x_27(x_22);
x_24 = lean::cnstr_get(x_23, 0);
lean::inc(x_24);
lean::dec(x_23);
x_27 = lean::apply_1(x_24, x_2);
if (lean::obj_tag(x_3) == 0)
{
obj* x_28; obj* x_29; 
x_28 = lean::box(0);
x_29 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_29, 0, x_1);
lean::cnstr_set(x_29, 1, x_27);
lean::cnstr_set(x_29, 2, x_28);
return x_29;
}
else
{
obj* x_30; 
x_30 = lean::cnstr_get(x_3, 0);
lean::inc(x_30);
lean::dec(x_3);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_30, 0);
lean::inc(x_33);
lean::dec(x_30);
x_36 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_36, 0, x_33);
x_37 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_37, 0, x_1);
lean::cnstr_set(x_37, 1, x_27);
lean::cnstr_set(x_37, 2, x_36);
return x_37;
}
case 3:
{
obj* x_38; obj* x_39; 
x_38 = lean::box(0);
x_39 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_39, 0, x_1);
lean::cnstr_set(x_39, 1, x_27);
lean::cnstr_set(x_39, 2, x_38);
return x_39;
}
default:
{
obj* x_41; obj* x_42; 
lean::dec(x_30);
x_41 = lean::box(0);
x_42 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_42, 0, x_1);
lean::cnstr_set(x_42, 1, x_27);
lean::cnstr_set(x_42, 2, x_41);
return x_42;
}
}
}
}
lbl_7:
{
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_43; obj* x_46; 
x_43 = lean::cnstr_get(x_6, 0);
lean::inc(x_43);
lean::dec(x_6);
x_46 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_46, 0, x_43);
if (lean::obj_tag(x_5) == 0)
{
obj* x_47; obj* x_48; obj* x_49; 
x_47 = lean::box(0);
x_48 = l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__1;
x_49 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_49, 0, x_46);
lean::cnstr_set(x_49, 1, x_48);
lean::cnstr_set(x_49, 2, x_47);
return x_49;
}
else
{
obj* x_50; obj* x_52; 
x_50 = lean::cnstr_get(x_5, 0);
lean::inc(x_50);
x_52 = lean::cnstr_get(x_5, 1);
lean::inc(x_52);
lean::dec(x_5);
x_1 = x_46;
x_2 = x_50;
x_3 = x_52;
goto lbl_4;
}
}
case 3:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_55; 
x_55 = l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__2;
return x_55;
}
else
{
obj* x_56; obj* x_58; obj* x_61; 
x_56 = lean::cnstr_get(x_5, 0);
lean::inc(x_56);
x_58 = lean::cnstr_get(x_5, 1);
lean::inc(x_58);
lean::dec(x_5);
x_61 = lean::box(0);
x_1 = x_61;
x_2 = x_56;
x_3 = x_58;
goto lbl_4;
}
}
default:
{
lean::dec(x_6);
if (lean::obj_tag(x_5) == 0)
{
obj* x_63; 
x_63 = l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__2;
return x_63;
}
else
{
obj* x_64; obj* x_66; obj* x_69; 
x_64 = lean::cnstr_get(x_5, 0);
lean::inc(x_64);
x_66 = lean::cnstr_get(x_5, 1);
lean::inc(x_66);
lean::dec(x_5);
x_69 = lean::box(0);
x_1 = x_69;
x_2 = x_64;
x_3 = x_66;
goto lbl_4;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_explicitBinder_HasView_x_27___closed__1() {
_start:
{
obj* x_0; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1), 1, 0);
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_explicitBinder_HasView_x_27___closed__2() {
_start:
{
obj* x_0; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1), 1, 0);
return x_0;
}
}
obj* l_Lean_Parser_Term_explicitBinder_HasView_x_27(uint8 x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; 
x_1 = l_Lean_Parser_Term_explicitBinder_HasView_x_27___closed__1;
x_2 = l_Lean_Parser_Term_explicitBinder_HasView_x_27___closed__2;
x_3 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_3, 0, x_1);
lean::cnstr_set(x_3, 1, x_2);
return x_3;
}
}
obj* l_Lean_Parser_Term_explicitBinder_HasView_x_27___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_explicitBinder_HasView_x_27(x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_explicitBinder_HasView(uint8 x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Term_explicitBinder_HasView_x_27(x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_explicitBinder_HasView___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_explicitBinder_HasView(x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_implicitBinder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("implicitBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_implicitBinder_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1(x_3);
x_9 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_10 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_8);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::box(3);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_11);
x_14 = l_Lean_Parser_Term_implicitBinder;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_16 = lean::cnstr_get(x_5, 0);
lean::inc(x_16);
lean::dec(x_5);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_16);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_9);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_8);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::box(3);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_21);
x_24 = l_Lean_Parser_Term_implicitBinder;
x_25 = l_Lean_Parser_Syntax_mkNode(x_24, x_23);
return x_25;
}
}
else
{
obj* x_26; obj* x_29; 
x_26 = lean::cnstr_get(x_1, 0);
lean::inc(x_26);
lean::dec(x_1);
x_29 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_29, 0, x_26);
if (lean::obj_tag(x_5) == 0)
{
obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_30 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_8);
lean::cnstr_set(x_31, 1, x_30);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_29);
lean::cnstr_set(x_32, 1, x_31);
x_33 = l_Lean_Parser_Term_implicitBinder;
x_34 = l_Lean_Parser_Syntax_mkNode(x_33, x_32);
return x_34;
}
else
{
obj* x_35; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; 
x_35 = lean::cnstr_get(x_5, 0);
lean::inc(x_35);
lean::dec(x_5);
x_38 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_38, 0, x_35);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_9);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_8);
lean::cnstr_set(x_40, 1, x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_29);
lean::cnstr_set(x_41, 1, x_40);
x_42 = l_Lean_Parser_Term_implicitBinder;
x_43 = l_Lean_Parser_Syntax_mkNode(x_42, x_41);
return x_43;
}
}
}
}
obj* _init_l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__1() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_binderContent_HasView_x_27(x_0);
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; uint8 x_1; obj* x_2; obj* x_3; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = 0;
x_2 = l_Lean_Parser_Term_binderContent_HasView_x_27(x_1);
x_3 = lean::cnstr_get(x_2, 0);
lean::inc(x_3);
lean::dec(x_2);
x_6 = lean::box(3);
x_7 = lean::apply_1(x_3, x_6);
x_8 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_8, 0, x_0);
lean::cnstr_set(x_8, 1, x_7);
lean::cnstr_set(x_8, 2, x_0);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__2;
return x_0;
}
}
obj* l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_9; 
x_9 = l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__3;
return x_9;
}
else
{
obj* x_10; obj* x_13; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
lean::dec(x_10);
if (lean::obj_tag(x_13) == 0)
{
obj* x_16; 
x_16 = lean::box(3);
x_5 = x_13;
x_6 = x_16;
goto lbl_7;
}
else
{
obj* x_17; obj* x_19; 
x_17 = lean::cnstr_get(x_13, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_13, 1);
lean::inc(x_19);
lean::dec(x_13);
x_5 = x_19;
x_6 = x_17;
goto lbl_7;
}
}
lbl_4:
{
uint8 x_22; obj* x_23; obj* x_24; obj* x_27; 
x_22 = 0;
x_23 = l_Lean_Parser_Term_binderContent_HasView_x_27(x_22);
x_24 = lean::cnstr_get(x_23, 0);
lean::inc(x_24);
lean::dec(x_23);
x_27 = lean::apply_1(x_24, x_2);
if (lean::obj_tag(x_3) == 0)
{
obj* x_28; obj* x_29; 
x_28 = lean::box(0);
x_29 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_29, 0, x_1);
lean::cnstr_set(x_29, 1, x_27);
lean::cnstr_set(x_29, 2, x_28);
return x_29;
}
else
{
obj* x_30; 
x_30 = lean::cnstr_get(x_3, 0);
lean::inc(x_30);
lean::dec(x_3);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_30, 0);
lean::inc(x_33);
lean::dec(x_30);
x_36 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_36, 0, x_33);
x_37 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_37, 0, x_1);
lean::cnstr_set(x_37, 1, x_27);
lean::cnstr_set(x_37, 2, x_36);
return x_37;
}
case 3:
{
obj* x_38; obj* x_39; 
x_38 = lean::box(0);
x_39 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_39, 0, x_1);
lean::cnstr_set(x_39, 1, x_27);
lean::cnstr_set(x_39, 2, x_38);
return x_39;
}
default:
{
obj* x_41; obj* x_42; 
lean::dec(x_30);
x_41 = lean::box(0);
x_42 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_42, 0, x_1);
lean::cnstr_set(x_42, 1, x_27);
lean::cnstr_set(x_42, 2, x_41);
return x_42;
}
}
}
}
lbl_7:
{
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_43; obj* x_46; 
x_43 = lean::cnstr_get(x_6, 0);
lean::inc(x_43);
lean::dec(x_6);
x_46 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_46, 0, x_43);
if (lean::obj_tag(x_5) == 0)
{
obj* x_47; obj* x_48; obj* x_49; 
x_47 = lean::box(0);
x_48 = l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__1;
x_49 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_49, 0, x_46);
lean::cnstr_set(x_49, 1, x_48);
lean::cnstr_set(x_49, 2, x_47);
return x_49;
}
else
{
obj* x_50; obj* x_52; 
x_50 = lean::cnstr_get(x_5, 0);
lean::inc(x_50);
x_52 = lean::cnstr_get(x_5, 1);
lean::inc(x_52);
lean::dec(x_5);
x_1 = x_46;
x_2 = x_50;
x_3 = x_52;
goto lbl_4;
}
}
case 3:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_55; 
x_55 = l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__2;
return x_55;
}
else
{
obj* x_56; obj* x_58; obj* x_61; 
x_56 = lean::cnstr_get(x_5, 0);
lean::inc(x_56);
x_58 = lean::cnstr_get(x_5, 1);
lean::inc(x_58);
lean::dec(x_5);
x_61 = lean::box(0);
x_1 = x_61;
x_2 = x_56;
x_3 = x_58;
goto lbl_4;
}
}
default:
{
lean::dec(x_6);
if (lean::obj_tag(x_5) == 0)
{
obj* x_63; 
x_63 = l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__2;
return x_63;
}
else
{
obj* x_64; obj* x_66; obj* x_69; 
x_64 = lean::cnstr_get(x_5, 0);
lean::inc(x_64);
x_66 = lean::cnstr_get(x_5, 1);
lean::inc(x_66);
lean::dec(x_5);
x_69 = lean::box(0);
x_1 = x_69;
x_2 = x_64;
x_3 = x_66;
goto lbl_4;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_implicitBinder_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_implicitBinder_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_implicitBinder_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_implicitBinder_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_strictImplicitBinder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("strictImplicitBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1(x_3);
x_9 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_10 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_8);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::box(3);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_11);
x_14 = l_Lean_Parser_Term_strictImplicitBinder;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_16 = lean::cnstr_get(x_5, 0);
lean::inc(x_16);
lean::dec(x_5);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_16);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_9);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_8);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::box(3);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_21);
x_24 = l_Lean_Parser_Term_strictImplicitBinder;
x_25 = l_Lean_Parser_Syntax_mkNode(x_24, x_23);
return x_25;
}
}
else
{
obj* x_26; obj* x_29; 
x_26 = lean::cnstr_get(x_1, 0);
lean::inc(x_26);
lean::dec(x_1);
x_29 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_29, 0, x_26);
if (lean::obj_tag(x_5) == 0)
{
obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_30 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_8);
lean::cnstr_set(x_31, 1, x_30);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_29);
lean::cnstr_set(x_32, 1, x_31);
x_33 = l_Lean_Parser_Term_strictImplicitBinder;
x_34 = l_Lean_Parser_Syntax_mkNode(x_33, x_32);
return x_34;
}
else
{
obj* x_35; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; 
x_35 = lean::cnstr_get(x_5, 0);
lean::inc(x_35);
lean::dec(x_5);
x_38 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_38, 0, x_35);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_9);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_8);
lean::cnstr_set(x_40, 1, x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_29);
lean::cnstr_set(x_41, 1, x_40);
x_42 = l_Lean_Parser_Term_strictImplicitBinder;
x_43 = l_Lean_Parser_Syntax_mkNode(x_42, x_41);
return x_43;
}
}
}
}
obj* _init_l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; uint8 x_1; obj* x_2; obj* x_3; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = 0;
x_2 = l_Lean_Parser_Term_binderContent_HasView_x_27(x_1);
x_3 = lean::cnstr_get(x_2, 0);
lean::inc(x_3);
lean::dec(x_2);
x_6 = lean::box(3);
x_7 = lean::apply_1(x_3, x_6);
x_8 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_8, 0, x_0);
lean::cnstr_set(x_8, 1, x_7);
lean::cnstr_set(x_8, 2, x_0);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1___closed__1;
return x_0;
}
}
obj* l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_9; 
x_9 = l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1___closed__2;
return x_9;
}
else
{
obj* x_10; obj* x_13; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
lean::dec(x_10);
if (lean::obj_tag(x_13) == 0)
{
obj* x_16; 
x_16 = lean::box(3);
x_5 = x_13;
x_6 = x_16;
goto lbl_7;
}
else
{
obj* x_17; obj* x_19; 
x_17 = lean::cnstr_get(x_13, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_13, 1);
lean::inc(x_19);
lean::dec(x_13);
x_5 = x_19;
x_6 = x_17;
goto lbl_7;
}
}
lbl_4:
{
uint8 x_22; obj* x_23; obj* x_24; obj* x_27; 
x_22 = 0;
x_23 = l_Lean_Parser_Term_binderContent_HasView_x_27(x_22);
x_24 = lean::cnstr_get(x_23, 0);
lean::inc(x_24);
lean::dec(x_23);
x_27 = lean::apply_1(x_24, x_2);
if (lean::obj_tag(x_3) == 0)
{
obj* x_28; obj* x_29; 
x_28 = lean::box(0);
x_29 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_29, 0, x_1);
lean::cnstr_set(x_29, 1, x_27);
lean::cnstr_set(x_29, 2, x_28);
return x_29;
}
else
{
obj* x_30; 
x_30 = lean::cnstr_get(x_3, 0);
lean::inc(x_30);
lean::dec(x_3);
switch (lean::obj_tag(x_30)) {
case 0:
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_30, 0);
lean::inc(x_33);
lean::dec(x_30);
x_36 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_36, 0, x_33);
x_37 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_37, 0, x_1);
lean::cnstr_set(x_37, 1, x_27);
lean::cnstr_set(x_37, 2, x_36);
return x_37;
}
case 3:
{
obj* x_38; obj* x_39; 
x_38 = lean::box(0);
x_39 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_39, 0, x_1);
lean::cnstr_set(x_39, 1, x_27);
lean::cnstr_set(x_39, 2, x_38);
return x_39;
}
default:
{
obj* x_41; obj* x_42; 
lean::dec(x_30);
x_41 = lean::box(0);
x_42 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_42, 0, x_1);
lean::cnstr_set(x_42, 1, x_27);
lean::cnstr_set(x_42, 2, x_41);
return x_42;
}
}
}
}
lbl_7:
{
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_43; obj* x_46; 
x_43 = lean::cnstr_get(x_6, 0);
lean::inc(x_43);
lean::dec(x_6);
x_46 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_46, 0, x_43);
if (lean::obj_tag(x_5) == 0)
{
obj* x_47; obj* x_48; obj* x_49; 
x_47 = lean::box(0);
x_48 = l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__1;
x_49 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_49, 0, x_46);
lean::cnstr_set(x_49, 1, x_48);
lean::cnstr_set(x_49, 2, x_47);
return x_49;
}
else
{
obj* x_50; obj* x_52; 
x_50 = lean::cnstr_get(x_5, 0);
lean::inc(x_50);
x_52 = lean::cnstr_get(x_5, 1);
lean::inc(x_52);
lean::dec(x_5);
x_1 = x_46;
x_2 = x_50;
x_3 = x_52;
goto lbl_4;
}
}
case 3:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_55; 
x_55 = l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1___closed__1;
return x_55;
}
else
{
obj* x_56; obj* x_58; obj* x_61; 
x_56 = lean::cnstr_get(x_5, 0);
lean::inc(x_56);
x_58 = lean::cnstr_get(x_5, 1);
lean::inc(x_58);
lean::dec(x_5);
x_61 = lean::box(0);
x_1 = x_61;
x_2 = x_56;
x_3 = x_58;
goto lbl_4;
}
}
default:
{
lean::dec(x_6);
if (lean::obj_tag(x_5) == 0)
{
obj* x_63; 
x_63 = l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1___closed__1;
return x_63;
}
else
{
obj* x_64; obj* x_66; obj* x_69; 
x_64 = lean::cnstr_get(x_5, 0);
lean::inc(x_64);
x_66 = lean::cnstr_get(x_5, 1);
lean::inc(x_66);
lean::dec(x_5);
x_69 = lean::box(0);
x_1 = x_69;
x_2 = x_64;
x_3 = x_66;
goto lbl_4;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_strictImplicitBinder_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_instImplicitNamedBinder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("instImplicitNamedBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_1);
x_9 = lean::box(0);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_5);
lean::cnstr_set(x_10, 1, x_9);
if (lean::obj_tag(x_3) == 0)
{
obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_11 = lean::box(3);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_8);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_Lean_Parser_Term_instImplicitNamedBinder;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_16 = lean::cnstr_get(x_3, 0);
lean::inc(x_16);
lean::dec(x_3);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_16);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_10);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_8);
lean::cnstr_set(x_21, 1, x_20);
x_22 = l_Lean_Parser_Term_instImplicitNamedBinder;
x_23 = l_Lean_Parser_Syntax_mkNode(x_22, x_21);
return x_23;
}
}
}
obj* _init_l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOTAnIdent");
lean::inc(x_1);
x_3 = l_Lean_Parser_Substring_ofString(x_1);
x_4 = lean::box(0);
x_5 = lean_name_mk_string(x_4, x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_7, 0, x_0);
lean::cnstr_set(x_7, 1, x_3);
lean::cnstr_set(x_7, 2, x_5);
lean::cnstr_set(x_7, 3, x_6);
lean::cnstr_set(x_7, 4, x_6);
x_8 = lean::box(3);
x_9 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_0);
lean::cnstr_set(x_9, 2, x_8);
return x_9;
}
}
obj* _init_l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__1;
return x_0;
}
}
obj* l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 1:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_20; obj* x_23; obj* x_24; obj* x_25; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::box(0);
x_24 = lean::box(3);
x_25 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_25, 0, x_20);
lean::cnstr_set(x_25, 1, x_23);
lean::cnstr_set(x_25, 2, x_24);
return x_25;
}
else
{
obj* x_26; 
x_26 = lean::cnstr_get(x_1, 0);
lean::inc(x_26);
switch (lean::obj_tag(x_26)) {
case 0:
{
obj* x_28; obj* x_31; obj* x_34; obj* x_37; 
x_28 = lean::cnstr_get(x_2, 0);
lean::inc(x_28);
lean::dec(x_2);
x_31 = lean::cnstr_get(x_1, 1);
lean::inc(x_31);
lean::dec(x_1);
x_34 = lean::cnstr_get(x_26, 0);
lean::inc(x_34);
lean::dec(x_26);
x_37 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_37, 0, x_34);
if (lean::obj_tag(x_31) == 0)
{
obj* x_38; obj* x_39; 
x_38 = lean::box(3);
x_39 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_39, 0, x_28);
lean::cnstr_set(x_39, 1, x_37);
lean::cnstr_set(x_39, 2, x_38);
return x_39;
}
else
{
obj* x_40; obj* x_43; 
x_40 = lean::cnstr_get(x_31, 0);
lean::inc(x_40);
lean::dec(x_31);
x_43 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_43, 0, x_28);
lean::cnstr_set(x_43, 1, x_37);
lean::cnstr_set(x_43, 2, x_40);
return x_43;
}
}
case 3:
{
obj* x_44; obj* x_47; obj* x_50; 
x_44 = lean::cnstr_get(x_2, 0);
lean::inc(x_44);
lean::dec(x_2);
x_47 = lean::cnstr_get(x_1, 1);
lean::inc(x_47);
lean::dec(x_1);
x_50 = lean::box(0);
if (lean::obj_tag(x_47) == 0)
{
obj* x_51; obj* x_52; 
x_51 = lean::box(3);
x_52 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_52, 0, x_44);
lean::cnstr_set(x_52, 1, x_50);
lean::cnstr_set(x_52, 2, x_51);
return x_52;
}
else
{
obj* x_53; obj* x_56; 
x_53 = lean::cnstr_get(x_47, 0);
lean::inc(x_53);
lean::dec(x_47);
x_56 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_56, 0, x_44);
lean::cnstr_set(x_56, 1, x_50);
lean::cnstr_set(x_56, 2, x_53);
return x_56;
}
}
default:
{
obj* x_58; obj* x_61; obj* x_64; 
lean::dec(x_26);
x_58 = lean::cnstr_get(x_2, 0);
lean::inc(x_58);
lean::dec(x_2);
x_61 = lean::cnstr_get(x_1, 1);
lean::inc(x_61);
lean::dec(x_1);
x_64 = lean::box(0);
if (lean::obj_tag(x_61) == 0)
{
obj* x_65; obj* x_66; 
x_65 = lean::box(3);
x_66 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_66, 0, x_58);
lean::cnstr_set(x_66, 1, x_64);
lean::cnstr_set(x_66, 2, x_65);
return x_66;
}
else
{
obj* x_67; obj* x_70; 
x_67 = lean::cnstr_get(x_61, 0);
lean::inc(x_67);
lean::dec(x_61);
x_70 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_70, 0, x_58);
lean::cnstr_set(x_70, 1, x_64);
lean::cnstr_set(x_70, 2, x_67);
return x_70;
}
}
}
}
}
case 3:
{
obj* x_71; 
x_71 = lean::box(0);
x_18 = x_71;
goto lbl_19;
}
default:
{
obj* x_73; 
lean::dec(x_2);
x_73 = lean::box(0);
x_18 = x_73;
goto lbl_19;
}
}
lbl_19:
{
lean::dec(x_18);
if (lean::obj_tag(x_1) == 0)
{
obj* x_75; 
x_75 = l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__1;
return x_75;
}
else
{
obj* x_76; obj* x_78; obj* x_81; 
x_76 = lean::cnstr_get(x_1, 0);
lean::inc(x_76);
x_78 = lean::cnstr_get(x_1, 1);
lean::inc(x_78);
lean::dec(x_1);
x_81 = lean::box(0);
switch (lean::obj_tag(x_76)) {
case 0:
{
obj* x_82; obj* x_85; 
x_82 = lean::cnstr_get(x_76, 0);
lean::inc(x_82);
lean::dec(x_76);
x_85 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_85, 0, x_82);
if (lean::obj_tag(x_78) == 0)
{
obj* x_86; obj* x_87; obj* x_88; 
x_86 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_87 = lean::box(3);
x_88 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_88, 0, x_86);
lean::cnstr_set(x_88, 1, x_85);
lean::cnstr_set(x_88, 2, x_87);
return x_88;
}
else
{
obj* x_89; obj* x_92; obj* x_93; 
x_89 = lean::cnstr_get(x_78, 0);
lean::inc(x_89);
lean::dec(x_78);
x_92 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_93 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_93, 0, x_92);
lean::cnstr_set(x_93, 1, x_85);
lean::cnstr_set(x_93, 2, x_89);
return x_93;
}
}
case 3:
{
if (lean::obj_tag(x_78) == 0)
{
obj* x_94; 
x_94 = l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__1;
return x_94;
}
else
{
obj* x_95; obj* x_98; obj* x_99; 
x_95 = lean::cnstr_get(x_78, 0);
lean::inc(x_95);
lean::dec(x_78);
x_98 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_99 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_99, 0, x_98);
lean::cnstr_set(x_99, 1, x_81);
lean::cnstr_set(x_99, 2, x_95);
return x_99;
}
}
default:
{
lean::dec(x_76);
if (lean::obj_tag(x_78) == 0)
{
obj* x_101; 
x_101 = l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__1;
return x_101;
}
else
{
obj* x_102; obj* x_105; obj* x_106; 
x_102 = lean::cnstr_get(x_78, 0);
lean::inc(x_102);
lean::dec(x_78);
x_105 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_106 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_106, 0, x_105);
lean::cnstr_set(x_106, 1, x_81);
lean::cnstr_set(x_106, 2, x_102);
return x_106;
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_instImplicitNamedBinder_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_instImplicitAnonymousBinder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("instImplicitAnonymousBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_1 = lean::box(0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
x_3 = l_Lean_Parser_Term_instImplicitAnonymousBinder;
x_4 = l_Lean_Parser_Syntax_mkNode(x_3, x_2);
return x_4;
}
}
obj* l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::box(3);
return x_2;
}
else
{
obj* x_3; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_9; 
x_9 = lean::box(3);
return x_9;
}
else
{
obj* x_10; 
x_10 = lean::cnstr_get(x_6, 0);
lean::inc(x_10);
lean::dec(x_6);
return x_10;
}
}
}
}
obj* _init_l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_instImplicitBinderContent() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("instImplicitBinderContent");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_Lean_Parser_Term_instImplicitNamedBinder_HasView;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_12 = l_Lean_Parser_Syntax_mkNode(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_Lean_Parser_Term_instImplicitBinderContent;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_26 = l_Lean_Parser_Syntax_mkNode(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_Lean_Parser_Term_instImplicitBinderContent;
x_29 = l_Lean_Parser_Syntax_mkNode(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_instImplicitNamedBinder_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("instImplicitBinderContent");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__2;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
obj* x_58; obj* x_59; obj* x_62; obj* x_63; 
x_58 = l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView;
x_59 = lean::cnstr_get(x_58, 0);
lean::inc(x_59);
lean::dec(x_58);
x_62 = lean::apply_1(x_59, x_52);
x_63 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_63, 0, x_62);
return x_63;
}
else
{
obj* x_64; obj* x_65; obj* x_68; obj* x_69; 
x_64 = l_Lean_Parser_Term_instImplicitNamedBinder_HasView;
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
lean::dec(x_64);
x_68 = lean::apply_1(x_65, x_52);
x_69 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_69, 0, x_68);
return x_69;
}
}
else
{
obj* x_73; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_73 = l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_73;
}
}
}
}
}
}
}
else
{
obj* x_76; 
lean::dec(x_8);
lean::dec(x_17);
x_76 = l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1;
return x_76;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_instImplicitBinderContent_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_instImplicitBinder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("instImplicitBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_12; obj* x_13; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_Lean_Parser_Term_instImplicitBinderContent_HasView;
x_9 = lean::cnstr_get(x_8, 1);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_3);
x_13 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_14 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_12);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::box(3);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_15);
x_18 = l_Lean_Parser_Term_instImplicitBinder;
x_19 = l_Lean_Parser_Syntax_mkNode(x_18, x_17);
return x_19;
}
else
{
obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_20 = lean::cnstr_get(x_5, 0);
lean::inc(x_20);
lean::dec(x_5);
x_23 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_13);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_12);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::box(3);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_25);
x_28 = l_Lean_Parser_Term_instImplicitBinder;
x_29 = l_Lean_Parser_Syntax_mkNode(x_28, x_27);
return x_29;
}
}
else
{
obj* x_30; obj* x_33; 
x_30 = lean::cnstr_get(x_1, 0);
lean::inc(x_30);
lean::dec(x_1);
x_33 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_33, 0, x_30);
if (lean::obj_tag(x_5) == 0)
{
obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; 
x_34 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_12);
lean::cnstr_set(x_35, 1, x_34);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_33);
lean::cnstr_set(x_36, 1, x_35);
x_37 = l_Lean_Parser_Term_instImplicitBinder;
x_38 = l_Lean_Parser_Syntax_mkNode(x_37, x_36);
return x_38;
}
else
{
obj* x_39; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; 
x_39 = lean::cnstr_get(x_5, 0);
lean::inc(x_39);
lean::dec(x_5);
x_42 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_42, 0, x_39);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_13);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_12);
lean::cnstr_set(x_44, 1, x_43);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_33);
lean::cnstr_set(x_45, 1, x_44);
x_46 = l_Lean_Parser_Term_instImplicitBinder;
x_47 = l_Lean_Parser_Syntax_mkNode(x_46, x_45);
return x_47;
}
}
}
}
obj* _init_l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; 
x_0 = l_Lean_Parser_Term_instImplicitBinderContent_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
return x_5;
}
}
obj* _init_l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_Term_instImplicitBinderContent_HasView;
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
x_7 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_7, 0, x_0);
lean::cnstr_set(x_7, 1, x_6);
lean::cnstr_set(x_7, 2, x_0);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__2;
return x_0;
}
}
obj* l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_9; 
x_9 = l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__3;
return x_9;
}
else
{
obj* x_10; obj* x_13; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
lean::dec(x_10);
if (lean::obj_tag(x_13) == 0)
{
obj* x_16; 
x_16 = lean::box(3);
x_5 = x_13;
x_6 = x_16;
goto lbl_7;
}
else
{
obj* x_17; obj* x_19; 
x_17 = lean::cnstr_get(x_13, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_13, 1);
lean::inc(x_19);
lean::dec(x_13);
x_5 = x_19;
x_6 = x_17;
goto lbl_7;
}
}
lbl_4:
{
obj* x_22; obj* x_23; obj* x_26; 
x_22 = l_Lean_Parser_Term_instImplicitBinderContent_HasView;
x_23 = lean::cnstr_get(x_22, 0);
lean::inc(x_23);
lean::dec(x_22);
x_26 = lean::apply_1(x_23, x_2);
if (lean::obj_tag(x_3) == 0)
{
obj* x_27; obj* x_28; 
x_27 = lean::box(0);
x_28 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_28, 0, x_1);
lean::cnstr_set(x_28, 1, x_26);
lean::cnstr_set(x_28, 2, x_27);
return x_28;
}
else
{
obj* x_29; 
x_29 = lean::cnstr_get(x_3, 0);
lean::inc(x_29);
lean::dec(x_3);
switch (lean::obj_tag(x_29)) {
case 0:
{
obj* x_32; obj* x_35; obj* x_36; 
x_32 = lean::cnstr_get(x_29, 0);
lean::inc(x_32);
lean::dec(x_29);
x_35 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_35, 0, x_32);
x_36 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_36, 0, x_1);
lean::cnstr_set(x_36, 1, x_26);
lean::cnstr_set(x_36, 2, x_35);
return x_36;
}
case 3:
{
obj* x_37; obj* x_38; 
x_37 = lean::box(0);
x_38 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_38, 0, x_1);
lean::cnstr_set(x_38, 1, x_26);
lean::cnstr_set(x_38, 2, x_37);
return x_38;
}
default:
{
obj* x_40; obj* x_41; 
lean::dec(x_29);
x_40 = lean::box(0);
x_41 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_41, 0, x_1);
lean::cnstr_set(x_41, 1, x_26);
lean::cnstr_set(x_41, 2, x_40);
return x_41;
}
}
}
}
lbl_7:
{
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_42; obj* x_45; 
x_42 = lean::cnstr_get(x_6, 0);
lean::inc(x_42);
lean::dec(x_6);
x_45 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_45, 0, x_42);
if (lean::obj_tag(x_5) == 0)
{
obj* x_46; obj* x_47; obj* x_48; 
x_46 = lean::box(0);
x_47 = l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__1;
x_48 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_48, 0, x_45);
lean::cnstr_set(x_48, 1, x_47);
lean::cnstr_set(x_48, 2, x_46);
return x_48;
}
else
{
obj* x_49; obj* x_51; 
x_49 = lean::cnstr_get(x_5, 0);
lean::inc(x_49);
x_51 = lean::cnstr_get(x_5, 1);
lean::inc(x_51);
lean::dec(x_5);
x_1 = x_45;
x_2 = x_49;
x_3 = x_51;
goto lbl_4;
}
}
case 3:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_54; 
x_54 = l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__2;
return x_54;
}
else
{
obj* x_55; obj* x_57; obj* x_60; 
x_55 = lean::cnstr_get(x_5, 0);
lean::inc(x_55);
x_57 = lean::cnstr_get(x_5, 1);
lean::inc(x_57);
lean::dec(x_5);
x_60 = lean::box(0);
x_1 = x_60;
x_2 = x_55;
x_3 = x_57;
goto lbl_4;
}
}
default:
{
lean::dec(x_6);
if (lean::obj_tag(x_5) == 0)
{
obj* x_62; 
x_62 = l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__2;
return x_62;
}
else
{
obj* x_63; obj* x_65; obj* x_68; 
x_63 = lean::cnstr_get(x_5, 0);
lean::inc(x_63);
x_65 = lean::cnstr_get(x_5, 1);
lean::inc(x_65);
lean::dec(x_5);
x_68 = lean::box(0);
x_1 = x_68;
x_2 = x_63;
x_3 = x_65;
goto lbl_4;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_instImplicitBinder_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_instImplicitBinder_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_instImplicitBinder_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinder___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("bracketedBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_bracketedBinder(uint8 x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Term_bracketedBinder___closed__1;
return x_1;
}
}
obj* l_Lean_Parser_Term_bracketedBinder___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_bracketedBinder(x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_bracketedBinder_HasView_x_27___elambda__1(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = lean::box(0);
switch (lean::obj_tag(x_1)) {
case 0:
{
obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1(x_3);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_2);
x_8 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_9 = l_Lean_Parser_Syntax_mkNode(x_8, x_7);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_2);
x_11 = l_Lean_Parser_Syntax_mkNode(x_0, x_10);
return x_11;
}
case 1:
{
obj* x_12; obj* x_15; obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_12 = lean::cnstr_get(x_1, 0);
lean::inc(x_12);
lean::dec(x_1);
x_15 = l_Lean_Parser_Term_implicitBinder_HasView;
x_16 = lean::cnstr_get(x_15, 1);
lean::inc(x_16);
lean::dec(x_15);
x_19 = lean::apply_1(x_16, x_12);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_2);
x_21 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_22 = l_Lean_Parser_Syntax_mkNode(x_21, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_2);
x_24 = l_Lean_Parser_Syntax_mkNode(x_0, x_23);
return x_24;
}
case 2:
{
obj* x_25; obj* x_28; obj* x_29; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; 
x_25 = lean::cnstr_get(x_1, 0);
lean::inc(x_25);
lean::dec(x_1);
x_28 = l_Lean_Parser_Term_strictImplicitBinder_HasView;
x_29 = lean::cnstr_get(x_28, 1);
lean::inc(x_29);
lean::dec(x_28);
x_32 = lean::apply_1(x_29, x_25);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_2);
x_34 = l_Lean_Parser_number_HasView_x_27___elambda__1___closed__4;
x_35 = l_Lean_Parser_Syntax_mkNode(x_34, x_33);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_2);
x_37 = l_Lean_Parser_Syntax_mkNode(x_0, x_36);
return x_37;
}
case 3:
{
obj* x_38; obj* x_41; obj* x_42; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; 
x_38 = lean::cnstr_get(x_1, 0);
lean::inc(x_38);
lean::dec(x_1);
x_41 = l_Lean_Parser_Term_instImplicitBinder_HasView;
x_42 = lean::cnstr_get(x_41, 1);
lean::inc(x_42);
lean::dec(x_41);
x_45 = lean::apply_1(x_42, x_38);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_2);
x_47 = l_Lean_Parser_number_HasView_x_27___elambda__1___closed__6;
x_48 = l_Lean_Parser_Syntax_mkNode(x_47, x_46);
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_48);
lean::cnstr_set(x_49, 1, x_2);
x_50 = l_Lean_Parser_Syntax_mkNode(x_0, x_49);
return x_50;
}
default:
{
obj* x_51; obj* x_54; obj* x_55; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; 
x_51 = lean::cnstr_get(x_1, 0);
lean::inc(x_51);
lean::dec(x_1);
x_54 = l_Lean_Parser_Term_anonymousConstructor_HasView;
x_55 = lean::cnstr_get(x_54, 1);
lean::inc(x_55);
lean::dec(x_54);
x_58 = lean::apply_1(x_55, x_51);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_58);
lean::cnstr_set(x_59, 1, x_2);
x_60 = l_Lean_Parser_command_mixfix_kind_HasView_x_27___elambda__1___closed__6;
x_61 = l_Lean_Parser_Syntax_mkNode(x_60, x_59);
x_62 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_62, 0, x_61);
lean::cnstr_set(x_62, 1, x_2);
x_63 = l_Lean_Parser_Syntax_mkNode(x_0, x_62);
return x_63;
}
}
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_explicitBinder_HasView_x_27(x_0);
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
x_7 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
}
obj* l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_bracketedBinder___closed__1;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
if (x_56 == 0)
{
obj* x_57; uint8 x_58; 
x_57 = lean::mk_nat_obj(1ul);
x_58 = lean::nat_dec_eq(x_39, x_57);
if (x_58 == 0)
{
obj* x_59; uint8 x_60; 
x_59 = lean::mk_nat_obj(2ul);
x_60 = lean::nat_dec_eq(x_39, x_59);
if (x_60 == 0)
{
obj* x_61; uint8 x_62; 
x_61 = lean::mk_nat_obj(3ul);
x_62 = lean::nat_dec_eq(x_39, x_61);
lean::dec(x_39);
if (x_62 == 0)
{
obj* x_64; obj* x_65; obj* x_68; obj* x_69; 
x_64 = l_Lean_Parser_Term_anonymousConstructor_HasView;
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
lean::dec(x_64);
x_68 = lean::apply_1(x_65, x_52);
x_69 = lean::alloc_cnstr(4, 1, 0);
lean::cnstr_set(x_69, 0, x_68);
return x_69;
}
else
{
obj* x_70; obj* x_71; obj* x_74; obj* x_75; 
x_70 = l_Lean_Parser_Term_instImplicitBinder_HasView;
x_71 = lean::cnstr_get(x_70, 0);
lean::inc(x_71);
lean::dec(x_70);
x_74 = lean::apply_1(x_71, x_52);
x_75 = lean::alloc_cnstr(3, 1, 0);
lean::cnstr_set(x_75, 0, x_74);
return x_75;
}
}
else
{
obj* x_77; obj* x_78; obj* x_81; obj* x_82; 
lean::dec(x_39);
x_77 = l_Lean_Parser_Term_strictImplicitBinder_HasView;
x_78 = lean::cnstr_get(x_77, 0);
lean::inc(x_78);
lean::dec(x_77);
x_81 = lean::apply_1(x_78, x_52);
x_82 = lean::alloc_cnstr(2, 1, 0);
lean::cnstr_set(x_82, 0, x_81);
return x_82;
}
}
else
{
obj* x_84; obj* x_85; obj* x_88; obj* x_89; 
lean::dec(x_39);
x_84 = l_Lean_Parser_Term_implicitBinder_HasView;
x_85 = lean::cnstr_get(x_84, 0);
lean::inc(x_85);
lean::dec(x_84);
x_88 = lean::apply_1(x_85, x_52);
x_89 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_89, 0, x_88);
return x_89;
}
}
else
{
uint8 x_91; obj* x_92; obj* x_93; obj* x_96; obj* x_97; 
lean::dec(x_39);
x_91 = 0;
x_92 = l_Lean_Parser_Term_explicitBinder_HasView_x_27(x_91);
x_93 = lean::cnstr_get(x_92, 0);
lean::inc(x_93);
lean::dec(x_92);
x_96 = lean::apply_1(x_93, x_52);
x_97 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_97, 0, x_96);
return x_97;
}
}
else
{
obj* x_101; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_101 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1;
return x_101;
}
}
}
}
}
}
}
else
{
obj* x_104; 
lean::dec(x_8);
lean::dec(x_17);
x_104 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1;
return x_104;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinder_HasView_x_27___closed__1() {
_start:
{
obj* x_0; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1), 1, 0);
return x_0;
}
}
obj* l_Lean_Parser_Term_bracketedBinder_HasView_x_27(uint8 x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_1 = l_Lean_Parser_Term_bracketedBinder(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bracketedBinder_HasView_x_27___elambda__1), 2, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27___closed__1;
x_4 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
return x_4;
}
}
obj* l_Lean_Parser_Term_bracketedBinder_HasView_x_27___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_bracketedBinder_HasView(uint8 x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_bracketedBinder_HasView___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_bracketedBinder_HasView(x_1);
return x_2;
}
}
obj* l_List_map___main___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__2___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_8; obj* x_11; obj* x_12; 
x_6 = lean::cnstr_get(x_0, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_0, 1);
lean::inc(x_8);
lean::dec(x_0);
x_11 = lean::apply_5(x_8, x_1, x_2, x_3, x_4, x_5);
x_12 = lean::cnstr_get(x_11, 0);
lean::inc(x_12);
if (lean::obj_tag(x_12) == 0)
{
obj* x_14; obj* x_16; obj* x_17; obj* x_19; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
x_14 = lean::cnstr_get(x_11, 1);
if (lean::is_exclusive(x_11)) {
 lean::cnstr_release(x_11, 0);
 x_16 = x_11;
} else {
 lean::inc(x_14);
 lean::dec(x_11);
 x_16 = lean::box(0);
}
x_17 = lean::cnstr_get(x_12, 0);
x_19 = lean::cnstr_get(x_12, 1);
x_21 = lean::cnstr_get(x_12, 2);
if (lean::is_exclusive(x_12)) {
 x_23 = x_12;
} else {
 lean::inc(x_17);
 lean::inc(x_19);
 lean::inc(x_21);
 lean::dec(x_12);
 x_23 = lean::box(0);
}
x_24 = lean::box(0);
x_25 = lean_name_mk_numeral(x_24, x_6);
x_26 = lean::box(0);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_17);
lean::cnstr_set(x_27, 1, x_26);
x_28 = l_Lean_Parser_Syntax_mkNode(x_25, x_27);
x_29 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_23)) {
 x_30 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_30 = x_23;
}
lean::cnstr_set(x_30, 0, x_28);
lean::cnstr_set(x_30, 1, x_19);
lean::cnstr_set(x_30, 2, x_29);
x_31 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_21, x_30);
if (lean::is_scalar(x_16)) {
 x_32 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_32 = x_16;
}
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_14);
return x_32;
}
else
{
obj* x_34; obj* x_36; obj* x_37; uint8 x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; 
lean::dec(x_6);
x_34 = lean::cnstr_get(x_11, 1);
if (lean::is_exclusive(x_11)) {
 lean::cnstr_release(x_11, 0);
 x_36 = x_11;
} else {
 lean::inc(x_34);
 lean::dec(x_11);
 x_36 = lean::box(0);
}
x_37 = lean::cnstr_get(x_12, 0);
x_39 = lean::cnstr_get_scalar<uint8>(x_12, sizeof(void*)*1);
if (lean::is_exclusive(x_12)) {
 x_40 = x_12;
} else {
 lean::inc(x_37);
 lean::dec(x_12);
 x_40 = lean::box(0);
}
if (lean::is_scalar(x_40)) {
 x_41 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_41 = x_40;
}
lean::cnstr_set(x_41, 0, x_37);
lean::cnstr_set_scalar(x_41, sizeof(void*)*1, x_39);
x_42 = x_41;
if (lean::is_scalar(x_36)) {
 x_43 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_43 = x_36;
}
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_34);
return x_43;
}
}
}
obj* l_List_map___main___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__2(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_List_map___main___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__2___lambda__1), 6, 1);
lean::closure_set(x_7, 0, x_2);
x_8 = l_List_map___main___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__2(x_4);
if (lean::is_scalar(x_6)) {
 x_9 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_9 = x_6;
}
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
return x_9;
}
}
}
obj* l_Lean_Parser_ParsecT_lookahead___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__4___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_16; obj* x_17; 
lean::inc(x_7);
x_16 = lean::apply_5(x_2, x_4, x_5, x_6, x_7, x_8);
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; obj* x_24; obj* x_26; obj* x_28; obj* x_29; 
x_19 = lean::cnstr_get(x_16, 1);
lean::inc(x_19);
lean::dec(x_16);
x_22 = lean::cnstr_get(x_17, 0);
x_24 = lean::cnstr_get(x_17, 1);
x_26 = lean::cnstr_get(x_17, 2);
if (lean::is_exclusive(x_17)) {
 lean::cnstr_set(x_17, 0, lean::box(0));
 lean::cnstr_set(x_17, 1, lean::box(0));
 lean::cnstr_set(x_17, 2, lean::box(0));
 x_28 = x_17;
} else {
 lean::inc(x_22);
 lean::inc(x_24);
 lean::inc(x_26);
 lean::dec(x_17);
 x_28 = lean::box(0);
}
if (lean::obj_tag(x_3) == 0)
{
obj* x_31; 
x_31 = lean::cnstr_get(x_3, 2);
lean::inc(x_31);
if (lean::obj_tag(x_31) == 0)
{
obj* x_34; obj* x_36; obj* x_38; obj* x_40; uint8 x_43; 
lean::dec(x_28);
x_34 = lean::cnstr_get(x_3, 0);
lean::inc(x_34);
x_36 = lean::cnstr_get(x_3, 1);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_24, 1);
lean::inc(x_38);
x_40 = lean::cnstr_get(x_36, 1);
lean::inc(x_40);
lean::dec(x_36);
x_43 = lean::nat_dec_lt(x_38, x_40);
if (x_43 == 0)
{
obj* x_45; uint8 x_46; 
lean::inc(x_3);
if (lean::is_exclusive(x_3)) {
 lean::cnstr_release(x_3, 0);
 lean::cnstr_release(x_3, 1);
 lean::cnstr_release(x_3, 2);
 x_45 = x_3;
} else {
 lean::dec(x_3);
 x_45 = lean::box(0);
}
x_46 = lean::nat_dec_lt(x_40, x_38);
lean::dec(x_38);
lean::dec(x_40);
if (x_46 == 0)
{
obj* x_49; obj* x_51; obj* x_53; obj* x_54; obj* x_55; obj* x_56; 
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_22);
lean::cnstr_set(x_49, 1, x_34);
lean::inc(x_24);
if (lean::is_scalar(x_45)) {
 x_51 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_51 = x_45;
}
lean::cnstr_set(x_51, 0, x_49);
lean::cnstr_set(x_51, 1, x_24);
lean::cnstr_set(x_51, 2, x_31);
lean::inc(x_0);
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_Function_comp___rarg), 3, 2);
lean::closure_set(x_53, 0, x_0);
lean::closure_set(x_53, 1, x_0);
x_54 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_54, 0, x_53);
x_55 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_55, 0, x_51);
lean::cnstr_set(x_55, 1, x_24);
lean::cnstr_set(x_55, 2, x_54);
x_56 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_26, x_55);
x_12 = x_56;
x_13 = x_19;
goto lbl_14;
}
else
{
obj* x_58; obj* x_59; obj* x_61; obj* x_63; obj* x_64; obj* x_65; obj* x_66; 
lean::dec(x_34);
x_58 = lean::box(0);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_22);
lean::cnstr_set(x_59, 1, x_58);
lean::inc(x_24);
if (lean::is_scalar(x_45)) {
 x_61 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_61 = x_45;
}
lean::cnstr_set(x_61, 0, x_59);
lean::cnstr_set(x_61, 1, x_24);
lean::cnstr_set(x_61, 2, x_31);
lean::inc(x_0);
x_63 = lean::alloc_closure(reinterpret_cast<void*>(l_Function_comp___rarg), 3, 2);
lean::closure_set(x_63, 0, x_0);
lean::closure_set(x_63, 1, x_0);
x_64 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_64, 0, x_63);
x_65 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_65, 0, x_61);
lean::cnstr_set(x_65, 1, x_24);
lean::cnstr_set(x_65, 2, x_64);
x_66 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_26, x_65);
x_12 = x_66;
x_13 = x_19;
goto lbl_14;
}
}
else
{
obj* x_72; obj* x_73; obj* x_75; obj* x_76; 
lean::dec(x_34);
lean::dec(x_22);
lean::dec(x_38);
lean::dec(x_40);
lean::inc(x_0);
x_72 = lean::alloc_closure(reinterpret_cast<void*>(l_Function_comp___rarg), 3, 2);
lean::closure_set(x_72, 0, x_0);
lean::closure_set(x_72, 1, x_0);
x_73 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_73, 0, x_72);
lean::inc(x_3);
x_75 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_75, 0, x_3);
lean::cnstr_set(x_75, 1, x_24);
lean::cnstr_set(x_75, 2, x_73);
x_76 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_26, x_75);
x_12 = x_76;
x_13 = x_19;
goto lbl_14;
}
}
else
{
obj* x_78; 
lean::dec(x_31);
x_78 = lean::box(0);
x_29 = x_78;
goto lbl_30;
}
}
else
{
obj* x_79; 
x_79 = lean::box(0);
x_29 = x_79;
goto lbl_30;
}
lbl_30:
{
obj* x_81; obj* x_82; obj* x_83; obj* x_85; obj* x_87; obj* x_88; obj* x_89; obj* x_90; 
lean::dec(x_29);
x_81 = lean::box(0);
x_82 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_82, 0, x_22);
lean::cnstr_set(x_82, 1, x_81);
x_83 = lean::box(0);
lean::inc(x_24);
if (lean::is_scalar(x_28)) {
 x_85 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_85 = x_28;
}
lean::cnstr_set(x_85, 0, x_82);
lean::cnstr_set(x_85, 1, x_24);
lean::cnstr_set(x_85, 2, x_83);
lean::inc(x_0);
x_87 = lean::alloc_closure(reinterpret_cast<void*>(l_Function_comp___rarg), 3, 2);
lean::closure_set(x_87, 0, x_0);
lean::closure_set(x_87, 1, x_0);
x_88 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_88, 0, x_87);
x_89 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_89, 0, x_85);
lean::cnstr_set(x_89, 1, x_24);
lean::cnstr_set(x_89, 2, x_88);
x_90 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_26, x_89);
x_12 = x_90;
x_13 = x_19;
goto lbl_14;
}
}
else
{
obj* x_92; obj* x_95; uint8 x_97; obj* x_98; obj* x_99; obj* x_100; 
lean::dec(x_0);
x_92 = lean::cnstr_get(x_16, 1);
lean::inc(x_92);
lean::dec(x_16);
x_95 = lean::cnstr_get(x_17, 0);
x_97 = lean::cnstr_get_scalar<uint8>(x_17, sizeof(void*)*1);
if (lean::is_exclusive(x_17)) {
 x_98 = x_17;
} else {
 lean::inc(x_95);
 lean::dec(x_17);
 x_98 = lean::box(0);
}
if (lean::is_scalar(x_98)) {
 x_99 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_99 = x_98;
}
lean::cnstr_set(x_99, 0, x_95);
lean::cnstr_set_scalar(x_99, sizeof(void*)*1, x_97);
x_100 = x_99;
x_12 = x_100;
x_13 = x_92;
goto lbl_14;
}
lbl_11:
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_101; obj* x_103; obj* x_104; obj* x_105; obj* x_106; 
x_101 = lean::cnstr_get(x_9, 0);
if (lean::is_exclusive(x_9)) {
 lean::cnstr_release(x_9, 1);
 lean::cnstr_release(x_9, 2);
 x_103 = x_9;
} else {
 lean::inc(x_101);
 lean::dec(x_9);
 x_103 = lean::box(0);
}
x_104 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_103)) {
 x_105 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_105 = x_103;
}
lean::cnstr_set(x_105, 0, x_101);
lean::cnstr_set(x_105, 1, x_7);
lean::cnstr_set(x_105, 2, x_104);
x_106 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_106, 0, x_105);
lean::cnstr_set(x_106, 1, x_10);
return x_106;
}
else
{
obj* x_108; 
lean::dec(x_7);
x_108 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_108, 0, x_9);
lean::cnstr_set(x_108, 1, x_10);
return x_108;
}
}
lbl_14:
{
if (lean::obj_tag(x_12) == 0)
{
lean::dec(x_1);
lean::dec(x_3);
x_9 = x_12;
x_10 = x_13;
goto lbl_11;
}
else
{
obj* x_111; obj* x_114; obj* x_117; 
x_111 = lean::cnstr_get(x_12, 0);
lean::inc(x_111);
lean::dec(x_12);
x_114 = lean::cnstr_get(x_111, 0);
lean::inc(x_114);
lean::dec(x_111);
x_117 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_117, 0, x_3);
lean::cnstr_set(x_117, 1, x_114);
lean::cnstr_set(x_117, 2, x_1);
x_9 = x_117;
x_10 = x_13;
goto lbl_11;
}
}
}
}
obj* l_Lean_Parser_ParsecT_lookahead___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__4(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ParsecT_lookahead___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__4___rarg), 9, 0);
return x_1;
}
}
obj* l_List_mfoldr___main___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__5(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9) {
_start:
{
if (lean::obj_tag(x_4) == 0)
{
obj* x_15; obj* x_16; obj* x_17; 
lean::dec(x_5);
lean::dec(x_7);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_2);
x_15 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_16 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_16, 0, x_3);
lean::cnstr_set(x_16, 1, x_8);
lean::cnstr_set(x_16, 2, x_15);
x_17 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_9);
return x_17;
}
else
{
obj* x_18; obj* x_20; obj* x_28; obj* x_29; 
x_18 = lean::cnstr_get(x_4, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_4, 1);
lean::inc(x_20);
lean::dec(x_4);
lean::inc(x_7);
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_2);
lean::inc(x_1);
x_28 = l_List_mfoldr___main___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__5(x_0, x_1, x_2, x_3, x_20, x_5, x_6, x_7, x_8, x_9);
x_29 = lean::cnstr_get(x_28, 0);
lean::inc(x_29);
if (lean::obj_tag(x_29) == 0)
{
obj* x_31; obj* x_34; obj* x_36; obj* x_38; obj* x_41; obj* x_42; obj* x_44; obj* x_46; obj* x_47; obj* x_48; 
x_31 = lean::cnstr_get(x_28, 1);
lean::inc(x_31);
lean::dec(x_28);
x_34 = lean::cnstr_get(x_29, 0);
lean::inc(x_34);
x_36 = lean::cnstr_get(x_29, 1);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_29, 2);
lean::inc(x_38);
lean::dec(x_29);
x_41 = l_Lean_Parser_ParsecT_lookahead___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__4___rarg(x_1, x_2, x_18, x_34, x_5, x_6, x_7, x_36, x_31);
x_42 = lean::cnstr_get(x_41, 0);
x_44 = lean::cnstr_get(x_41, 1);
if (lean::is_exclusive(x_41)) {
 x_46 = x_41;
} else {
 lean::inc(x_42);
 lean::inc(x_44);
 lean::dec(x_41);
 x_46 = lean::box(0);
}
x_47 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_38, x_42);
if (lean::is_scalar(x_46)) {
 x_48 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_48 = x_46;
}
lean::cnstr_set(x_48, 0, x_47);
lean::cnstr_set(x_48, 1, x_44);
return x_48;
}
else
{
obj* x_55; obj* x_57; obj* x_58; uint8 x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; 
lean::dec(x_5);
lean::dec(x_7);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_2);
lean::dec(x_18);
x_55 = lean::cnstr_get(x_28, 1);
if (lean::is_exclusive(x_28)) {
 lean::cnstr_release(x_28, 0);
 x_57 = x_28;
} else {
 lean::inc(x_55);
 lean::dec(x_28);
 x_57 = lean::box(0);
}
x_58 = lean::cnstr_get(x_29, 0);
x_60 = lean::cnstr_get_scalar<uint8>(x_29, sizeof(void*)*1);
if (lean::is_exclusive(x_29)) {
 x_61 = x_29;
} else {
 lean::inc(x_58);
 lean::dec(x_29);
 x_61 = lean::box(0);
}
if (lean::is_scalar(x_61)) {
 x_62 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_62 = x_61;
}
lean::cnstr_set(x_62, 0, x_58);
lean::cnstr_set_scalar(x_62, sizeof(void*)*1, x_60);
x_63 = x_62;
if (lean::is_scalar(x_57)) {
 x_64 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_64 = x_57;
}
lean::cnstr_set(x_64, 0, x_63);
lean::cnstr_set(x_64, 1, x_55);
return x_64;
}
}
}
}
obj* l_Lean_Parser_MonadParsec_longestMatch___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__3(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_15; 
x_6 = lean::box(0);
x_7 = l_Lean_Parser_MonadParsec_longestMatch___rarg___lambda__2___closed__1;
x_8 = l_mjoin___rarg___closed__1;
lean::inc(x_4);
x_10 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_number_x_27___spec__8___rarg(x_7, x_8, x_6, x_6, x_4);
x_11 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
lean::inc(x_4);
x_13 = l_List_mfoldr___main___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__5(x_4, x_8, x_11, x_10, x_0, x_1, x_2, x_3, x_4, x_5);
lean::dec(x_4);
x_15 = lean::cnstr_get(x_13, 0);
lean::inc(x_15);
if (lean::obj_tag(x_15) == 0)
{
obj* x_17; obj* x_19; obj* x_20; obj* x_22; obj* x_25; obj* x_26; obj* x_27; 
x_17 = lean::cnstr_get(x_13, 1);
if (lean::is_exclusive(x_13)) {
 lean::cnstr_release(x_13, 0);
 x_19 = x_13;
} else {
 lean::inc(x_17);
 lean::dec(x_13);
 x_19 = lean::box(0);
}
x_20 = lean::cnstr_get(x_15, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_15, 2);
lean::inc(x_22);
lean::dec(x_15);
x_25 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_22, x_20);
x_26 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_11, x_25);
if (lean::is_scalar(x_19)) {
 x_27 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_27 = x_19;
}
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_17);
return x_27;
}
else
{
obj* x_28; obj* x_30; obj* x_31; uint8 x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; 
x_28 = lean::cnstr_get(x_13, 1);
if (lean::is_exclusive(x_13)) {
 lean::cnstr_release(x_13, 0);
 x_30 = x_13;
} else {
 lean::inc(x_28);
 lean::dec(x_13);
 x_30 = lean::box(0);
}
x_31 = lean::cnstr_get(x_15, 0);
x_33 = lean::cnstr_get_scalar<uint8>(x_15, sizeof(void*)*1);
if (lean::is_exclusive(x_15)) {
 x_34 = x_15;
} else {
 lean::inc(x_31);
 lean::dec(x_15);
 x_34 = lean::box(0);
}
if (lean::is_scalar(x_34)) {
 x_35 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_35 = x_34;
}
lean::cnstr_set(x_35, 0, x_31);
lean::cnstr_set_scalar(x_35, sizeof(void*)*1, x_33);
x_36 = x_35;
x_37 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_11, x_36);
if (lean::is_scalar(x_30)) {
 x_38 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_38 = x_30;
}
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_28);
return x_38;
}
}
}
obj* l_Lean_Parser_Combinators_longestChoice___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_12; obj* x_13; 
x_6 = lean::mk_nat_obj(0ul);
x_7 = l_List_enumFrom___main___rarg(x_6, x_0);
x_8 = l_List_map___main___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__2(x_7);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_12 = l_Lean_Parser_MonadParsec_longestMatch___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__3(x_8, x_1, x_2, x_3, x_4, x_5);
x_13 = lean::cnstr_get(x_12, 0);
lean::inc(x_13);
if (lean::obj_tag(x_13) == 0)
{
obj* x_15; 
x_15 = lean::cnstr_get(x_13, 0);
lean::inc(x_15);
if (lean::obj_tag(x_15) == 0)
{
obj* x_17; obj* x_20; obj* x_22; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_32; obj* x_34; obj* x_36; obj* x_37; obj* x_38; 
x_17 = lean::cnstr_get(x_12, 1);
lean::inc(x_17);
lean::dec(x_12);
x_20 = lean::cnstr_get(x_13, 1);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_13, 2);
lean::inc(x_22);
lean::dec(x_13);
x_25 = lean::box(0);
x_26 = l___private_init_lean_parser_combinators_1__many1Aux___main___rarg___closed__1;
x_27 = l_mjoin___rarg___closed__1;
x_28 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__4___rarg(x_26, x_27, x_25, x_25, x_1, x_2, x_3, x_20, x_17);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_1);
x_32 = lean::cnstr_get(x_28, 0);
x_34 = lean::cnstr_get(x_28, 1);
if (lean::is_exclusive(x_28)) {
 x_36 = x_28;
} else {
 lean::inc(x_32);
 lean::inc(x_34);
 lean::dec(x_28);
 x_36 = lean::box(0);
}
x_37 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_22, x_32);
if (lean::is_scalar(x_36)) {
 x_38 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_38 = x_36;
}
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_34);
return x_38;
}
else
{
obj* x_42; obj* x_44; obj* x_45; obj* x_47; obj* x_49; obj* x_50; obj* x_53; obj* x_54; obj* x_55; obj* x_56; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_42 = lean::cnstr_get(x_12, 1);
if (lean::is_exclusive(x_12)) {
 lean::cnstr_release(x_12, 0);
 x_44 = x_12;
} else {
 lean::inc(x_42);
 lean::dec(x_12);
 x_44 = lean::box(0);
}
x_45 = lean::cnstr_get(x_13, 1);
x_47 = lean::cnstr_get(x_13, 2);
if (lean::is_exclusive(x_13)) {
 lean::cnstr_release(x_13, 0);
 x_49 = x_13;
} else {
 lean::inc(x_45);
 lean::inc(x_47);
 lean::dec(x_13);
 x_49 = lean::box(0);
}
x_50 = lean::cnstr_get(x_15, 0);
lean::inc(x_50);
lean::dec(x_15);
x_53 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_49)) {
 x_54 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_54 = x_49;
}
lean::cnstr_set(x_54, 0, x_50);
lean::cnstr_set(x_54, 1, x_45);
lean::cnstr_set(x_54, 2, x_53);
x_55 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_47, x_54);
if (lean::is_scalar(x_44)) {
 x_56 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_56 = x_44;
}
lean::cnstr_set(x_56, 0, x_55);
lean::cnstr_set(x_56, 1, x_42);
return x_56;
}
}
else
{
obj* x_60; obj* x_62; obj* x_63; uint8 x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_60 = lean::cnstr_get(x_12, 1);
if (lean::is_exclusive(x_12)) {
 lean::cnstr_release(x_12, 0);
 x_62 = x_12;
} else {
 lean::inc(x_60);
 lean::dec(x_12);
 x_62 = lean::box(0);
}
x_63 = lean::cnstr_get(x_13, 0);
x_65 = lean::cnstr_get_scalar<uint8>(x_13, sizeof(void*)*1);
if (lean::is_exclusive(x_13)) {
 x_66 = x_13;
} else {
 lean::inc(x_63);
 lean::dec(x_13);
 x_66 = lean::box(0);
}
if (lean::is_scalar(x_66)) {
 x_67 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_67 = x_66;
}
lean::cnstr_set(x_67, 0, x_63);
lean::cnstr_set_scalar(x_67, sizeof(void*)*1, x_65);
x_68 = x_67;
if (lean::is_scalar(x_62)) {
 x_69 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_69 = x_62;
}
lean::cnstr_set(x_69, 0, x_68);
lean::cnstr_set(x_69, 1, x_60);
return x_69;
}
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_5; 
x_0 = lean::box(0);
x_1 = lean::mk_string(")");
x_2 = lean::mk_nat_obj(0ul);
x_3 = l_Lean_Parser_symbol_tokens___rarg(x_1, x_2);
lean::dec(x_1);
x_5 = l_Lean_Parser_List_cons_tokens___rarg(x_3, x_0);
lean::dec(x_3);
return x_5;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::mk_string("(");
x_1 = lean::mk_nat_obj(0ul);
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; uint8 x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_14; obj* x_17; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_25; obj* x_27; obj* x_30; obj* x_33; obj* x_35; obj* x_36; obj* x_38; obj* x_39; obj* x_41; obj* x_42; obj* x_44; obj* x_46; obj* x_48; obj* x_50; obj* x_52; obj* x_54; obj* x_57; obj* x_59; obj* x_61; obj* x_63; obj* x_64; obj* x_66; obj* x_68; obj* x_71; obj* x_74; obj* x_76; obj* x_77; obj* x_78; obj* x_81; obj* x_84; 
x_0 = lean::box(0);
x_1 = lean::mk_string("{");
x_2 = lean::mk_nat_obj(0ul);
x_3 = l_Lean_Parser_symbol_tokens___rarg(x_1, x_2);
lean::dec(x_1);
x_5 = 0;
x_6 = l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasTokens(x_5);
x_7 = lean::mk_string("}");
x_8 = l_Lean_Parser_symbol_tokens___rarg(x_7, x_2);
lean::dec(x_7);
x_10 = l_Lean_Parser_List_cons_tokens___rarg(x_8, x_0);
lean::dec(x_8);
x_12 = l_Lean_Parser_List_cons_tokens___rarg(x_6, x_10);
lean::dec(x_10);
x_14 = l_Lean_Parser_List_cons_tokens___rarg(x_3, x_12);
lean::dec(x_12);
lean::dec(x_3);
x_17 = l_Lean_Parser_tokens___rarg(x_14);
lean::dec(x_14);
x_19 = lean::mk_string("\xe2\xa6\x83");
x_20 = l_Lean_Parser_symbol_tokens___rarg(x_19, x_2);
lean::dec(x_19);
x_22 = lean::mk_string("\xe2\xa6\x84");
x_23 = l_Lean_Parser_symbol_tokens___rarg(x_22, x_2);
lean::dec(x_22);
x_25 = l_Lean_Parser_List_cons_tokens___rarg(x_23, x_0);
lean::dec(x_23);
x_27 = l_Lean_Parser_List_cons_tokens___rarg(x_6, x_25);
lean::dec(x_25);
lean::dec(x_6);
x_30 = l_Lean_Parser_List_cons_tokens___rarg(x_20, x_27);
lean::dec(x_27);
lean::dec(x_20);
x_33 = l_Lean_Parser_tokens___rarg(x_30);
lean::dec(x_30);
x_35 = lean::mk_string("[");
x_36 = l_Lean_Parser_symbol_tokens___rarg(x_35, x_2);
lean::dec(x_35);
x_38 = lean::mk_string(" : ");
x_39 = l_Lean_Parser_symbol_tokens___rarg(x_38, x_2);
lean::dec(x_38);
x_41 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_2);
x_42 = l_Lean_Parser_List_cons_tokens___rarg(x_41, x_0);
lean::dec(x_41);
x_44 = l_Lean_Parser_List_cons_tokens___rarg(x_39, x_42);
lean::dec(x_39);
x_46 = l_Lean_Parser_List_cons_tokens___rarg(x_0, x_44);
lean::dec(x_44);
x_48 = l_Lean_Parser_tokens___rarg(x_46);
lean::dec(x_46);
x_50 = l_Lean_Parser_tokens___rarg(x_42);
lean::dec(x_42);
x_52 = l_Lean_Parser_List_cons_tokens___rarg(x_50, x_0);
lean::dec(x_50);
x_54 = l_Lean_Parser_List_cons_tokens___rarg(x_48, x_52);
lean::dec(x_52);
lean::dec(x_48);
x_57 = l_Lean_Parser_tokens___rarg(x_54);
lean::dec(x_54);
x_59 = l_Lean_Parser_List_cons_tokens___rarg(x_57, x_0);
lean::dec(x_57);
x_61 = l_Lean_Parser_tokens___rarg(x_59);
lean::dec(x_59);
x_63 = lean::mk_string("]");
x_64 = l_Lean_Parser_symbol_tokens___rarg(x_63, x_2);
lean::dec(x_63);
x_66 = l_Lean_Parser_List_cons_tokens___rarg(x_64, x_0);
lean::dec(x_64);
x_68 = l_Lean_Parser_List_cons_tokens___rarg(x_61, x_66);
lean::dec(x_66);
lean::dec(x_61);
x_71 = l_Lean_Parser_List_cons_tokens___rarg(x_36, x_68);
lean::dec(x_68);
lean::dec(x_36);
x_74 = l_Lean_Parser_tokens___rarg(x_71);
lean::dec(x_71);
x_76 = l_Lean_Parser_Term_anonymousConstructor_Parser_Lean_Parser_HasTokens;
x_77 = l_Lean_Parser_List_cons_tokens___rarg(x_76, x_0);
x_78 = l_Lean_Parser_List_cons_tokens___rarg(x_74, x_77);
lean::dec(x_77);
lean::dec(x_74);
x_81 = l_Lean_Parser_List_cons_tokens___rarg(x_33, x_78);
lean::dec(x_78);
lean::dec(x_33);
x_84 = l_Lean_Parser_List_cons_tokens___rarg(x_17, x_81);
lean::dec(x_81);
lean::dec(x_17);
return x_84;
}
}
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens(uint8 x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_12; obj* x_14; obj* x_15; obj* x_17; obj* x_18; obj* x_20; obj* x_22; obj* x_23; obj* x_25; obj* x_27; obj* x_29; 
x_1 = l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasTokens(x_0);
x_2 = lean::box(0);
x_3 = l_Lean_Parser_List_cons_tokens___rarg(x_1, x_2);
lean::dec(x_1);
x_5 = l_Lean_Parser_command_notationLike_Parser_Lean_Parser_HasTokens;
x_6 = l_Lean_Parser_List_cons_tokens___rarg(x_5, x_3);
lean::dec(x_3);
x_8 = l_Lean_Parser_tokens___rarg(x_6);
lean::dec(x_6);
x_10 = l_Lean_Parser_List_cons_tokens___rarg(x_8, x_2);
lean::dec(x_8);
x_12 = l_Lean_Parser_tokens___rarg(x_10);
lean::dec(x_10);
x_14 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__1;
x_15 = l_Lean_Parser_List_cons_tokens___rarg(x_12, x_14);
lean::dec(x_12);
x_17 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__2;
x_18 = l_Lean_Parser_List_cons_tokens___rarg(x_17, x_15);
lean::dec(x_15);
x_20 = l_Lean_Parser_tokens___rarg(x_18);
lean::dec(x_18);
x_22 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__3;
x_23 = l_Lean_Parser_List_cons_tokens___rarg(x_20, x_22);
lean::dec(x_20);
x_25 = l_Lean_Parser_tokens___rarg(x_23);
lean::dec(x_23);
x_27 = l_Lean_Parser_List_cons_tokens___rarg(x_25, x_2);
lean::dec(x_25);
x_29 = l_Lean_Parser_tokens___rarg(x_27);
lean::dec(x_27);
return x_29;
}
}
obj* l_Lean_Parser_ParsecT_lookahead___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__4___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_ParsecT_lookahead___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__4(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_List_mfoldr___main___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__5___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9) {
_start:
{
obj* x_10; 
x_10 = l_List_mfoldr___main___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__5(x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9);
lean::dec(x_0);
return x_10;
}
}
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens(x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__1() {
_start:
{
obj* x_0; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_command_notationLike_Parser), 5, 0);
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__2() {
_start:
{
uint8 x_0; obj* x_1; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_explicitBinderContent(x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string(")");
x_2 = l_String_trim(x_1);
lean::dec(x_1);
lean::inc(x_2);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_5, 0, x_2);
x_6 = lean::mk_nat_obj(0ul);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_7, 0, x_2);
lean::closure_set(x_7, 1, x_6);
lean::closure_set(x_7, 2, x_5);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_0);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::mk_string("(");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__5() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; uint8 x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; 
x_0 = lean::box(0);
x_1 = lean::mk_string("{");
x_2 = l_String_trim(x_1);
lean::dec(x_1);
lean::inc(x_2);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_5, 0, x_2);
x_6 = lean::mk_nat_obj(0ul);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_7, 0, x_2);
lean::closure_set(x_7, 1, x_6);
lean::closure_set(x_7, 2, x_5);
x_8 = 0;
x_9 = lean::box(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderContent_Parser___boxed), 6, 1);
lean::closure_set(x_10, 0, x_9);
x_11 = lean::mk_string("}");
x_12 = l_String_trim(x_11);
lean::dec(x_11);
lean::inc(x_12);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_15, 0, x_12);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_16, 0, x_12);
lean::closure_set(x_16, 1, x_6);
lean::closure_set(x_16, 2, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_0);
lean::inc(x_10);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_10);
lean::cnstr_set(x_19, 1, x_17);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_7);
lean::cnstr_set(x_20, 1, x_19);
x_21 = l_Lean_Parser_Term_implicitBinder;
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_22, 0, x_21);
lean::closure_set(x_22, 1, x_20);
x_23 = lean::mk_string("\xe2\xa6\x83");
x_24 = l_String_trim(x_23);
lean::dec(x_23);
lean::inc(x_24);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_27, 0, x_24);
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_28, 0, x_24);
lean::closure_set(x_28, 1, x_6);
lean::closure_set(x_28, 2, x_27);
x_29 = lean::mk_string("\xe2\xa6\x84");
x_30 = l_String_trim(x_29);
lean::dec(x_29);
lean::inc(x_30);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_33, 0, x_30);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_34, 0, x_30);
lean::closure_set(x_34, 1, x_6);
lean::closure_set(x_34, 2, x_33);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_0);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_10);
lean::cnstr_set(x_36, 1, x_35);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_28);
lean::cnstr_set(x_37, 1, x_36);
x_38 = l_Lean_Parser_Term_strictImplicitBinder;
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_39, 0, x_38);
lean::closure_set(x_39, 1, x_37);
x_40 = lean::mk_string("[");
x_41 = l_String_trim(x_40);
lean::dec(x_40);
lean::inc(x_41);
x_44 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_44, 0, x_41);
x_45 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_45, 0, x_41);
lean::closure_set(x_45, 1, x_6);
lean::closure_set(x_45, 2, x_44);
x_46 = lean::mk_string(" : ");
x_47 = l_String_trim(x_46);
lean::dec(x_46);
lean::inc(x_47);
x_50 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_50, 0, x_47);
x_51 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_51, 0, x_47);
lean::closure_set(x_51, 1, x_6);
lean::closure_set(x_51, 2, x_50);
x_52 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_52, 0, x_6);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_52);
lean::cnstr_set(x_53, 1, x_0);
lean::inc(x_53);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_51);
lean::cnstr_set(x_55, 1, x_53);
x_56 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
x_57 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_57, 0, x_56);
lean::cnstr_set(x_57, 1, x_55);
x_58 = l_Lean_Parser_Term_instImplicitNamedBinder;
x_59 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_59, 0, x_58);
lean::closure_set(x_59, 1, x_57);
x_60 = l_Lean_Parser_Term_instImplicitAnonymousBinder;
x_61 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_61, 0, x_60);
lean::closure_set(x_61, 1, x_53);
x_62 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_62, 0, x_61);
lean::cnstr_set(x_62, 1, x_0);
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_59);
lean::cnstr_set(x_63, 1, x_62);
x_64 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_longestChoice___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__1), 6, 1);
lean::closure_set(x_64, 0, x_63);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_0);
x_66 = l_Lean_Parser_Term_instImplicitBinderContent;
x_67 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_67, 0, x_66);
lean::closure_set(x_67, 1, x_65);
x_68 = lean::mk_string("]");
x_69 = l_String_trim(x_68);
lean::dec(x_68);
lean::inc(x_69);
x_72 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_72, 0, x_69);
x_73 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_73, 0, x_69);
lean::closure_set(x_73, 1, x_6);
lean::closure_set(x_73, 2, x_72);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_0);
x_75 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_75, 0, x_67);
lean::cnstr_set(x_75, 1, x_74);
x_76 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_76, 0, x_45);
lean::cnstr_set(x_76, 1, x_75);
x_77 = l_Lean_Parser_Term_instImplicitBinder;
x_78 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_78, 0, x_77);
lean::closure_set(x_78, 1, x_76);
x_79 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_anonymousConstructor_Parser), 5, 0);
x_80 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_80, 0, x_79);
lean::cnstr_set(x_80, 1, x_0);
x_81 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_81, 0, x_78);
lean::cnstr_set(x_81, 1, x_80);
x_82 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_82, 0, x_39);
lean::cnstr_set(x_82, 1, x_81);
x_83 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_83, 0, x_22);
lean::cnstr_set(x_83, 1, x_82);
return x_83;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__6() {
_start:
{
uint8 x_0; obj* x_1; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_bracketedBinder(x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__7() {
_start:
{
uint8 x_0; obj* x_1; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView(uint8 x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_1 = lean::box(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderContent_Parser___boxed), 6, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::box(0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__1;
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::mk_nat_obj(0ul);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_8, 0, x_6);
lean::closure_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_3);
x_10 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__2;
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_11, 0, x_10);
lean::closure_set(x_11, 1, x_9);
x_12 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__3;
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__4;
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_13);
x_16 = l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1___closed__1;
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_17, 0, x_16);
lean::closure_set(x_17, 1, x_15);
x_18 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__5;
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_20, 0, x_19);
lean::closure_set(x_20, 1, x_7);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_3);
x_22 = l_Lean_Parser_TermParserM_Monad;
x_23 = l_Lean_Parser_TermParserM_MonadExcept;
x_24 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_25 = l_Lean_Parser_TermParserM_Alternative;
x_26 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__6;
x_27 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__7;
x_28 = l_Lean_Parser_Combinators_node_view___rarg(x_22, x_23, x_24, x_25, x_26, x_21, x_27);
lean::dec(x_21);
return x_28;
}
}
obj* l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___boxed(obj* x_0) {
_start:
{
uint8 x_1; obj* x_2; 
x_1 = lean::unbox(x_0);
x_2 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView(x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_bracketedBinder_Parser(uint8 x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_6 = lean::box(x_0);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderContent_Parser___boxed), 6, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
x_10 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__1;
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_10);
lean::cnstr_set(x_11, 1, x_9);
x_12 = lean::mk_nat_obj(0ul);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_13, 0, x_11);
lean::closure_set(x_13, 1, x_12);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_8);
x_15 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__2;
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_16, 0, x_15);
lean::closure_set(x_16, 1, x_14);
x_17 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__3;
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_17);
x_19 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__4;
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_18);
x_21 = l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1___closed__1;
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_22, 0, x_21);
lean::closure_set(x_22, 1, x_20);
x_23 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__5;
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_22);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_25, 0, x_24);
lean::closure_set(x_25, 1, x_12);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_8);
x_27 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__6;
x_28 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_27, x_26, x_1, x_2, x_3, x_4, x_5);
return x_28;
}
}
obj* l_Lean_Parser_Term_bracketedBinder_Parser___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
uint8 x_6; obj* x_7; 
x_6 = lean::unbox(x_0);
x_7 = l_Lean_Parser_Term_bracketedBinder_Parser(x_6, x_1, x_2, x_3, x_4, x_5);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_binder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_binder_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; uint8 x_5; obj* x_6; obj* x_7; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = 0;
x_6 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_5);
x_7 = lean::cnstr_get(x_6, 1);
lean::inc(x_7);
lean::dec(x_6);
x_10 = lean::apply_1(x_7, x_2);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_10);
lean::cnstr_set(x_11, 1, x_1);
x_12 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_13 = l_Lean_Parser_Syntax_mkNode(x_12, x_11);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_Lean_Parser_Term_binder;
x_16 = l_Lean_Parser_Syntax_mkNode(x_15, x_14);
return x_16;
}
else
{
obj* x_17; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_17 = lean::cnstr_get(x_0, 0);
lean::inc(x_17);
lean::dec(x_0);
x_20 = l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1(x_17);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_1);
x_22 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_23 = l_Lean_Parser_Syntax_mkNode(x_22, x_21);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_Lean_Parser_Term_binder;
x_26 = l_Lean_Parser_Syntax_mkNode(x_25, x_24);
return x_26;
}
}
}
obj* _init_l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_0);
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
x_7 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_binder_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__2;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
uint8 x_58; obj* x_59; obj* x_60; obj* x_63; obj* x_64; 
x_58 = 0;
x_59 = l_Lean_Parser_Term_binderContent_HasView_x_27(x_58);
x_60 = lean::cnstr_get(x_59, 0);
lean::inc(x_60);
lean::dec(x_59);
x_63 = lean::apply_1(x_60, x_52);
x_64 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_64, 0, x_63);
return x_64;
}
else
{
uint8 x_65; obj* x_66; obj* x_67; obj* x_70; obj* x_71; 
x_65 = 0;
x_66 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_65);
x_67 = lean::cnstr_get(x_66, 0);
lean::inc(x_67);
lean::dec(x_66);
x_70 = lean::apply_1(x_67, x_52);
x_71 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_71, 0, x_70);
return x_71;
}
}
else
{
obj* x_75; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_75 = l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1;
return x_75;
}
}
}
}
}
}
}
else
{
obj* x_78; 
lean::dec(x_8);
lean::dec(x_17);
x_78 = l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1;
return x_78;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_binder_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binder_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binder_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_binder_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_binder_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_binder_Parser_Lean_Parser_HasTokens() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_6; obj* x_9; obj* x_11; obj* x_13; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens(x_0);
x_2 = l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasTokens(x_0);
x_3 = lean::box(0);
x_4 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_3);
lean::dec(x_2);
x_6 = l_Lean_Parser_List_cons_tokens___rarg(x_1, x_4);
lean::dec(x_4);
lean::dec(x_1);
x_9 = l_Lean_Parser_tokens___rarg(x_6);
lean::dec(x_6);
x_11 = l_Lean_Parser_List_cons_tokens___rarg(x_9, x_3);
lean::dec(x_9);
x_13 = l_Lean_Parser_tokens___rarg(x_11);
lean::dec(x_11);
return x_13;
}
}
obj* _init_l_Lean_Parser_Term_binder_Parser_Lean_Parser_HasView() {
_start:
{
uint8 x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_0 = 0;
x_1 = lean::box(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bracketedBinder_Parser___boxed), 6, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderContent_Parser___boxed), 6, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::mk_nat_obj(0ul);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_9, 0, x_7);
lean::closure_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_5);
x_11 = l_Lean_Parser_TermParserM_Monad;
x_12 = l_Lean_Parser_TermParserM_MonadExcept;
x_13 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_14 = l_Lean_Parser_TermParserM_Alternative;
x_15 = l_Lean_Parser_Term_binder;
x_16 = l_Lean_Parser_Term_binder_HasView;
x_17 = l_Lean_Parser_Combinators_node_view___rarg(x_11, x_12, x_13, x_14, x_15, x_10, x_16);
lean::dec(x_10);
return x_17;
}
}
obj* _init_l_Lean_Parser_Term_binder_Parser___closed__1() {
_start:
{
uint8 x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_0 = 0;
x_1 = lean::box(x_0);
lean::inc(x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bracketedBinder_Parser___boxed), 6, 1);
lean::closure_set(x_3, 0, x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderContent_Parser___boxed), 6, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::mk_nat_obj(0ul);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_9, 0, x_7);
lean::closure_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_5);
return x_10;
}
}
obj* l_Lean_Parser_Term_binder_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_binder;
x_6 = l_Lean_Parser_Term_binder_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_bindersTypes() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("bindersTypes");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
if (lean::obj_tag(x_1) == 0)
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_8 = lean::box(3);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_Lean_Parser_Term_bindersTypes;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
return x_11;
}
else
{
obj* x_12; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_12 = lean::cnstr_get(x_1, 0);
lean::inc(x_12);
lean::dec(x_1);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_12);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_7);
x_17 = l_Lean_Parser_Term_bindersTypes;
x_18 = l_Lean_Parser_Syntax_mkNode(x_17, x_16);
return x_18;
}
}
}
obj* _init_l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__2___closed__1;
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
switch (lean::obj_tag(x_11)) {
case 0:
{
obj* x_13; obj* x_16; obj* x_19; 
x_13 = lean::cnstr_get(x_6, 1);
lean::inc(x_13);
lean::dec(x_6);
x_16 = lean::cnstr_get(x_11, 0);
lean::inc(x_16);
lean::dec(x_11);
if (lean::is_scalar(x_5)) {
 x_19 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_19 = x_5;
}
lean::cnstr_set(x_19, 0, x_16);
if (lean::obj_tag(x_13) == 0)
{
obj* x_20; obj* x_21; 
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_13, 0);
lean::inc(x_22);
lean::dec(x_13);
x_25 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_25, 0, x_19);
lean::cnstr_set(x_25, 1, x_22);
return x_25;
}
}
case 3:
{
obj* x_27; 
lean::dec(x_5);
x_27 = lean::cnstr_get(x_6, 1);
lean::inc(x_27);
lean::dec(x_6);
if (lean::obj_tag(x_27) == 0)
{
obj* x_30; 
x_30 = l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__2___closed__1;
return x_30;
}
else
{
obj* x_31; obj* x_34; obj* x_35; 
x_31 = lean::cnstr_get(x_27, 0);
lean::inc(x_31);
lean::dec(x_27);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_31);
return x_35;
}
}
default:
{
obj* x_38; 
lean::dec(x_11);
lean::dec(x_5);
x_38 = lean::cnstr_get(x_6, 1);
lean::inc(x_38);
lean::dec(x_6);
if (lean::obj_tag(x_38) == 0)
{
obj* x_41; 
x_41 = l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__2___closed__1;
return x_41;
}
else
{
obj* x_42; obj* x_45; obj* x_46; 
x_42 = lean::cnstr_get(x_38, 0);
lean::inc(x_42);
lean::dec(x_38);
x_45 = lean::box(0);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_42);
return x_46;
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_bindersTypes_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_bindersTypes_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_bindersTypes_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_mixedBinder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("mixedBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_mixedBinder_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; uint8 x_5; obj* x_6; obj* x_7; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = 0;
x_6 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_5);
x_7 = lean::cnstr_get(x_6, 1);
lean::inc(x_7);
lean::dec(x_6);
x_10 = lean::apply_1(x_7, x_2);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_10);
lean::cnstr_set(x_11, 1, x_1);
x_12 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_13 = l_Lean_Parser_Syntax_mkNode(x_12, x_11);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_1);
x_15 = l_Lean_Parser_Term_mixedBinder;
x_16 = l_Lean_Parser_Syntax_mkNode(x_15, x_14);
return x_16;
}
else
{
obj* x_17; obj* x_20; obj* x_21; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; 
x_17 = lean::cnstr_get(x_0, 0);
lean::inc(x_17);
lean::dec(x_0);
x_20 = l_Lean_Parser_Term_binderIdent_HasView;
x_21 = lean::cnstr_get(x_20, 1);
lean::inc(x_21);
lean::dec(x_20);
x_24 = lean::apply_1(x_21, x_17);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_1);
x_26 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_27 = l_Lean_Parser_Syntax_mkNode(x_26, x_25);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_1);
x_29 = l_Lean_Parser_Term_mixedBinder;
x_30 = l_Lean_Parser_Syntax_mkNode(x_29, x_28);
return x_30;
}
}
}
obj* _init_l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_0);
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
x_7 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_7, 0, x_6);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("mixedBinder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__2;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
obj* x_58; obj* x_59; obj* x_62; obj* x_63; 
x_58 = l_Lean_Parser_Term_binderIdent_HasView;
x_59 = lean::cnstr_get(x_58, 0);
lean::inc(x_59);
lean::dec(x_58);
x_62 = lean::apply_1(x_59, x_52);
x_63 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_63, 0, x_62);
return x_63;
}
else
{
uint8 x_64; obj* x_65; obj* x_66; obj* x_69; obj* x_70; 
x_64 = 0;
x_65 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_64);
x_66 = lean::cnstr_get(x_65, 0);
lean::inc(x_66);
lean::dec(x_65);
x_69 = lean::apply_1(x_66, x_52);
x_70 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_70, 0, x_69);
return x_70;
}
}
else
{
obj* x_74; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_74 = l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1;
return x_74;
}
}
}
}
}
}
}
else
{
obj* x_77; 
lean::dec(x_8);
lean::dec(x_17);
x_77 = l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1;
return x_77;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_mixedBinder_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_mixedBinder_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_mixedBinder_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_mixedBinder_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_bindersRemainder() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("bindersRemainder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_bindersRemainder_HasView_x_27___elambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_Lean_Parser_Term_mixedBinder_HasView;
x_1 = lean::cnstr_get(x_0, 1);
lean::inc(x_1);
lean::dec(x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_bindersRemainder_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_Lean_Parser_Term_bindersTypes_HasView;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_12 = l_Lean_Parser_Syntax_mkNode(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_Lean_Parser_Term_bindersRemainder;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27___elambda__1___closed__1;
x_20 = l_List_map___main___rarg(x_19, x_16);
x_21 = l_Lean_Parser_noKind;
x_22 = l_Lean_Parser_Syntax_mkNode(x_21, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_1);
x_24 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_25 = l_Lean_Parser_Syntax_mkNode(x_24, x_23);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_1);
x_27 = l_Lean_Parser_Term_bindersRemainder;
x_28 = l_Lean_Parser_Syntax_mkNode(x_27, x_26);
return x_28;
}
}
}
obj* _init_l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = l_Lean_Parser_Term_mixedBinder_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_Lean_Parser_Term_mixedBinder_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_bindersTypes_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("bindersRemainder");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__4;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
obj* x_58; 
x_58 = l_Lean_Parser_Syntax_asNode___main(x_52);
if (lean::obj_tag(x_58) == 0)
{
obj* x_59; 
x_59 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__1;
return x_59;
}
else
{
obj* x_60; obj* x_63; obj* x_66; obj* x_67; obj* x_68; 
x_60 = lean::cnstr_get(x_58, 0);
lean::inc(x_60);
lean::dec(x_58);
x_63 = lean::cnstr_get(x_60, 1);
lean::inc(x_63);
lean::dec(x_60);
x_66 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__2;
x_67 = l_List_map___main___rarg(x_66, x_63);
x_68 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_68, 0, x_67);
return x_68;
}
}
else
{
obj* x_69; obj* x_70; obj* x_73; obj* x_74; 
x_69 = l_Lean_Parser_Term_bindersTypes_HasView;
x_70 = lean::cnstr_get(x_69, 0);
lean::inc(x_70);
lean::dec(x_69);
x_73 = lean::apply_1(x_70, x_52);
x_74 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_74, 0, x_73);
return x_74;
}
}
else
{
obj* x_78; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_78 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3;
return x_78;
}
}
}
}
}
}
}
else
{
obj* x_81; 
lean::dec(x_8);
lean::dec(x_17);
x_81 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3;
return x_81;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_bindersRemainder_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bindersRemainder_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_bindersRemainder_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_bindersRemainder_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_bindersExt() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("bindersExt");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_bindersExt_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__1;
x_7 = l_List_map___main___rarg(x_6, x_1);
x_8 = l_Lean_Parser_noKind;
x_9 = l_Lean_Parser_Syntax_mkNode(x_8, x_7);
if (lean::obj_tag(x_3) == 0)
{
obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_10 = l_Lean_Parser_detailIdent_HasView_x_27___elambda__1___closed__1;
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_9);
lean::cnstr_set(x_11, 1, x_10);
x_12 = l_Lean_Parser_Term_bindersExt;
x_13 = l_Lean_Parser_Syntax_mkNode(x_12, x_11);
return x_13;
}
else
{
obj* x_14; obj* x_17; obj* x_18; obj* x_19; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_14 = lean::cnstr_get(x_3, 0);
lean::inc(x_14);
lean::dec(x_3);
x_17 = lean::box(0);
x_18 = l_Lean_Parser_Term_bindersRemainder_HasView;
x_19 = lean::cnstr_get(x_18, 1);
lean::inc(x_19);
lean::dec(x_18);
x_22 = lean::apply_1(x_19, x_14);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_17);
x_24 = l_Lean_Parser_Syntax_mkNode(x_8, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_17);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_9);
lean::cnstr_set(x_26, 1, x_25);
x_27 = l_Lean_Parser_Term_bindersExt;
x_28 = l_Lean_Parser_Syntax_mkNode(x_27, x_26);
return x_28;
}
}
}
obj* _init_l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_12; obj* x_13; obj* x_14; 
x_0 = l_Lean_Parser_Term_binderIdent_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = l_Lean_Parser_Term_bindersRemainder_HasView;
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_4);
x_13 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_13, 0, x_12);
x_14 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_14, 0, x_7);
lean::cnstr_set(x_14, 1, x_13);
return x_14;
}
}
obj* _init_l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = l_Lean_Parser_Term_binderIdent_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
return x_9;
}
}
obj* _init_l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__2;
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
if (lean::obj_tag(x_11) == 0)
{
obj* x_13; obj* x_16; obj* x_17; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_13 = lean::cnstr_get(x_6, 0);
lean::inc(x_13);
lean::dec(x_6);
x_16 = l_Lean_Parser_Term_bindersRemainder_HasView;
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
lean::dec(x_16);
x_20 = lean::apply_1(x_17, x_13);
if (lean::is_scalar(x_5)) {
 x_21 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_21 = x_5;
}
lean::cnstr_set(x_21, 0, x_20);
x_22 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__3;
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_21);
return x_23;
}
else
{
obj* x_27; 
lean::dec(x_11);
lean::dec(x_6);
lean::dec(x_5);
x_27 = l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__1;
return x_27;
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_bindersRemainder_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__5() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__3;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; obj* x_9; obj* x_11; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
x_9 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__4;
lean::inc(x_6);
x_11 = l_List_map___main___rarg(x_9, x_6);
if (lean::obj_tag(x_6) == 0)
{
obj* x_13; obj* x_14; 
lean::dec(x_5);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_14, 0, x_11);
lean::cnstr_set(x_14, 1, x_13);
return x_14;
}
else
{
obj* x_15; 
x_15 = lean::cnstr_get(x_6, 1);
lean::inc(x_15);
if (lean::obj_tag(x_15) == 0)
{
obj* x_17; obj* x_20; obj* x_21; obj* x_24; obj* x_25; obj* x_26; 
x_17 = lean::cnstr_get(x_6, 0);
lean::inc(x_17);
lean::dec(x_6);
x_20 = l_Lean_Parser_Term_bindersRemainder_HasView;
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
lean::dec(x_20);
x_24 = lean::apply_1(x_21, x_17);
if (lean::is_scalar(x_5)) {
 x_25 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_25 = x_5;
}
lean::cnstr_set(x_25, 0, x_24);
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_11);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_30; obj* x_31; 
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_15);
x_30 = l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__4;
x_31 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_31, 0, x_11);
lean::cnstr_set(x_31, 1, x_30);
return x_31;
}
}
}
}
}
obj* l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__5;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
x_18 = l_Lean_Parser_Syntax_asNode___main(x_2);
if (lean::obj_tag(x_18) == 0)
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_19; 
x_19 = l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__3;
return x_19;
}
else
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_1, 0);
lean::inc(x_20);
lean::dec(x_1);
x_23 = l_Lean_Parser_Syntax_asNode___main(x_20);
if (lean::obj_tag(x_23) == 0)
{
obj* x_24; 
x_24 = l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__1;
return x_24;
}
else
{
obj* x_25; obj* x_27; obj* x_28; 
x_25 = lean::cnstr_get(x_23, 0);
if (lean::is_exclusive(x_23)) {
 lean::cnstr_set(x_23, 0, lean::box(0));
 x_27 = x_23;
} else {
 lean::inc(x_25);
 lean::dec(x_23);
 x_27 = lean::box(0);
}
x_28 = lean::cnstr_get(x_25, 1);
lean::inc(x_28);
lean::dec(x_25);
if (lean::obj_tag(x_28) == 0)
{
obj* x_32; 
lean::dec(x_27);
x_32 = l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__2;
return x_32;
}
else
{
obj* x_33; 
x_33 = lean::cnstr_get(x_28, 1);
lean::inc(x_33);
if (lean::obj_tag(x_33) == 0)
{
obj* x_35; obj* x_38; obj* x_39; obj* x_42; obj* x_43; obj* x_44; obj* x_45; 
x_35 = lean::cnstr_get(x_28, 0);
lean::inc(x_35);
lean::dec(x_28);
x_38 = l_Lean_Parser_Term_bindersRemainder_HasView;
x_39 = lean::cnstr_get(x_38, 0);
lean::inc(x_39);
lean::dec(x_38);
x_42 = lean::apply_1(x_39, x_35);
if (lean::is_scalar(x_27)) {
 x_43 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_43 = x_27;
}
lean::cnstr_set(x_43, 0, x_42);
x_44 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__3;
x_45 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_43);
return x_45;
}
else
{
obj* x_49; 
lean::dec(x_28);
lean::dec(x_27);
lean::dec(x_33);
x_49 = l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__1;
return x_49;
}
}
}
}
}
else
{
obj* x_50; obj* x_53; obj* x_56; obj* x_57; 
x_50 = lean::cnstr_get(x_18, 0);
lean::inc(x_50);
lean::dec(x_18);
x_53 = lean::cnstr_get(x_50, 1);
lean::inc(x_53);
lean::dec(x_50);
x_56 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__4;
x_57 = l_List_map___main___rarg(x_56, x_53);
if (lean::obj_tag(x_1) == 0)
{
obj* x_58; obj* x_59; 
x_58 = lean::box(3);
x_59 = l_Lean_Parser_Syntax_asNode___main(x_58);
if (lean::obj_tag(x_59) == 0)
{
obj* x_60; obj* x_61; 
x_60 = l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__4;
x_61 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_61, 0, x_57);
lean::cnstr_set(x_61, 1, x_60);
return x_61;
}
else
{
obj* x_62; obj* x_64; obj* x_65; 
x_62 = lean::cnstr_get(x_59, 0);
if (lean::is_exclusive(x_59)) {
 lean::cnstr_set(x_59, 0, lean::box(0));
 x_64 = x_59;
} else {
 lean::inc(x_62);
 lean::dec(x_59);
 x_64 = lean::box(0);
}
x_65 = lean::cnstr_get(x_62, 1);
lean::inc(x_65);
lean::dec(x_62);
if (lean::obj_tag(x_65) == 0)
{
obj* x_69; obj* x_70; 
lean::dec(x_64);
x_69 = lean::box(0);
x_70 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_70, 0, x_57);
lean::cnstr_set(x_70, 1, x_69);
return x_70;
}
else
{
obj* x_71; 
x_71 = lean::cnstr_get(x_65, 1);
lean::inc(x_71);
if (lean::obj_tag(x_71) == 0)
{
obj* x_73; obj* x_76; obj* x_77; obj* x_80; obj* x_81; obj* x_82; 
x_73 = lean::cnstr_get(x_65, 0);
lean::inc(x_73);
lean::dec(x_65);
x_76 = l_Lean_Parser_Term_bindersRemainder_HasView;
x_77 = lean::cnstr_get(x_76, 0);
lean::inc(x_77);
lean::dec(x_76);
x_80 = lean::apply_1(x_77, x_73);
if (lean::is_scalar(x_64)) {
 x_81 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_81 = x_64;
}
lean::cnstr_set(x_81, 0, x_80);
x_82 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_82, 0, x_57);
lean::cnstr_set(x_82, 1, x_81);
return x_82;
}
else
{
obj* x_86; obj* x_87; 
lean::dec(x_65);
lean::dec(x_64);
lean::dec(x_71);
x_86 = l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__4;
x_87 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_87, 0, x_57);
lean::cnstr_set(x_87, 1, x_86);
return x_87;
}
}
}
}
else
{
obj* x_88; obj* x_91; 
x_88 = lean::cnstr_get(x_1, 0);
lean::inc(x_88);
lean::dec(x_1);
x_91 = l_Lean_Parser_Syntax_asNode___main(x_88);
if (lean::obj_tag(x_91) == 0)
{
obj* x_92; obj* x_93; 
x_92 = l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__4;
x_93 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_93, 0, x_57);
lean::cnstr_set(x_93, 1, x_92);
return x_93;
}
else
{
obj* x_94; obj* x_96; obj* x_97; 
x_94 = lean::cnstr_get(x_91, 0);
if (lean::is_exclusive(x_91)) {
 lean::cnstr_set(x_91, 0, lean::box(0));
 x_96 = x_91;
} else {
 lean::inc(x_94);
 lean::dec(x_91);
 x_96 = lean::box(0);
}
x_97 = lean::cnstr_get(x_94, 1);
lean::inc(x_97);
lean::dec(x_94);
if (lean::obj_tag(x_97) == 0)
{
obj* x_101; obj* x_102; 
lean::dec(x_96);
x_101 = lean::box(0);
x_102 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_102, 0, x_57);
lean::cnstr_set(x_102, 1, x_101);
return x_102;
}
else
{
obj* x_103; 
x_103 = lean::cnstr_get(x_97, 1);
lean::inc(x_103);
if (lean::obj_tag(x_103) == 0)
{
obj* x_105; obj* x_108; obj* x_109; obj* x_112; obj* x_113; obj* x_114; 
x_105 = lean::cnstr_get(x_97, 0);
lean::inc(x_105);
lean::dec(x_97);
x_108 = l_Lean_Parser_Term_bindersRemainder_HasView;
x_109 = lean::cnstr_get(x_108, 0);
lean::inc(x_109);
lean::dec(x_108);
x_112 = lean::apply_1(x_109, x_105);
if (lean::is_scalar(x_96)) {
 x_113 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_113 = x_96;
}
lean::cnstr_set(x_113, 0, x_112);
x_114 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_114, 0, x_57);
lean::cnstr_set(x_114, 1, x_113);
return x_114;
}
else
{
obj* x_118; obj* x_119; 
lean::dec(x_96);
lean::dec(x_97);
lean::dec(x_103);
x_118 = l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__4;
x_119 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_119, 0, x_57);
lean::cnstr_set(x_119, 1, x_118);
return x_119;
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_bindersExt_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bindersExt_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_bindersExt_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_bindersExt_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_bindersExt_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_13; uint8 x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_21; obj* x_23; obj* x_25; obj* x_27; obj* x_29; obj* x_31; obj* x_34; obj* x_36; obj* x_38; obj* x_40; obj* x_42; obj* x_44; obj* x_47; 
x_0 = l_Lean_Parser_Term_binderIdent_Parser_Lean_Parser_HasTokens;
x_1 = l_Lean_Parser_tokens___rarg(x_0);
x_2 = lean::mk_string(":");
x_3 = lean::mk_nat_obj(0ul);
x_4 = l_Lean_Parser_symbol_tokens___rarg(x_2, x_3);
lean::dec(x_2);
x_6 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_3);
x_7 = lean::box(0);
x_8 = l_Lean_Parser_List_cons_tokens___rarg(x_6, x_7);
lean::dec(x_6);
x_10 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_8);
lean::dec(x_8);
lean::dec(x_4);
x_13 = l_Lean_Parser_tokens___rarg(x_10);
lean::dec(x_10);
x_15 = 0;
x_16 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens(x_15);
x_17 = l_Lean_Parser_List_cons_tokens___rarg(x_0, x_7);
x_18 = l_Lean_Parser_List_cons_tokens___rarg(x_16, x_17);
lean::dec(x_17);
lean::dec(x_16);
x_21 = l_Lean_Parser_tokens___rarg(x_18);
lean::dec(x_18);
x_23 = l_Lean_Parser_List_cons_tokens___rarg(x_21, x_7);
lean::dec(x_21);
x_25 = l_Lean_Parser_tokens___rarg(x_23);
lean::dec(x_23);
x_27 = l_Lean_Parser_tokens___rarg(x_25);
lean::dec(x_25);
x_29 = l_Lean_Parser_List_cons_tokens___rarg(x_27, x_7);
lean::dec(x_27);
x_31 = l_Lean_Parser_List_cons_tokens___rarg(x_13, x_29);
lean::dec(x_29);
lean::dec(x_13);
x_34 = l_Lean_Parser_tokens___rarg(x_31);
lean::dec(x_31);
x_36 = l_Lean_Parser_List_cons_tokens___rarg(x_34, x_7);
lean::dec(x_34);
x_38 = l_Lean_Parser_tokens___rarg(x_36);
lean::dec(x_36);
x_40 = l_Lean_Parser_tokens___rarg(x_38);
lean::dec(x_38);
x_42 = l_Lean_Parser_List_cons_tokens___rarg(x_40, x_7);
lean::dec(x_40);
x_44 = l_Lean_Parser_List_cons_tokens___rarg(x_1, x_42);
lean::dec(x_42);
lean::dec(x_1);
x_47 = l_Lean_Parser_tokens___rarg(x_44);
lean::dec(x_44);
return x_47;
}
}
obj* _init_l_Lean_Parser_Term_bindersExt_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_2; obj* x_3; obj* x_4; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; uint8 x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderIdent_Parser), 5, 0);
lean::inc(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_many___at_Lean_Parser_command_NotationSpec_Parser_Lean_Parser_HasTokens___spec__1), 6, 1);
lean::closure_set(x_2, 0, x_0);
x_3 = lean::mk_string(":");
x_4 = l_String_trim(x_3);
lean::dec(x_3);
lean::inc(x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_7, 0, x_4);
x_8 = lean::mk_nat_obj(0ul);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_9, 0, x_4);
lean::closure_set(x_9, 1, x_8);
lean::closure_set(x_9, 2, x_7);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_9);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_Lean_Parser_Term_bindersTypes;
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_15, 0, x_14);
lean::closure_set(x_15, 1, x_13);
x_16 = 0;
x_17 = lean::box(x_16);
lean::inc(x_17);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bracketedBinder_Parser___boxed), 6, 1);
lean::closure_set(x_19, 0, x_17);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_0);
lean::cnstr_set(x_20, 1, x_11);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_22, 0, x_21);
lean::closure_set(x_22, 1, x_8);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_11);
x_24 = l_Lean_Parser_Term_mixedBinder;
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_25, 0, x_24);
lean::closure_set(x_25, 1, x_23);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_many1___at_Lean_Parser_command_NotationSpec_Parser_Lean_Parser_HasTokens___spec__2), 6, 1);
lean::closure_set(x_26, 0, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_11);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_15);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_29, 0, x_28);
lean::closure_set(x_29, 1, x_8);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_11);
x_31 = l_Lean_Parser_Term_bindersRemainder;
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_32, 0, x_31);
lean::closure_set(x_32, 1, x_30);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_33, 0, x_32);
lean::closure_set(x_33, 1, x_17);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_11);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_2);
lean::cnstr_set(x_35, 1, x_34);
x_36 = l_Lean_Parser_TermParserM_Monad;
x_37 = l_Lean_Parser_TermParserM_MonadExcept;
x_38 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_39 = l_Lean_Parser_TermParserM_Alternative;
x_40 = l_Lean_Parser_Term_bindersExt;
x_41 = l_Lean_Parser_Term_bindersExt_HasView;
x_42 = l_Lean_Parser_Combinators_node_view___rarg(x_36, x_37, x_38, x_39, x_40, x_35, x_41);
lean::dec(x_35);
return x_42;
}
}
obj* _init_l_Lean_Parser_Term_bindersExt_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_2; obj* x_3; obj* x_4; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; uint8 x_16; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binderIdent_Parser), 5, 0);
lean::inc(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_many___at_Lean_Parser_command_NotationSpec_Parser_Lean_Parser_HasTokens___spec__1), 6, 1);
lean::closure_set(x_2, 0, x_0);
x_3 = lean::mk_string(":");
x_4 = l_String_trim(x_3);
lean::dec(x_3);
lean::inc(x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_7, 0, x_4);
x_8 = lean::mk_nat_obj(0ul);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_9, 0, x_4);
lean::closure_set(x_9, 1, x_8);
lean::closure_set(x_9, 2, x_7);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_10, 0, x_8);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_9);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_Lean_Parser_Term_bindersTypes;
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_15, 0, x_14);
lean::closure_set(x_15, 1, x_13);
x_16 = 0;
x_17 = lean::box(x_16);
lean::inc(x_17);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bracketedBinder_Parser___boxed), 6, 1);
lean::closure_set(x_19, 0, x_17);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_0);
lean::cnstr_set(x_20, 1, x_11);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_22, 0, x_21);
lean::closure_set(x_22, 1, x_8);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_11);
x_24 = l_Lean_Parser_Term_mixedBinder;
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_25, 0, x_24);
lean::closure_set(x_25, 1, x_23);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_many1___at_Lean_Parser_command_NotationSpec_Parser_Lean_Parser_HasTokens___spec__2), 6, 1);
lean::closure_set(x_26, 0, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_11);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_15);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_29, 0, x_28);
lean::closure_set(x_29, 1, x_8);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_11);
x_31 = l_Lean_Parser_Term_bindersRemainder;
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_32, 0, x_31);
lean::closure_set(x_32, 1, x_30);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_33, 0, x_32);
lean::closure_set(x_33, 1, x_17);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_11);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_2);
lean::cnstr_set(x_35, 1, x_34);
return x_35;
}
}
obj* l_Lean_Parser_Term_bindersExt_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_bindersExt;
x_6 = l_Lean_Parser_Term_bindersExt_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_binders() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binders");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_binders_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_Lean_Parser_Term_bindersExt_HasView;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_12 = l_Lean_Parser_Syntax_mkNode(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_Lean_Parser_Term_binders;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_Lean_Parser_Term_simpleBinder_HasView;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_26 = l_Lean_Parser_Syntax_mkNode(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_Lean_Parser_Term_binders;
x_29 = l_Lean_Parser_Syntax_mkNode(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_bindersExt_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("binders");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_binders_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__2;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
obj* x_58; obj* x_59; obj* x_62; obj* x_63; 
x_58 = l_Lean_Parser_Term_simpleBinder_HasView;
x_59 = lean::cnstr_get(x_58, 0);
lean::inc(x_59);
lean::dec(x_58);
x_62 = lean::apply_1(x_59, x_52);
x_63 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_63, 0, x_62);
return x_63;
}
else
{
obj* x_64; obj* x_65; obj* x_68; obj* x_69; 
x_64 = l_Lean_Parser_Term_bindersExt_HasView;
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
lean::dec(x_64);
x_68 = lean::apply_1(x_65, x_52);
x_69 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_69, 0, x_68);
return x_69;
}
}
else
{
obj* x_73; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_73 = l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1;
return x_73;
}
}
}
}
}
}
}
else
{
obj* x_76; 
lean::dec(x_8);
lean::dec(x_17);
x_76 = l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1;
return x_76;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_binders_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binders_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binders_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_binders_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_binders_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_binders_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_6; obj* x_8; obj* x_10; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_Term_simpleBinder_Parser_Lean_Parser_HasTokens;
x_2 = l_Lean_Parser_List_cons_tokens___rarg(x_1, x_0);
x_3 = l_Lean_Parser_Term_bindersExt_Parser_Lean_Parser_HasTokens;
x_4 = l_Lean_Parser_List_cons_tokens___rarg(x_3, x_2);
lean::dec(x_2);
x_6 = l_Lean_Parser_tokens___rarg(x_4);
lean::dec(x_4);
x_8 = l_Lean_Parser_List_cons_tokens___rarg(x_6, x_0);
lean::dec(x_6);
x_10 = l_Lean_Parser_tokens___rarg(x_8);
lean::dec(x_8);
return x_10;
}
}
obj* _init_l_Lean_Parser_Term_binders_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_simpleBinder_Parser), 5, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bindersExt_Parser), 5, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_6, 0, x_4);
lean::closure_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
x_8 = l_Lean_Parser_TermParserM_Monad;
x_9 = l_Lean_Parser_TermParserM_MonadExcept;
x_10 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_11 = l_Lean_Parser_TermParserM_Alternative;
x_12 = l_Lean_Parser_Term_binders;
x_13 = l_Lean_Parser_Term_binders_HasView;
x_14 = l_Lean_Parser_Combinators_node_view___rarg(x_8, x_9, x_10, x_11, x_12, x_7, x_13);
lean::dec(x_7);
return x_14;
}
}
obj* _init_l_Lean_Parser_Term_binders_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_simpleBinder_Parser), 5, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bindersExt_Parser), 5, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_6, 0, x_4);
lean::closure_set(x_6, 1, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
return x_7;
}
}
obj* l_Lean_Parser_Term_binders_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_binders;
x_6 = l_Lean_Parser_Term_binders_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinders() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("bracketedBinders");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1___closed__1() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_0);
x_2 = lean::cnstr_get(x_1, 1);
lean::inc(x_2);
lean::dec(x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_Lean_Parser_Term_simpleBinder_HasView;
x_1 = lean::cnstr_get(x_0, 1);
lean::inc(x_1);
lean::dec(x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1___closed__1;
x_6 = l_List_map___main___rarg(x_5, x_2);
x_7 = l_Lean_Parser_noKind;
x_8 = l_Lean_Parser_Syntax_mkNode(x_7, x_6);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_1);
x_10 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_1);
x_13 = l_Lean_Parser_Term_bracketedBinders;
x_14 = l_Lean_Parser_Syntax_mkNode(x_13, x_12);
return x_14;
}
else
{
obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_15 = lean::cnstr_get(x_0, 0);
lean::inc(x_15);
lean::dec(x_0);
x_18 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1___closed__2;
x_19 = l_List_map___main___rarg(x_18, x_15);
x_20 = l_Lean_Parser_noKind;
x_21 = l_Lean_Parser_Syntax_mkNode(x_20, x_19);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_1);
x_23 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_24 = l_Lean_Parser_Syntax_mkNode(x_23, x_22);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_1);
x_26 = l_Lean_Parser_Term_bracketedBinders;
x_27 = l_Lean_Parser_Syntax_mkNode(x_26, x_25);
return x_27;
}
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = l_Lean_Parser_Term_simpleBinder_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = l_Lean_Parser_Term_simpleBinder_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__3() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_0);
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_9, 0, x_8);
return x_9;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__4() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_0);
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__3;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_9; obj* x_10; obj* x_11; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
x_9 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__4;
x_10 = l_List_map___main___rarg(x_9, x_6);
x_11 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_11, 0, x_10);
return x_11;
}
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__6() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("bracketedBinders");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__6;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
obj* x_58; 
x_58 = l_Lean_Parser_Syntax_asNode___main(x_52);
if (lean::obj_tag(x_58) == 0)
{
obj* x_59; 
x_59 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__1;
return x_59;
}
else
{
obj* x_60; obj* x_63; obj* x_66; obj* x_67; obj* x_68; 
x_60 = lean::cnstr_get(x_58, 0);
lean::inc(x_60);
lean::dec(x_58);
x_63 = lean::cnstr_get(x_60, 1);
lean::inc(x_63);
lean::dec(x_60);
x_66 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__2;
x_67 = l_List_map___main___rarg(x_66, x_63);
x_68 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_68, 0, x_67);
return x_68;
}
}
else
{
obj* x_69; 
x_69 = l_Lean_Parser_Syntax_asNode___main(x_52);
if (lean::obj_tag(x_69) == 0)
{
obj* x_70; 
x_70 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__3;
return x_70;
}
else
{
obj* x_71; obj* x_74; obj* x_77; obj* x_78; obj* x_79; 
x_71 = lean::cnstr_get(x_69, 0);
lean::inc(x_71);
lean::dec(x_69);
x_74 = lean::cnstr_get(x_71, 1);
lean::inc(x_74);
lean::dec(x_71);
x_77 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__4;
x_78 = l_List_map___main___rarg(x_77, x_74);
x_79 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_79, 0, x_78);
return x_79;
}
}
}
else
{
obj* x_83; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_83 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5;
return x_83;
}
}
}
}
}
}
}
else
{
obj* x_86; 
lean::dec(x_8);
lean::dec(x_17);
x_86 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5;
return x_86;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinders_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinders_Parser_Lean_Parser_HasTokens() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_12; obj* x_14; obj* x_16; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens(x_0);
x_2 = l_Lean_Parser_tokens___rarg(x_1);
lean::dec(x_1);
x_4 = l_Lean_Parser_Term_simpleBinder_Parser_Lean_Parser_HasTokens;
x_5 = l_Lean_Parser_tokens___rarg(x_4);
x_6 = lean::box(0);
x_7 = l_Lean_Parser_List_cons_tokens___rarg(x_5, x_6);
lean::dec(x_5);
x_9 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_7);
lean::dec(x_7);
lean::dec(x_2);
x_12 = l_Lean_Parser_tokens___rarg(x_9);
lean::dec(x_9);
x_14 = l_Lean_Parser_List_cons_tokens___rarg(x_12, x_6);
lean::dec(x_12);
x_16 = l_Lean_Parser_tokens___rarg(x_14);
lean::dec(x_14);
return x_16;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinders_Parser_Lean_Parser_HasView() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_0 = 0;
x_1 = lean::box(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bracketedBinder_Parser___boxed), 6, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_many___at_Lean_Parser_command_NotationSpec_Parser_Lean_Parser_HasTokens___spec__1), 6, 1);
lean::closure_set(x_3, 0, x_2);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_simpleBinder_Parser), 5, 0);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_many___at_Lean_Parser_command_NotationSpec_Parser_Lean_Parser_HasTokens___spec__1), 6, 1);
lean::closure_set(x_5, 0, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_3);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::mk_nat_obj(0ul);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_10, 0, x_8);
lean::closure_set(x_10, 1, x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_10);
lean::cnstr_set(x_11, 1, x_6);
x_12 = l_Lean_Parser_TermParserM_Monad;
x_13 = l_Lean_Parser_TermParserM_MonadExcept;
x_14 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_15 = l_Lean_Parser_TermParserM_Alternative;
x_16 = l_Lean_Parser_Term_bracketedBinders;
x_17 = l_Lean_Parser_Term_bracketedBinders_HasView;
x_18 = l_Lean_Parser_Combinators_node_view___rarg(x_12, x_13, x_14, x_15, x_16, x_11, x_17);
lean::dec(x_11);
return x_18;
}
}
obj* _init_l_Lean_Parser_Term_bracketedBinders_Parser___closed__1() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_0 = 0;
x_1 = lean::box(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bracketedBinder_Parser___boxed), 6, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_many___at_Lean_Parser_command_NotationSpec_Parser_Lean_Parser_HasTokens___spec__1), 6, 1);
lean::closure_set(x_3, 0, x_2);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_simpleBinder_Parser), 5, 0);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_many___at_Lean_Parser_command_NotationSpec_Parser_Lean_Parser_HasTokens___spec__1), 6, 1);
lean::closure_set(x_5, 0, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_3);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::mk_nat_obj(0ul);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_10, 0, x_8);
lean::closure_set(x_10, 1, x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_10);
lean::cnstr_set(x_11, 1, x_6);
return x_11;
}
}
obj* l_Lean_Parser_Term_bracketedBinders_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_bracketedBinders;
x_6 = l_Lean_Parser_Term_bracketedBinders_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_lambda() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("lambda");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_lambda_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_10; obj* x_11; obj* x_14; obj* x_15; obj* x_16; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
lean::dec(x_0);
x_10 = l_Lean_Parser_Term_binders_HasView;
x_11 = lean::cnstr_get(x_10, 1);
lean::inc(x_11);
lean::dec(x_10);
x_14 = lean::apply_1(x_11, x_3);
x_15 = lean::box(0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_7);
lean::cnstr_set(x_16, 1, x_15);
if (lean::obj_tag(x_5) == 0)
{
obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_17 = lean::box(3);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_16);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_14);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_1);
lean::cnstr_set(x_20, 1, x_19);
x_21 = l_Lean_Parser_Term_lambda;
x_22 = l_Lean_Parser_Syntax_mkNode(x_21, x_20);
return x_22;
}
else
{
obj* x_23; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_23 = lean::cnstr_get(x_5, 0);
lean::inc(x_23);
lean::dec(x_5);
x_26 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_26, 0, x_23);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_16);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_14);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_1);
lean::cnstr_set(x_29, 1, x_28);
x_30 = l_Lean_Parser_Term_lambda;
x_31 = l_Lean_Parser_Syntax_mkNode(x_30, x_29);
return x_31;
}
}
}
obj* _init_l_Lean_Parser_Term_lambda_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = l_Lean_Parser_Term_binders_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_7, 0, x_4);
lean::cnstr_set(x_7, 1, x_5);
lean::cnstr_set(x_7, 2, x_6);
lean::cnstr_set(x_7, 3, x_4);
return x_7;
}
}
obj* l_Lean_Parser_Term_lambda_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_lambda_HasView_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; obj* x_19; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_21; 
x_21 = lean::box(3);
x_18 = x_1;
x_19 = x_21;
goto lbl_20;
}
else
{
obj* x_22; obj* x_24; 
x_22 = lean::cnstr_get(x_1, 0);
lean::inc(x_22);
x_24 = lean::cnstr_get(x_1, 1);
lean::inc(x_24);
lean::dec(x_1);
x_18 = x_24;
x_19 = x_22;
goto lbl_20;
}
lbl_20:
{
obj* x_27; obj* x_28; obj* x_31; 
x_27 = l_Lean_Parser_Term_binders_HasView;
x_28 = lean::cnstr_get(x_27, 0);
lean::inc(x_28);
lean::dec(x_27);
x_31 = lean::apply_1(x_28, x_19);
if (lean::obj_tag(x_18) == 0)
{
obj* x_32; obj* x_33; obj* x_34; 
x_32 = lean::box(0);
x_33 = lean::box(3);
x_34 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_34, 0, x_2);
lean::cnstr_set(x_34, 1, x_31);
lean::cnstr_set(x_34, 2, x_32);
lean::cnstr_set(x_34, 3, x_33);
return x_34;
}
else
{
obj* x_35; 
x_35 = lean::cnstr_get(x_18, 0);
lean::inc(x_35);
switch (lean::obj_tag(x_35)) {
case 0:
{
obj* x_37; obj* x_40; obj* x_43; 
x_37 = lean::cnstr_get(x_18, 1);
lean::inc(x_37);
lean::dec(x_18);
x_40 = lean::cnstr_get(x_35, 0);
lean::inc(x_40);
lean::dec(x_35);
x_43 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_43, 0, x_40);
if (lean::obj_tag(x_37) == 0)
{
obj* x_44; obj* x_45; 
x_44 = lean::box(3);
x_45 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_45, 0, x_2);
lean::cnstr_set(x_45, 1, x_31);
lean::cnstr_set(x_45, 2, x_43);
lean::cnstr_set(x_45, 3, x_44);
return x_45;
}
else
{
obj* x_46; obj* x_49; 
x_46 = lean::cnstr_get(x_37, 0);
lean::inc(x_46);
lean::dec(x_37);
x_49 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_49, 0, x_2);
lean::cnstr_set(x_49, 1, x_31);
lean::cnstr_set(x_49, 2, x_43);
lean::cnstr_set(x_49, 3, x_46);
return x_49;
}
}
case 3:
{
obj* x_50; obj* x_53; 
x_50 = lean::cnstr_get(x_18, 1);
lean::inc(x_50);
lean::dec(x_18);
x_53 = lean::box(0);
if (lean::obj_tag(x_50) == 0)
{
obj* x_54; obj* x_55; 
x_54 = lean::box(3);
x_55 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_55, 0, x_2);
lean::cnstr_set(x_55, 1, x_31);
lean::cnstr_set(x_55, 2, x_53);
lean::cnstr_set(x_55, 3, x_54);
return x_55;
}
else
{
obj* x_56; obj* x_59; 
x_56 = lean::cnstr_get(x_50, 0);
lean::inc(x_56);
lean::dec(x_50);
x_59 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_59, 0, x_2);
lean::cnstr_set(x_59, 1, x_31);
lean::cnstr_set(x_59, 2, x_53);
lean::cnstr_set(x_59, 3, x_56);
return x_59;
}
}
default:
{
obj* x_61; obj* x_64; 
lean::dec(x_35);
x_61 = lean::cnstr_get(x_18, 1);
lean::inc(x_61);
lean::dec(x_18);
x_64 = lean::box(0);
if (lean::obj_tag(x_61) == 0)
{
obj* x_65; obj* x_66; 
x_65 = lean::box(3);
x_66 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_66, 0, x_2);
lean::cnstr_set(x_66, 1, x_31);
lean::cnstr_set(x_66, 2, x_64);
lean::cnstr_set(x_66, 3, x_65);
return x_66;
}
else
{
obj* x_67; obj* x_70; 
x_67 = lean::cnstr_get(x_61, 0);
lean::inc(x_67);
lean::dec(x_61);
x_70 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_70, 0, x_2);
lean::cnstr_set(x_70, 1, x_31);
lean::cnstr_set(x_70, 2, x_64);
lean::cnstr_set(x_70, 3, x_67);
return x_70;
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_lambda_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_lambda_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_lambda_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_lambda_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_lambda_HasView_x_27;
return x_0;
}
}
obj* l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
x_8 = l_String_trim(x_0);
lean::inc(x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_10, 0, x_8);
lean::inc(x_2);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___spec__1___boxed), 6, 3);
lean::closure_set(x_12, 0, x_8);
lean::closure_set(x_12, 1, x_2);
lean::closure_set(x_12, 2, x_10);
x_13 = l_String_trim(x_1);
lean::inc(x_13);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_15, 0, x_13);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___spec__1___boxed), 6, 3);
lean::closure_set(x_16, 0, x_13);
lean::closure_set(x_16, 1, x_2);
lean::closure_set(x_16, 2, x_15);
x_17 = lean::box(0);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_12);
lean::cnstr_set(x_19, 1, x_18);
x_20 = l_Lean_Parser_Combinators_anyOf___at_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___spec__2(x_19, x_4, x_6, x_7);
return x_20;
}
}
obj* _init_l_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_14; obj* x_17; obj* x_18; obj* x_20; obj* x_23; 
x_0 = lean::mk_string("\xce\xbb");
x_1 = lean::mk_string("fun");
x_2 = l_Lean_Parser_maxPrec;
x_3 = l_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___rarg(x_0, x_1, x_2);
lean::dec(x_1);
lean::dec(x_0);
x_6 = lean::mk_string(",");
x_7 = lean::mk_nat_obj(0ul);
x_8 = l_Lean_Parser_symbol_tokens___rarg(x_6, x_7);
lean::dec(x_6);
x_10 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_7);
x_11 = lean::box(0);
x_12 = l_Lean_Parser_List_cons_tokens___rarg(x_10, x_11);
lean::dec(x_10);
x_14 = l_Lean_Parser_List_cons_tokens___rarg(x_8, x_12);
lean::dec(x_12);
lean::dec(x_8);
x_17 = l_Lean_Parser_Term_binders_Parser_Lean_Parser_HasTokens;
x_18 = l_Lean_Parser_List_cons_tokens___rarg(x_17, x_14);
lean::dec(x_14);
x_20 = l_Lean_Parser_List_cons_tokens___rarg(x_3, x_18);
lean::dec(x_18);
lean::dec(x_3);
x_23 = l_Lean_Parser_tokens___rarg(x_20);
lean::dec(x_20);
return x_23;
}
}
obj* l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens___spec__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; 
x_8 = l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens___spec__1(x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_5);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_0 = lean::mk_string("\xce\xbb");
x_1 = lean::mk_string("fun");
x_2 = l_Lean_Parser_maxPrec;
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
lean::closure_set(x_3, 2, x_2);
x_4 = lean::mk_string(",");
x_5 = l_String_trim(x_4);
lean::dec(x_4);
lean::inc(x_5);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_8, 0, x_5);
x_9 = lean::mk_nat_obj(0ul);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_10, 0, x_5);
lean::closure_set(x_10, 1, x_9);
lean::closure_set(x_10, 2, x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_11, 0, x_9);
x_12 = lean::box(0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_10);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binders_Parser), 5, 0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_14);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_3);
lean::cnstr_set(x_17, 1, x_16);
x_18 = l_Lean_Parser_TermParserM_Monad;
x_19 = l_Lean_Parser_TermParserM_MonadExcept;
x_20 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_21 = l_Lean_Parser_TermParserM_Alternative;
x_22 = l_Lean_Parser_Term_lambda;
x_23 = l_Lean_Parser_Term_lambda_HasView;
x_24 = l_Lean_Parser_Combinators_node_view___rarg(x_18, x_19, x_20, x_21, x_22, x_17, x_23);
lean::dec(x_17);
return x_24;
}
}
obj* _init_l_Lean_Parser_Term_lambda_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_0 = lean::mk_string("\xce\xbb");
x_1 = lean::mk_string("fun");
x_2 = l_Lean_Parser_maxPrec;
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
lean::closure_set(x_3, 2, x_2);
x_4 = lean::mk_string(",");
x_5 = l_String_trim(x_4);
lean::dec(x_4);
lean::inc(x_5);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_8, 0, x_5);
x_9 = lean::mk_nat_obj(0ul);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_10, 0, x_5);
lean::closure_set(x_10, 1, x_9);
lean::closure_set(x_10, 2, x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_11, 0, x_9);
x_12 = lean::box(0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set(x_13, 1, x_12);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_10);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binders_Parser), 5, 0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_14);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_3);
lean::cnstr_set(x_17, 1, x_16);
return x_17;
}
}
obj* l_Lean_Parser_Term_lambda_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_lambda;
x_6 = l_Lean_Parser_Term_lambda_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_assumeAnonymous() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("assumeAnonymous");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
if (lean::obj_tag(x_1) == 0)
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_8 = lean::box(3);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_Lean_Parser_Term_assumeAnonymous;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
return x_11;
}
else
{
obj* x_12; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_12 = lean::cnstr_get(x_1, 0);
lean::inc(x_12);
lean::dec(x_1);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_12);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_7);
x_17 = l_Lean_Parser_Term_assumeAnonymous;
x_18 = l_Lean_Parser_Syntax_mkNode(x_17, x_16);
return x_18;
}
}
}
obj* _init_l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__2___closed__1;
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
switch (lean::obj_tag(x_11)) {
case 0:
{
obj* x_13; obj* x_16; obj* x_19; 
x_13 = lean::cnstr_get(x_6, 1);
lean::inc(x_13);
lean::dec(x_6);
x_16 = lean::cnstr_get(x_11, 0);
lean::inc(x_16);
lean::dec(x_11);
if (lean::is_scalar(x_5)) {
 x_19 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_19 = x_5;
}
lean::cnstr_set(x_19, 0, x_16);
if (lean::obj_tag(x_13) == 0)
{
obj* x_20; obj* x_21; 
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_13, 0);
lean::inc(x_22);
lean::dec(x_13);
x_25 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_25, 0, x_19);
lean::cnstr_set(x_25, 1, x_22);
return x_25;
}
}
case 3:
{
obj* x_27; 
lean::dec(x_5);
x_27 = lean::cnstr_get(x_6, 1);
lean::inc(x_27);
lean::dec(x_6);
if (lean::obj_tag(x_27) == 0)
{
obj* x_30; 
x_30 = l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__2___closed__1;
return x_30;
}
else
{
obj* x_31; obj* x_34; obj* x_35; 
x_31 = lean::cnstr_get(x_27, 0);
lean::inc(x_31);
lean::dec(x_27);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_31);
return x_35;
}
}
default:
{
obj* x_38; 
lean::dec(x_11);
lean::dec(x_5);
x_38 = lean::cnstr_get(x_6, 1);
lean::inc(x_38);
lean::dec(x_6);
if (lean::obj_tag(x_38) == 0)
{
obj* x_41; 
x_41 = l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__2___closed__1;
return x_41;
}
else
{
obj* x_42; obj* x_45; obj* x_46; 
x_42 = lean::cnstr_get(x_38, 0);
lean::inc(x_42);
lean::dec(x_38);
x_45 = lean::box(0);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_42);
return x_46;
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_assumeAnonymous_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_assumeAnonymous_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_assumeAnonymous_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_assumeBinders() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("assumeBinders");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_assumeBinders_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_Lean_Parser_Term_assumeAnonymous_HasView;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_12 = l_Lean_Parser_Syntax_mkNode(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_Lean_Parser_Term_assumeBinders;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_Lean_Parser_Term_binders_HasView;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_26 = l_Lean_Parser_Syntax_mkNode(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_Lean_Parser_Term_assumeBinders;
x_29 = l_Lean_Parser_Syntax_mkNode(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_assumeAnonymous_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("assumeBinders");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__2;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
obj* x_58; obj* x_59; obj* x_62; obj* x_63; 
x_58 = l_Lean_Parser_Term_binders_HasView;
x_59 = lean::cnstr_get(x_58, 0);
lean::inc(x_59);
lean::dec(x_58);
x_62 = lean::apply_1(x_59, x_52);
x_63 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_63, 0, x_62);
return x_63;
}
else
{
obj* x_64; obj* x_65; obj* x_68; obj* x_69; 
x_64 = l_Lean_Parser_Term_assumeAnonymous_HasView;
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
lean::dec(x_64);
x_68 = lean::apply_1(x_65, x_52);
x_69 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_69, 0, x_68);
return x_69;
}
}
else
{
obj* x_73; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_73 = l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1;
return x_73;
}
}
}
}
}
}
}
else
{
obj* x_76; 
lean::dec(x_8);
lean::dec(x_17);
x_76 = l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1;
return x_76;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_assumeBinders_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_assumeBinders_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_assumeBinders_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_assumeBinders_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_assume() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("assume");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_assume_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_10; obj* x_11; obj* x_14; obj* x_15; obj* x_16; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
lean::dec(x_0);
x_10 = l_Lean_Parser_Term_assumeBinders_HasView;
x_11 = lean::cnstr_get(x_10, 1);
lean::inc(x_11);
lean::dec(x_10);
x_14 = lean::apply_1(x_11, x_3);
x_15 = lean::box(0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_7);
lean::cnstr_set(x_16, 1, x_15);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_17 = lean::box(3);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_16);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_14);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_17);
lean::cnstr_set(x_20, 1, x_19);
x_21 = l_Lean_Parser_Term_assume;
x_22 = l_Lean_Parser_Syntax_mkNode(x_21, x_20);
return x_22;
}
else
{
obj* x_23; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
x_23 = lean::cnstr_get(x_5, 0);
lean::inc(x_23);
lean::dec(x_5);
x_26 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_26, 0, x_23);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_16);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_14);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::box(3);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_28);
x_31 = l_Lean_Parser_Term_assume;
x_32 = l_Lean_Parser_Syntax_mkNode(x_31, x_30);
return x_32;
}
}
else
{
obj* x_33; obj* x_36; 
x_33 = lean::cnstr_get(x_1, 0);
lean::inc(x_33);
lean::dec(x_1);
x_36 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_36, 0, x_33);
if (lean::obj_tag(x_5) == 0)
{
obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
x_37 = lean::box(3);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_16);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_14);
lean::cnstr_set(x_39, 1, x_38);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_36);
lean::cnstr_set(x_40, 1, x_39);
x_41 = l_Lean_Parser_Term_assume;
x_42 = l_Lean_Parser_Syntax_mkNode(x_41, x_40);
return x_42;
}
else
{
obj* x_43; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; 
x_43 = lean::cnstr_get(x_5, 0);
lean::inc(x_43);
lean::dec(x_5);
x_46 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_46, 0, x_43);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_46);
lean::cnstr_set(x_47, 1, x_16);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_14);
lean::cnstr_set(x_48, 1, x_47);
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_36);
lean::cnstr_set(x_49, 1, x_48);
x_50 = l_Lean_Parser_Term_assume;
x_51 = l_Lean_Parser_Syntax_mkNode(x_50, x_49);
return x_51;
}
}
}
}
obj* _init_l_Lean_Parser_Term_assume_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_Term_assumeBinders_HasView;
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
x_7 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_7, 0, x_0);
lean::cnstr_set(x_7, 1, x_6);
lean::cnstr_set(x_7, 2, x_0);
lean::cnstr_set(x_7, 3, x_5);
return x_7;
}
}
obj* l_Lean_Parser_Term_assume_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_assume_HasView_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; obj* x_37; obj* x_40; 
x_36 = l_Lean_Parser_Term_assumeBinders_HasView;
x_37 = lean::cnstr_get(x_36, 0);
lean::inc(x_37);
lean::dec(x_36);
x_40 = lean::apply_1(x_37, x_28);
if (lean::obj_tag(x_27) == 0)
{
obj* x_41; obj* x_42; obj* x_43; 
x_41 = lean::box(0);
x_42 = lean::box(3);
x_43 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_43, 0, x_18);
lean::cnstr_set(x_43, 1, x_40);
lean::cnstr_set(x_43, 2, x_41);
lean::cnstr_set(x_43, 3, x_42);
return x_43;
}
else
{
obj* x_44; 
x_44 = lean::cnstr_get(x_27, 0);
lean::inc(x_44);
switch (lean::obj_tag(x_44)) {
case 0:
{
obj* x_46; obj* x_49; obj* x_52; 
x_46 = lean::cnstr_get(x_27, 1);
lean::inc(x_46);
lean::dec(x_27);
x_49 = lean::cnstr_get(x_44, 0);
lean::inc(x_49);
lean::dec(x_44);
x_52 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_52, 0, x_49);
if (lean::obj_tag(x_46) == 0)
{
obj* x_53; obj* x_54; 
x_53 = lean::box(3);
x_54 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_54, 0, x_18);
lean::cnstr_set(x_54, 1, x_40);
lean::cnstr_set(x_54, 2, x_52);
lean::cnstr_set(x_54, 3, x_53);
return x_54;
}
else
{
obj* x_55; obj* x_58; 
x_55 = lean::cnstr_get(x_46, 0);
lean::inc(x_55);
lean::dec(x_46);
x_58 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_58, 0, x_18);
lean::cnstr_set(x_58, 1, x_40);
lean::cnstr_set(x_58, 2, x_52);
lean::cnstr_set(x_58, 3, x_55);
return x_58;
}
}
case 3:
{
obj* x_59; obj* x_62; 
x_59 = lean::cnstr_get(x_27, 1);
lean::inc(x_59);
lean::dec(x_27);
x_62 = lean::box(0);
if (lean::obj_tag(x_59) == 0)
{
obj* x_63; obj* x_64; 
x_63 = lean::box(3);
x_64 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_64, 0, x_18);
lean::cnstr_set(x_64, 1, x_40);
lean::cnstr_set(x_64, 2, x_62);
lean::cnstr_set(x_64, 3, x_63);
return x_64;
}
else
{
obj* x_65; obj* x_68; 
x_65 = lean::cnstr_get(x_59, 0);
lean::inc(x_65);
lean::dec(x_59);
x_68 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_68, 0, x_18);
lean::cnstr_set(x_68, 1, x_40);
lean::cnstr_set(x_68, 2, x_62);
lean::cnstr_set(x_68, 3, x_65);
return x_68;
}
}
default:
{
obj* x_70; obj* x_73; 
lean::dec(x_44);
x_70 = lean::cnstr_get(x_27, 1);
lean::inc(x_70);
lean::dec(x_27);
x_73 = lean::box(0);
if (lean::obj_tag(x_70) == 0)
{
obj* x_74; obj* x_75; 
x_74 = lean::box(3);
x_75 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_75, 0, x_18);
lean::cnstr_set(x_75, 1, x_40);
lean::cnstr_set(x_75, 2, x_73);
lean::cnstr_set(x_75, 3, x_74);
return x_75;
}
else
{
obj* x_76; obj* x_79; 
x_76 = lean::cnstr_get(x_70, 0);
lean::inc(x_76);
lean::dec(x_70);
x_79 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_79, 0, x_18);
lean::cnstr_set(x_79, 1, x_40);
lean::cnstr_set(x_79, 2, x_73);
lean::cnstr_set(x_79, 3, x_76);
return x_79;
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_assume_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_assume_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_assume_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_assume_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_assume_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_assume_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_21; obj* x_23; obj* x_25; obj* x_27; obj* x_28; obj* x_30; obj* x_33; obj* x_36; obj* x_39; 
x_0 = lean::mk_string("assume ");
x_1 = l_Lean_Parser_maxPrec;
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = lean::mk_string(": ");
x_5 = lean::mk_nat_obj(0ul);
x_6 = l_Lean_Parser_symbol_tokens___rarg(x_4, x_5);
lean::dec(x_4);
x_8 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_5);
x_9 = lean::box(0);
x_10 = l_Lean_Parser_List_cons_tokens___rarg(x_8, x_9);
lean::dec(x_8);
x_12 = l_Lean_Parser_List_cons_tokens___rarg(x_6, x_10);
lean::dec(x_6);
x_14 = l_Lean_Parser_tokens___rarg(x_12);
lean::dec(x_12);
x_16 = l_Lean_Parser_Term_binders_Parser_Lean_Parser_HasTokens;
x_17 = l_Lean_Parser_List_cons_tokens___rarg(x_16, x_9);
x_18 = l_Lean_Parser_List_cons_tokens___rarg(x_14, x_17);
lean::dec(x_17);
lean::dec(x_14);
x_21 = l_Lean_Parser_tokens___rarg(x_18);
lean::dec(x_18);
x_23 = l_Lean_Parser_List_cons_tokens___rarg(x_21, x_9);
lean::dec(x_21);
x_25 = l_Lean_Parser_tokens___rarg(x_23);
lean::dec(x_23);
x_27 = lean::mk_string(", ");
x_28 = l_Lean_Parser_symbol_tokens___rarg(x_27, x_5);
lean::dec(x_27);
x_30 = l_Lean_Parser_List_cons_tokens___rarg(x_28, x_10);
lean::dec(x_10);
lean::dec(x_28);
x_33 = l_Lean_Parser_List_cons_tokens___rarg(x_25, x_30);
lean::dec(x_30);
lean::dec(x_25);
x_36 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_33);
lean::dec(x_33);
lean::dec(x_2);
x_39 = l_Lean_Parser_tokens___rarg(x_36);
lean::dec(x_36);
return x_39;
}
}
obj* _init_l_Lean_Parser_Term_assume_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; 
x_0 = lean::mk_string("assume ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_string(": ");
x_8 = l_String_trim(x_7);
lean::dec(x_7);
lean::inc(x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_11, 0, x_8);
x_12 = lean::mk_nat_obj(0ul);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_13, 0, x_8);
lean::closure_set(x_13, 1, x_12);
lean::closure_set(x_13, 2, x_11);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_14, 0, x_12);
x_15 = lean::box(0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_14);
lean::cnstr_set(x_16, 1, x_15);
lean::inc(x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_13);
lean::cnstr_set(x_18, 1, x_16);
x_19 = l_Lean_Parser_Term_assumeAnonymous;
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_20, 0, x_19);
lean::closure_set(x_20, 1, x_18);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binders_Parser), 5, 0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_15);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_20);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_24, 0, x_23);
lean::closure_set(x_24, 1, x_12);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_15);
x_26 = l_Lean_Parser_Term_assumeBinders;
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_27, 0, x_26);
lean::closure_set(x_27, 1, x_25);
x_28 = lean::mk_string(", ");
x_29 = l_String_trim(x_28);
lean::dec(x_28);
lean::inc(x_29);
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_32, 0, x_29);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_33, 0, x_29);
lean::closure_set(x_33, 1, x_12);
lean::closure_set(x_33, 2, x_32);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_16);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_27);
lean::cnstr_set(x_35, 1, x_34);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_6);
lean::cnstr_set(x_36, 1, x_35);
x_37 = l_Lean_Parser_TermParserM_Monad;
x_38 = l_Lean_Parser_TermParserM_MonadExcept;
x_39 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_40 = l_Lean_Parser_TermParserM_Alternative;
x_41 = l_Lean_Parser_Term_assume;
x_42 = l_Lean_Parser_Term_assume_HasView;
x_43 = l_Lean_Parser_Combinators_node_view___rarg(x_37, x_38, x_39, x_40, x_41, x_36, x_42);
lean::dec(x_36);
return x_43;
}
}
obj* _init_l_Lean_Parser_Term_assume_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; 
x_0 = lean::mk_string("assume ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_string(": ");
x_8 = l_String_trim(x_7);
lean::dec(x_7);
lean::inc(x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_11, 0, x_8);
x_12 = lean::mk_nat_obj(0ul);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_13, 0, x_8);
lean::closure_set(x_13, 1, x_12);
lean::closure_set(x_13, 2, x_11);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_14, 0, x_12);
x_15 = lean::box(0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_14);
lean::cnstr_set(x_16, 1, x_15);
lean::inc(x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_13);
lean::cnstr_set(x_18, 1, x_16);
x_19 = l_Lean_Parser_Term_assumeAnonymous;
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_20, 0, x_19);
lean::closure_set(x_20, 1, x_18);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binders_Parser), 5, 0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_15);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_20);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_24, 0, x_23);
lean::closure_set(x_24, 1, x_12);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_15);
x_26 = l_Lean_Parser_Term_assumeBinders;
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_27, 0, x_26);
lean::closure_set(x_27, 1, x_25);
x_28 = lean::mk_string(", ");
x_29 = l_String_trim(x_28);
lean::dec(x_28);
lean::inc(x_29);
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_32, 0, x_29);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_33, 0, x_29);
lean::closure_set(x_33, 1, x_12);
lean::closure_set(x_33, 2, x_32);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_16);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_27);
lean::cnstr_set(x_35, 1, x_34);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_6);
lean::cnstr_set(x_36, 1, x_35);
return x_36;
}
}
obj* l_Lean_Parser_Term_assume_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_assume;
x_6 = l_Lean_Parser_Term_assume_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_pi() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("pi");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_pi_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_10; obj* x_11; obj* x_14; obj* x_15; obj* x_16; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
lean::dec(x_0);
x_10 = l_Lean_Parser_Term_binders_HasView;
x_11 = lean::cnstr_get(x_10, 1);
lean::inc(x_11);
lean::dec(x_10);
x_14 = lean::apply_1(x_11, x_3);
x_15 = lean::box(0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_7);
lean::cnstr_set(x_16, 1, x_15);
if (lean::obj_tag(x_5) == 0)
{
obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_17 = lean::box(3);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_16);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_14);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_1);
lean::cnstr_set(x_20, 1, x_19);
x_21 = l_Lean_Parser_Term_pi;
x_22 = l_Lean_Parser_Syntax_mkNode(x_21, x_20);
return x_22;
}
else
{
obj* x_23; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_23 = lean::cnstr_get(x_5, 0);
lean::inc(x_23);
lean::dec(x_5);
x_26 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_26, 0, x_23);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_16);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_14);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_1);
lean::cnstr_set(x_29, 1, x_28);
x_30 = l_Lean_Parser_Term_pi;
x_31 = l_Lean_Parser_Syntax_mkNode(x_30, x_29);
return x_31;
}
}
}
obj* _init_l_Lean_Parser_Term_pi_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = l_Lean_Parser_Term_binders_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_7, 0, x_4);
lean::cnstr_set(x_7, 1, x_5);
lean::cnstr_set(x_7, 2, x_6);
lean::cnstr_set(x_7, 3, x_4);
return x_7;
}
}
obj* l_Lean_Parser_Term_pi_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_pi_HasView_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; obj* x_19; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_21; 
x_21 = lean::box(3);
x_18 = x_1;
x_19 = x_21;
goto lbl_20;
}
else
{
obj* x_22; obj* x_24; 
x_22 = lean::cnstr_get(x_1, 0);
lean::inc(x_22);
x_24 = lean::cnstr_get(x_1, 1);
lean::inc(x_24);
lean::dec(x_1);
x_18 = x_24;
x_19 = x_22;
goto lbl_20;
}
lbl_20:
{
obj* x_27; obj* x_28; obj* x_31; 
x_27 = l_Lean_Parser_Term_binders_HasView;
x_28 = lean::cnstr_get(x_27, 0);
lean::inc(x_28);
lean::dec(x_27);
x_31 = lean::apply_1(x_28, x_19);
if (lean::obj_tag(x_18) == 0)
{
obj* x_32; obj* x_33; obj* x_34; 
x_32 = lean::box(0);
x_33 = lean::box(3);
x_34 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_34, 0, x_2);
lean::cnstr_set(x_34, 1, x_31);
lean::cnstr_set(x_34, 2, x_32);
lean::cnstr_set(x_34, 3, x_33);
return x_34;
}
else
{
obj* x_35; 
x_35 = lean::cnstr_get(x_18, 0);
lean::inc(x_35);
switch (lean::obj_tag(x_35)) {
case 0:
{
obj* x_37; obj* x_40; obj* x_43; 
x_37 = lean::cnstr_get(x_18, 1);
lean::inc(x_37);
lean::dec(x_18);
x_40 = lean::cnstr_get(x_35, 0);
lean::inc(x_40);
lean::dec(x_35);
x_43 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_43, 0, x_40);
if (lean::obj_tag(x_37) == 0)
{
obj* x_44; obj* x_45; 
x_44 = lean::box(3);
x_45 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_45, 0, x_2);
lean::cnstr_set(x_45, 1, x_31);
lean::cnstr_set(x_45, 2, x_43);
lean::cnstr_set(x_45, 3, x_44);
return x_45;
}
else
{
obj* x_46; obj* x_49; 
x_46 = lean::cnstr_get(x_37, 0);
lean::inc(x_46);
lean::dec(x_37);
x_49 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_49, 0, x_2);
lean::cnstr_set(x_49, 1, x_31);
lean::cnstr_set(x_49, 2, x_43);
lean::cnstr_set(x_49, 3, x_46);
return x_49;
}
}
case 3:
{
obj* x_50; obj* x_53; 
x_50 = lean::cnstr_get(x_18, 1);
lean::inc(x_50);
lean::dec(x_18);
x_53 = lean::box(0);
if (lean::obj_tag(x_50) == 0)
{
obj* x_54; obj* x_55; 
x_54 = lean::box(3);
x_55 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_55, 0, x_2);
lean::cnstr_set(x_55, 1, x_31);
lean::cnstr_set(x_55, 2, x_53);
lean::cnstr_set(x_55, 3, x_54);
return x_55;
}
else
{
obj* x_56; obj* x_59; 
x_56 = lean::cnstr_get(x_50, 0);
lean::inc(x_56);
lean::dec(x_50);
x_59 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_59, 0, x_2);
lean::cnstr_set(x_59, 1, x_31);
lean::cnstr_set(x_59, 2, x_53);
lean::cnstr_set(x_59, 3, x_56);
return x_59;
}
}
default:
{
obj* x_61; obj* x_64; 
lean::dec(x_35);
x_61 = lean::cnstr_get(x_18, 1);
lean::inc(x_61);
lean::dec(x_18);
x_64 = lean::box(0);
if (lean::obj_tag(x_61) == 0)
{
obj* x_65; obj* x_66; 
x_65 = lean::box(3);
x_66 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_66, 0, x_2);
lean::cnstr_set(x_66, 1, x_31);
lean::cnstr_set(x_66, 2, x_64);
lean::cnstr_set(x_66, 3, x_65);
return x_66;
}
else
{
obj* x_67; obj* x_70; 
x_67 = lean::cnstr_get(x_61, 0);
lean::inc(x_67);
lean::dec(x_61);
x_70 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_70, 0, x_2);
lean::cnstr_set(x_70, 1, x_31);
lean::cnstr_set(x_70, 2, x_64);
lean::cnstr_set(x_70, 3, x_67);
return x_70;
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_pi_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_pi_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_pi_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_pi_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_pi_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_pi_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_14; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_26; obj* x_29; obj* x_30; obj* x_32; obj* x_35; 
x_0 = lean::mk_string("\xce\xa0");
x_1 = lean::mk_string("Pi");
x_2 = l_Lean_Parser_maxPrec;
x_3 = l_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___rarg(x_0, x_1, x_2);
lean::dec(x_1);
lean::dec(x_0);
x_6 = lean::mk_string("\xe2\x88\x80");
x_7 = lean::mk_string("forall");
x_8 = l_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___rarg(x_6, x_7, x_2);
lean::dec(x_7);
lean::dec(x_6);
x_11 = lean::box(0);
x_12 = l_Lean_Parser_List_cons_tokens___rarg(x_8, x_11);
lean::dec(x_8);
x_14 = l_Lean_Parser_List_cons_tokens___rarg(x_3, x_12);
lean::dec(x_12);
lean::dec(x_3);
x_17 = l_Lean_Parser_tokens___rarg(x_14);
lean::dec(x_14);
x_19 = lean::mk_string(",");
x_20 = lean::mk_nat_obj(0ul);
x_21 = l_Lean_Parser_symbol_tokens___rarg(x_19, x_20);
lean::dec(x_19);
x_23 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_20);
x_24 = l_Lean_Parser_List_cons_tokens___rarg(x_23, x_11);
lean::dec(x_23);
x_26 = l_Lean_Parser_List_cons_tokens___rarg(x_21, x_24);
lean::dec(x_24);
lean::dec(x_21);
x_29 = l_Lean_Parser_Term_binders_Parser_Lean_Parser_HasTokens;
x_30 = l_Lean_Parser_List_cons_tokens___rarg(x_29, x_26);
lean::dec(x_26);
x_32 = l_Lean_Parser_List_cons_tokens___rarg(x_17, x_30);
lean::dec(x_30);
lean::dec(x_17);
x_35 = l_Lean_Parser_tokens___rarg(x_32);
lean::dec(x_32);
return x_35;
}
}
obj* _init_l_Lean_Parser_Term_pi_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; 
x_0 = lean::mk_string("\xce\xa0");
x_1 = lean::mk_string("Pi");
x_2 = l_Lean_Parser_maxPrec;
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
lean::closure_set(x_3, 2, x_2);
x_4 = lean::mk_string("\xe2\x88\x80");
x_5 = lean::mk_string("forall");
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_4);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_2);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_3);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_anyOf___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__1), 6, 1);
lean::closure_set(x_10, 0, x_9);
x_11 = lean::mk_string(",");
x_12 = l_String_trim(x_11);
lean::dec(x_11);
lean::inc(x_12);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_15, 0, x_12);
x_16 = lean::mk_nat_obj(0ul);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_17, 0, x_12);
lean::closure_set(x_17, 1, x_16);
lean::closure_set(x_17, 2, x_15);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_18, 0, x_16);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_7);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_17);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binders_Parser), 5, 0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_10);
lean::cnstr_set(x_23, 1, x_22);
x_24 = l_Lean_Parser_TermParserM_Monad;
x_25 = l_Lean_Parser_TermParserM_MonadExcept;
x_26 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_27 = l_Lean_Parser_TermParserM_Alternative;
x_28 = l_Lean_Parser_Term_pi;
x_29 = l_Lean_Parser_Term_pi_HasView;
x_30 = l_Lean_Parser_Combinators_node_view___rarg(x_24, x_25, x_26, x_27, x_28, x_23, x_29);
lean::dec(x_23);
return x_30;
}
}
obj* _init_l_Lean_Parser_Term_pi_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_0 = lean::mk_string("\xce\xa0");
x_1 = lean::mk_string("Pi");
x_2 = l_Lean_Parser_maxPrec;
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
lean::closure_set(x_3, 2, x_2);
x_4 = lean::mk_string("\xe2\x88\x80");
x_5 = lean::mk_string("forall");
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_4);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_2);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_3);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_anyOf___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__1), 6, 1);
lean::closure_set(x_10, 0, x_9);
x_11 = lean::mk_string(",");
x_12 = l_String_trim(x_11);
lean::dec(x_11);
lean::inc(x_12);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_15, 0, x_12);
x_16 = lean::mk_nat_obj(0ul);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_17, 0, x_12);
lean::closure_set(x_17, 1, x_16);
lean::closure_set(x_17, 2, x_15);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_18, 0, x_16);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_7);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_17);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_binders_Parser), 5, 0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_10);
lean::cnstr_set(x_23, 1, x_22);
return x_23;
}
}
obj* l_Lean_Parser_Term_pi_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_pi;
x_6 = l_Lean_Parser_Term_pi_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_explicitModifier() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("explicitModifier");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::box(0);
x_1 = lean::box(0);
x_2 = lean::mk_nat_obj(0ul);
x_3 = lean_name_mk_numeral(x_1, x_2);
x_4 = lean::box(3);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_4);
lean::cnstr_set(x_5, 1, x_0);
x_6 = l_Lean_Parser_Syntax_mkNode(x_3, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
x_8 = l_Lean_Parser_Term_explicitModifier;
x_9 = l_Lean_Parser_Syntax_mkNode(x_8, x_7);
return x_9;
}
}
obj* _init_l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::box(0);
x_1 = lean::box(0);
x_2 = lean::mk_nat_obj(1ul);
x_3 = lean_name_mk_numeral(x_1, x_2);
x_4 = lean::box(3);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_4);
lean::cnstr_set(x_5, 1, x_0);
x_6 = l_Lean_Parser_Syntax_mkNode(x_3, x_5);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_0);
x_8 = l_Lean_Parser_Term_explicitModifier;
x_9 = l_Lean_Parser_Syntax_mkNode(x_8, x_7);
return x_9;
}
}
obj* l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
if (lean::obj_tag(x_2) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_6 = lean::cnstr_get(x_2, 0);
lean::inc(x_6);
lean::dec(x_2);
x_9 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_9, 0, x_6);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_12 = l_Lean_Parser_Syntax_mkNode(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_Lean_Parser_Term_explicitModifier;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
}
else
{
obj* x_16; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
if (lean::obj_tag(x_16) == 0)
{
obj* x_19; 
x_19 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1___closed__2;
return x_19;
}
else
{
obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_20 = lean::cnstr_get(x_16, 0);
lean::inc(x_20);
lean::dec(x_16);
x_23 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_26 = l_Lean_Parser_Syntax_mkNode(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_Lean_Parser_Term_explicitModifier;
x_29 = l_Lean_Parser_Syntax_mkNode(x_28, x_27);
return x_29;
}
}
}
}
obj* _init_l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(0);
x_1 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(0);
x_1 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__2;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("explicitModifier");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__4;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3;
return x_23;
}
else
{
obj* x_24; obj* x_26; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
if (lean::is_exclusive(x_22)) {
 lean::cnstr_set(x_22, 0, lean::box(0));
 x_26 = x_22;
} else {
 lean::inc(x_24);
 lean::dec(x_22);
 x_26 = lean::box(0);
}
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_31; 
lean::dec(x_26);
lean::dec(x_24);
x_31 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3;
return x_31;
}
case 1:
{
obj* x_35; 
lean::dec(x_26);
lean::dec(x_27);
lean::dec(x_24);
x_35 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3;
return x_35;
}
default:
{
obj* x_36; obj* x_39; obj* x_41; obj* x_44; uint8 x_45; 
x_36 = lean::cnstr_get(x_24, 1);
lean::inc(x_36);
lean::dec(x_24);
x_39 = lean::cnstr_get(x_27, 0);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_27, 1);
lean::inc(x_41);
lean::dec(x_27);
x_44 = lean::box(0);
x_45 = lean_name_dec_eq(x_39, x_44);
lean::dec(x_39);
if (x_45 == 0)
{
obj* x_50; 
lean::dec(x_26);
lean::dec(x_41);
lean::dec(x_36);
x_50 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3;
return x_50;
}
else
{
if (lean::obj_tag(x_36) == 0)
{
obj* x_53; 
lean::dec(x_26);
lean::dec(x_41);
x_53 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3;
return x_53;
}
else
{
obj* x_54; 
x_54 = lean::cnstr_get(x_36, 1);
lean::inc(x_54);
if (lean::obj_tag(x_54) == 0)
{
obj* x_56; obj* x_59; uint8 x_60; 
x_56 = lean::cnstr_get(x_36, 0);
lean::inc(x_56);
lean::dec(x_36);
x_59 = lean::mk_nat_obj(0ul);
x_60 = lean::nat_dec_eq(x_41, x_59);
lean::dec(x_41);
if (x_60 == 0)
{
switch (lean::obj_tag(x_56)) {
case 0:
{
obj* x_62; obj* x_65; obj* x_66; 
x_62 = lean::cnstr_get(x_56, 0);
lean::inc(x_62);
lean::dec(x_56);
if (lean::is_scalar(x_26)) {
 x_65 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_65 = x_26;
}
lean::cnstr_set(x_65, 0, x_62);
x_66 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_66, 0, x_65);
return x_66;
}
case 3:
{
obj* x_68; 
lean::dec(x_26);
x_68 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__1;
return x_68;
}
default:
{
obj* x_71; 
lean::dec(x_56);
lean::dec(x_26);
x_71 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__1;
return x_71;
}
}
}
else
{
switch (lean::obj_tag(x_56)) {
case 0:
{
obj* x_72; obj* x_75; obj* x_76; 
x_72 = lean::cnstr_get(x_56, 0);
lean::inc(x_72);
lean::dec(x_56);
if (lean::is_scalar(x_26)) {
 x_75 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_75 = x_26;
}
lean::cnstr_set(x_75, 0, x_72);
x_76 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_76, 0, x_75);
return x_76;
}
case 3:
{
obj* x_78; 
lean::dec(x_26);
x_78 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__2;
return x_78;
}
default:
{
obj* x_81; 
lean::dec(x_56);
lean::dec(x_26);
x_81 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__2;
return x_81;
}
}
}
}
else
{
obj* x_86; 
lean::dec(x_26);
lean::dec(x_41);
lean::dec(x_54);
lean::dec(x_36);
x_86 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3;
return x_86;
}
}
}
}
}
}
}
else
{
obj* x_89; 
lean::dec(x_8);
lean::dec(x_17);
x_89 = l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3;
return x_89;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_explicitModifier_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_explicitModifier_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_explicitModifier_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_explicit() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("explicit");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_explicit_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_10; obj* x_11; obj* x_12; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_Lean_Parser_Term_explicitModifier_HasView;
x_7 = lean::cnstr_get(x_6, 1);
lean::inc(x_7);
lean::dec(x_6);
x_10 = lean::apply_1(x_7, x_1);
x_11 = l_Lean_Parser_identUnivs_HasView;
x_12 = lean::cnstr_get(x_11, 1);
lean::inc(x_12);
lean::dec(x_11);
x_15 = lean::apply_1(x_12, x_3);
x_16 = lean::box(0);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_10);
lean::cnstr_set(x_18, 1, x_17);
x_19 = l_Lean_Parser_Term_explicit;
x_20 = l_Lean_Parser_Syntax_mkNode(x_19, x_18);
return x_20;
}
}
obj* _init_l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_10; obj* x_11; 
x_0 = l_Lean_Parser_Term_explicitModifier_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = l_Lean_Parser_identUnivs_HasView;
x_7 = lean::cnstr_get(x_6, 0);
lean::inc(x_7);
lean::dec(x_6);
x_10 = lean::apply_1(x_7, x_4);
x_11 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_11, 0, x_5);
lean::cnstr_set(x_11, 1, x_10);
return x_11;
}
}
obj* _init_l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; 
x_0 = l_Lean_Parser_identUnivs_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
return x_5;
}
}
obj* l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_9; 
x_9 = l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2___closed__1;
return x_9;
}
else
{
obj* x_10; obj* x_12; obj* x_15; obj* x_16; obj* x_19; 
x_10 = lean::cnstr_get(x_6, 0);
lean::inc(x_10);
x_12 = lean::cnstr_get(x_6, 1);
lean::inc(x_12);
lean::dec(x_6);
x_15 = l_Lean_Parser_Term_explicitModifier_HasView;
x_16 = lean::cnstr_get(x_15, 0);
lean::inc(x_16);
lean::dec(x_15);
x_19 = lean::apply_1(x_16, x_10);
if (lean::obj_tag(x_12) == 0)
{
obj* x_20; obj* x_21; 
x_20 = l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2___closed__2;
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; obj* x_26; obj* x_29; obj* x_30; 
x_22 = lean::cnstr_get(x_12, 0);
lean::inc(x_22);
lean::dec(x_12);
x_25 = l_Lean_Parser_identUnivs_HasView;
x_26 = lean::cnstr_get(x_25, 0);
lean::inc(x_26);
lean::dec(x_25);
x_29 = lean::apply_1(x_26, x_22);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_19);
lean::cnstr_set(x_30, 1, x_29);
return x_30;
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_explicit_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_explicit_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_explicit_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_explicit_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_explicit_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_8; obj* x_10; obj* x_13; obj* x_15; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_24; 
x_0 = lean::mk_string("@");
x_1 = l_Lean_Parser_maxPrec;
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = lean::mk_string("@@");
x_5 = l_Lean_Parser_symbol_tokens___rarg(x_4, x_1);
lean::dec(x_4);
x_7 = lean::box(0);
x_8 = l_Lean_Parser_List_cons_tokens___rarg(x_5, x_7);
lean::dec(x_5);
x_10 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_8);
lean::dec(x_8);
lean::dec(x_2);
x_13 = l_Lean_Parser_tokens___rarg(x_10);
lean::dec(x_10);
x_15 = l_Lean_Parser_List_cons_tokens___rarg(x_13, x_7);
lean::dec(x_13);
x_17 = l_Lean_Parser_tokens___rarg(x_15);
lean::dec(x_15);
x_19 = l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasTokens;
x_20 = l_Lean_Parser_List_cons_tokens___rarg(x_19, x_7);
x_21 = l_Lean_Parser_List_cons_tokens___rarg(x_17, x_20);
lean::dec(x_20);
lean::dec(x_17);
x_24 = l_Lean_Parser_tokens___rarg(x_21);
lean::dec(x_21);
return x_24;
}
}
obj* _init_l_Lean_Parser_Term_explicit_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; 
x_0 = lean::mk_string("@");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_string("@@");
x_8 = l_String_trim(x_7);
lean::dec(x_7);
lean::inc(x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_11, 0, x_8);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_12, 0, x_8);
lean::closure_set(x_12, 1, x_5);
lean::closure_set(x_12, 2, x_11);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_6);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::mk_nat_obj(0ul);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_17, 0, x_15);
lean::closure_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_13);
x_19 = l_Lean_Parser_Term_explicitModifier;
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_20, 0, x_19);
lean::closure_set(x_20, 1, x_18);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_identUnivs_Parser), 5, 0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_13);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_20);
lean::cnstr_set(x_23, 1, x_22);
x_24 = l_Lean_Parser_TermParserM_Monad;
x_25 = l_Lean_Parser_TermParserM_MonadExcept;
x_26 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_27 = l_Lean_Parser_TermParserM_Alternative;
x_28 = l_Lean_Parser_Term_explicit;
x_29 = l_Lean_Parser_Term_explicit_HasView;
x_30 = l_Lean_Parser_Combinators_node_view___rarg(x_24, x_25, x_26, x_27, x_28, x_23, x_29);
lean::dec(x_23);
return x_30;
}
}
obj* _init_l_Lean_Parser_Term_explicit_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_0 = lean::mk_string("@");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_string("@@");
x_8 = l_String_trim(x_7);
lean::dec(x_7);
lean::inc(x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_11, 0, x_8);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_12, 0, x_8);
lean::closure_set(x_12, 1, x_5);
lean::closure_set(x_12, 2, x_11);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_6);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::mk_nat_obj(0ul);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_17, 0, x_15);
lean::closure_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_13);
x_19 = l_Lean_Parser_Term_explicitModifier;
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_20, 0, x_19);
lean::closure_set(x_20, 1, x_18);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_identUnivs_Parser), 5, 0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_13);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_20);
lean::cnstr_set(x_23, 1, x_22);
return x_23;
}
}
obj* l_Lean_Parser_Term_explicit_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_explicit;
x_6 = l_Lean_Parser_Term_explicit_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_from() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("from");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_from_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
if (lean::obj_tag(x_1) == 0)
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_8 = lean::box(3);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_Lean_Parser_Term_from;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
return x_11;
}
else
{
obj* x_12; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_12 = lean::cnstr_get(x_1, 0);
lean::inc(x_12);
lean::dec(x_1);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_12);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_7);
x_17 = l_Lean_Parser_Term_from;
x_18 = l_Lean_Parser_Syntax_mkNode(x_17, x_16);
return x_18;
}
}
}
obj* _init_l_Lean_Parser_Term_from_HasView_x_27___elambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_from_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_from_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_Lean_Parser_Term_from_HasView_x_27___elambda__2___closed__1;
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
switch (lean::obj_tag(x_11)) {
case 0:
{
obj* x_13; obj* x_16; obj* x_19; 
x_13 = lean::cnstr_get(x_6, 1);
lean::inc(x_13);
lean::dec(x_6);
x_16 = lean::cnstr_get(x_11, 0);
lean::inc(x_16);
lean::dec(x_11);
if (lean::is_scalar(x_5)) {
 x_19 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_19 = x_5;
}
lean::cnstr_set(x_19, 0, x_16);
if (lean::obj_tag(x_13) == 0)
{
obj* x_20; obj* x_21; 
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_13, 0);
lean::inc(x_22);
lean::dec(x_13);
x_25 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_25, 0, x_19);
lean::cnstr_set(x_25, 1, x_22);
return x_25;
}
}
case 3:
{
obj* x_27; 
lean::dec(x_5);
x_27 = lean::cnstr_get(x_6, 1);
lean::inc(x_27);
lean::dec(x_6);
if (lean::obj_tag(x_27) == 0)
{
obj* x_30; 
x_30 = l_Lean_Parser_Term_from_HasView_x_27___elambda__2___closed__1;
return x_30;
}
else
{
obj* x_31; obj* x_34; obj* x_35; 
x_31 = lean::cnstr_get(x_27, 0);
lean::inc(x_31);
lean::dec(x_27);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_31);
return x_35;
}
}
default:
{
obj* x_38; 
lean::dec(x_11);
lean::dec(x_5);
x_38 = lean::cnstr_get(x_6, 1);
lean::inc(x_38);
lean::dec(x_6);
if (lean::obj_tag(x_38) == 0)
{
obj* x_41; 
x_41 = l_Lean_Parser_Term_from_HasView_x_27___elambda__2___closed__1;
return x_41;
}
else
{
obj* x_42; obj* x_45; obj* x_46; 
x_42 = lean::cnstr_get(x_38, 0);
lean::inc(x_42);
lean::dec(x_38);
x_45 = lean::box(0);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_42);
return x_46;
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_from_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_from_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_from_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_from_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_from_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_from_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_11; 
x_0 = lean::mk_string("from ");
x_1 = lean::mk_nat_obj(0ul);
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_1);
x_5 = lean::box(0);
x_6 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_5);
lean::dec(x_4);
x_8 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_6);
lean::dec(x_6);
lean::dec(x_2);
x_11 = l_Lean_Parser_tokens___rarg(x_8);
lean::dec(x_8);
return x_11;
}
}
obj* _init_l_Lean_Parser_Term_from_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_0 = lean::mk_string("from ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_6);
lean::cnstr_set(x_10, 1, x_9);
x_11 = l_Lean_Parser_TermParserM_Monad;
x_12 = l_Lean_Parser_TermParserM_MonadExcept;
x_13 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_14 = l_Lean_Parser_TermParserM_Alternative;
x_15 = l_Lean_Parser_Term_from;
x_16 = l_Lean_Parser_Term_from_HasView;
x_17 = l_Lean_Parser_Combinators_node_view___rarg(x_11, x_12, x_13, x_14, x_15, x_10, x_16);
lean::dec(x_10);
return x_17;
}
}
obj* _init_l_Lean_Parser_Term_from_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_0 = lean::mk_string("from ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_6);
lean::cnstr_set(x_10, 1, x_9);
return x_10;
}
}
obj* l_Lean_Parser_Term_from_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_from;
x_6 = l_Lean_Parser_Term_from_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_letLhsId() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("letLhsId");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_letLhsId_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_1);
x_9 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1___closed__1;
x_10 = l_List_map___main___rarg(x_9, x_3);
x_11 = l_Lean_Parser_noKind;
x_12 = l_Lean_Parser_Syntax_mkNode(x_11, x_10);
if (lean::obj_tag(x_5) == 0)
{
obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_13 = l_Lean_Parser_detailIdent_HasView_x_27___elambda__1___closed__1;
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_8);
lean::cnstr_set(x_15, 1, x_14);
x_16 = l_Lean_Parser_Term_letLhsId;
x_17 = l_Lean_Parser_Syntax_mkNode(x_16, x_15);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_22; obj* x_23; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_18 = lean::cnstr_get(x_5, 0);
lean::inc(x_18);
lean::dec(x_5);
x_21 = lean::box(0);
x_22 = l_Lean_Parser_Term_typeSpec_HasView;
x_23 = lean::cnstr_get(x_22, 1);
lean::inc(x_23);
lean::dec(x_22);
x_26 = lean::apply_1(x_23, x_18);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_21);
x_28 = l_Lean_Parser_Syntax_mkNode(x_11, x_27);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_21);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_12);
lean::cnstr_set(x_30, 1, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_8);
lean::cnstr_set(x_31, 1, x_30);
x_32 = l_Lean_Parser_Term_letLhsId;
x_33 = l_Lean_Parser_Syntax_mkNode(x_32, x_31);
return x_33;
}
}
}
obj* _init_l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__1() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_0);
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; obj* x_3; obj* x_4; obj* x_5; 
x_2 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_3 = l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__1;
x_4 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_5 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_5, 0, x_2);
lean::cnstr_set(x_5, 1, x_3);
lean::cnstr_set(x_5, 2, x_4);
return x_5;
}
else
{
obj* x_6; obj* x_8; obj* x_9; obj* x_12; obj* x_14; 
x_6 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_8 = x_1;
} else {
 lean::inc(x_6);
 lean::dec(x_1);
 x_8 = lean::box(0);
}
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
x_12 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__4;
lean::inc(x_9);
x_14 = l_List_map___main___rarg(x_12, x_9);
if (lean::obj_tag(x_9) == 0)
{
obj* x_16; obj* x_17; obj* x_18; 
lean::dec(x_8);
x_16 = lean::box(0);
x_17 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_18 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_14);
lean::cnstr_set(x_18, 2, x_16);
return x_18;
}
else
{
obj* x_19; 
x_19 = lean::cnstr_get(x_9, 1);
lean::inc(x_19);
if (lean::obj_tag(x_19) == 0)
{
obj* x_21; obj* x_24; obj* x_25; obj* x_28; obj* x_29; obj* x_30; obj* x_31; 
x_21 = lean::cnstr_get(x_9, 0);
lean::inc(x_21);
lean::dec(x_9);
x_24 = l_Lean_Parser_Term_typeSpec_HasView;
x_25 = lean::cnstr_get(x_24, 0);
lean::inc(x_25);
lean::dec(x_24);
x_28 = lean::apply_1(x_25, x_21);
if (lean::is_scalar(x_8)) {
 x_29 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_29 = x_8;
}
lean::cnstr_set(x_29, 0, x_28);
x_30 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_31 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_14);
lean::cnstr_set(x_31, 2, x_29);
return x_31;
}
else
{
obj* x_35; obj* x_36; obj* x_37; 
lean::dec(x_9);
lean::dec(x_19);
lean::dec(x_8);
x_35 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_36 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_37 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_37, 0, x_35);
lean::cnstr_set(x_37, 1, x_14);
lean::cnstr_set(x_37, 2, x_36);
return x_37;
}
}
}
}
}
obj* l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 1:
{
obj* x_20; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_18 = x_20;
goto lbl_19;
}
case 3:
{
obj* x_23; 
x_23 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_18 = x_23;
goto lbl_19;
}
default:
{
obj* x_25; 
lean::dec(x_2);
x_25 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_18 = x_25;
goto lbl_19;
}
}
lbl_19:
{
obj* x_26; obj* x_27; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_29; 
x_29 = lean::box(3);
x_26 = x_1;
x_27 = x_29;
goto lbl_28;
}
else
{
obj* x_30; obj* x_32; 
x_30 = lean::cnstr_get(x_1, 0);
lean::inc(x_30);
x_32 = lean::cnstr_get(x_1, 1);
lean::inc(x_32);
lean::dec(x_1);
x_26 = x_32;
x_27 = x_30;
goto lbl_28;
}
lbl_28:
{
obj* x_35; 
x_35 = l_Lean_Parser_Syntax_asNode___main(x_27);
if (lean::obj_tag(x_35) == 0)
{
if (lean::obj_tag(x_26) == 0)
{
obj* x_36; obj* x_37; 
x_36 = lean::box(3);
x_37 = l_Lean_Parser_Syntax_asNode___main(x_36);
if (lean::obj_tag(x_37) == 0)
{
obj* x_38; obj* x_39; obj* x_40; 
x_38 = l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__1;
x_39 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_40 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_40, 0, x_18);
lean::cnstr_set(x_40, 1, x_38);
lean::cnstr_set(x_40, 2, x_39);
return x_40;
}
else
{
obj* x_41; obj* x_43; obj* x_44; 
x_41 = lean::cnstr_get(x_37, 0);
if (lean::is_exclusive(x_37)) {
 lean::cnstr_set(x_37, 0, lean::box(0));
 x_43 = x_37;
} else {
 lean::inc(x_41);
 lean::dec(x_37);
 x_43 = lean::box(0);
}
x_44 = lean::cnstr_get(x_41, 1);
lean::inc(x_44);
lean::dec(x_41);
if (lean::obj_tag(x_44) == 0)
{
obj* x_48; obj* x_49; obj* x_50; 
lean::dec(x_43);
x_48 = lean::box(0);
x_49 = l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__1;
x_50 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_50, 0, x_18);
lean::cnstr_set(x_50, 1, x_49);
lean::cnstr_set(x_50, 2, x_48);
return x_50;
}
else
{
obj* x_51; 
x_51 = lean::cnstr_get(x_44, 1);
lean::inc(x_51);
if (lean::obj_tag(x_51) == 0)
{
obj* x_53; obj* x_56; obj* x_57; obj* x_60; obj* x_61; obj* x_62; obj* x_63; 
x_53 = lean::cnstr_get(x_44, 0);
lean::inc(x_53);
lean::dec(x_44);
x_56 = l_Lean_Parser_Term_typeSpec_HasView;
x_57 = lean::cnstr_get(x_56, 0);
lean::inc(x_57);
lean::dec(x_56);
x_60 = lean::apply_1(x_57, x_53);
if (lean::is_scalar(x_43)) {
 x_61 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_61 = x_43;
}
lean::cnstr_set(x_61, 0, x_60);
x_62 = l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__1;
x_63 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_63, 0, x_18);
lean::cnstr_set(x_63, 1, x_62);
lean::cnstr_set(x_63, 2, x_61);
return x_63;
}
else
{
obj* x_67; obj* x_68; obj* x_69; 
lean::dec(x_51);
lean::dec(x_43);
lean::dec(x_44);
x_67 = l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__1;
x_68 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_69 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_69, 0, x_18);
lean::cnstr_set(x_69, 1, x_67);
lean::cnstr_set(x_69, 2, x_68);
return x_69;
}
}
}
}
else
{
obj* x_70; obj* x_73; 
x_70 = lean::cnstr_get(x_26, 0);
lean::inc(x_70);
lean::dec(x_26);
x_73 = l_Lean_Parser_Syntax_asNode___main(x_70);
if (lean::obj_tag(x_73) == 0)
{
obj* x_74; obj* x_75; obj* x_76; 
x_74 = l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__1;
x_75 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_76 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_76, 0, x_18);
lean::cnstr_set(x_76, 1, x_74);
lean::cnstr_set(x_76, 2, x_75);
return x_76;
}
else
{
obj* x_77; obj* x_79; obj* x_80; 
x_77 = lean::cnstr_get(x_73, 0);
if (lean::is_exclusive(x_73)) {
 lean::cnstr_set(x_73, 0, lean::box(0));
 x_79 = x_73;
} else {
 lean::inc(x_77);
 lean::dec(x_73);
 x_79 = lean::box(0);
}
x_80 = lean::cnstr_get(x_77, 1);
lean::inc(x_80);
lean::dec(x_77);
if (lean::obj_tag(x_80) == 0)
{
obj* x_84; obj* x_85; obj* x_86; 
lean::dec(x_79);
x_84 = lean::box(0);
x_85 = l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__1;
x_86 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_86, 0, x_18);
lean::cnstr_set(x_86, 1, x_85);
lean::cnstr_set(x_86, 2, x_84);
return x_86;
}
else
{
obj* x_87; 
x_87 = lean::cnstr_get(x_80, 1);
lean::inc(x_87);
if (lean::obj_tag(x_87) == 0)
{
obj* x_89; obj* x_92; obj* x_93; obj* x_96; obj* x_97; obj* x_98; obj* x_99; 
x_89 = lean::cnstr_get(x_80, 0);
lean::inc(x_89);
lean::dec(x_80);
x_92 = l_Lean_Parser_Term_typeSpec_HasView;
x_93 = lean::cnstr_get(x_92, 0);
lean::inc(x_93);
lean::dec(x_92);
x_96 = lean::apply_1(x_93, x_89);
if (lean::is_scalar(x_79)) {
 x_97 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_97 = x_79;
}
lean::cnstr_set(x_97, 0, x_96);
x_98 = l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__1;
x_99 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_99, 0, x_18);
lean::cnstr_set(x_99, 1, x_98);
lean::cnstr_set(x_99, 2, x_97);
return x_99;
}
else
{
obj* x_103; obj* x_104; obj* x_105; 
lean::dec(x_79);
lean::dec(x_87);
lean::dec(x_80);
x_103 = l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__1;
x_104 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_105 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_105, 0, x_18);
lean::cnstr_set(x_105, 1, x_103);
lean::cnstr_set(x_105, 2, x_104);
return x_105;
}
}
}
}
}
else
{
obj* x_106; obj* x_109; obj* x_112; obj* x_113; 
x_106 = lean::cnstr_get(x_35, 0);
lean::inc(x_106);
lean::dec(x_35);
x_109 = lean::cnstr_get(x_106, 1);
lean::inc(x_109);
lean::dec(x_106);
x_112 = l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__4;
x_113 = l_List_map___main___rarg(x_112, x_109);
if (lean::obj_tag(x_26) == 0)
{
obj* x_114; obj* x_115; 
x_114 = lean::box(3);
x_115 = l_Lean_Parser_Syntax_asNode___main(x_114);
if (lean::obj_tag(x_115) == 0)
{
obj* x_116; obj* x_117; 
x_116 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_117 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_117, 0, x_18);
lean::cnstr_set(x_117, 1, x_113);
lean::cnstr_set(x_117, 2, x_116);
return x_117;
}
else
{
obj* x_118; obj* x_120; obj* x_121; 
x_118 = lean::cnstr_get(x_115, 0);
if (lean::is_exclusive(x_115)) {
 lean::cnstr_set(x_115, 0, lean::box(0));
 x_120 = x_115;
} else {
 lean::inc(x_118);
 lean::dec(x_115);
 x_120 = lean::box(0);
}
x_121 = lean::cnstr_get(x_118, 1);
lean::inc(x_121);
lean::dec(x_118);
if (lean::obj_tag(x_121) == 0)
{
obj* x_125; obj* x_126; 
lean::dec(x_120);
x_125 = lean::box(0);
x_126 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_126, 0, x_18);
lean::cnstr_set(x_126, 1, x_113);
lean::cnstr_set(x_126, 2, x_125);
return x_126;
}
else
{
obj* x_127; 
x_127 = lean::cnstr_get(x_121, 1);
lean::inc(x_127);
if (lean::obj_tag(x_127) == 0)
{
obj* x_129; obj* x_132; obj* x_133; obj* x_136; obj* x_137; obj* x_138; 
x_129 = lean::cnstr_get(x_121, 0);
lean::inc(x_129);
lean::dec(x_121);
x_132 = l_Lean_Parser_Term_typeSpec_HasView;
x_133 = lean::cnstr_get(x_132, 0);
lean::inc(x_133);
lean::dec(x_132);
x_136 = lean::apply_1(x_133, x_129);
if (lean::is_scalar(x_120)) {
 x_137 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_137 = x_120;
}
lean::cnstr_set(x_137, 0, x_136);
x_138 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_138, 0, x_18);
lean::cnstr_set(x_138, 1, x_113);
lean::cnstr_set(x_138, 2, x_137);
return x_138;
}
else
{
obj* x_142; obj* x_143; 
lean::dec(x_127);
lean::dec(x_121);
lean::dec(x_120);
x_142 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_143 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_143, 0, x_18);
lean::cnstr_set(x_143, 1, x_113);
lean::cnstr_set(x_143, 2, x_142);
return x_143;
}
}
}
}
else
{
obj* x_144; obj* x_147; 
x_144 = lean::cnstr_get(x_26, 0);
lean::inc(x_144);
lean::dec(x_26);
x_147 = l_Lean_Parser_Syntax_asNode___main(x_144);
if (lean::obj_tag(x_147) == 0)
{
obj* x_148; obj* x_149; 
x_148 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_149 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_149, 0, x_18);
lean::cnstr_set(x_149, 1, x_113);
lean::cnstr_set(x_149, 2, x_148);
return x_149;
}
else
{
obj* x_150; obj* x_152; obj* x_153; 
x_150 = lean::cnstr_get(x_147, 0);
if (lean::is_exclusive(x_147)) {
 lean::cnstr_set(x_147, 0, lean::box(0));
 x_152 = x_147;
} else {
 lean::inc(x_150);
 lean::dec(x_147);
 x_152 = lean::box(0);
}
x_153 = lean::cnstr_get(x_150, 1);
lean::inc(x_153);
lean::dec(x_150);
if (lean::obj_tag(x_153) == 0)
{
obj* x_157; obj* x_158; 
lean::dec(x_152);
x_157 = lean::box(0);
x_158 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_158, 0, x_18);
lean::cnstr_set(x_158, 1, x_113);
lean::cnstr_set(x_158, 2, x_157);
return x_158;
}
else
{
obj* x_159; 
x_159 = lean::cnstr_get(x_153, 1);
lean::inc(x_159);
if (lean::obj_tag(x_159) == 0)
{
obj* x_161; obj* x_164; obj* x_165; obj* x_168; obj* x_169; obj* x_170; 
x_161 = lean::cnstr_get(x_153, 0);
lean::inc(x_161);
lean::dec(x_153);
x_164 = l_Lean_Parser_Term_typeSpec_HasView;
x_165 = lean::cnstr_get(x_164, 0);
lean::inc(x_165);
lean::dec(x_164);
x_168 = lean::apply_1(x_165, x_161);
if (lean::is_scalar(x_152)) {
 x_169 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_169 = x_152;
}
lean::cnstr_set(x_169, 0, x_168);
x_170 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_170, 0, x_18);
lean::cnstr_set(x_170, 1, x_113);
lean::cnstr_set(x_170, 2, x_169);
return x_170;
}
else
{
obj* x_174; obj* x_175; 
lean::dec(x_152);
lean::dec(x_159);
lean::dec(x_153);
x_174 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_175 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_175, 0, x_18);
lean::cnstr_set(x_175, 1, x_113);
lean::cnstr_set(x_175, 2, x_174);
return x_175;
}
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_letLhsId_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_letLhsId_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_letLhsId_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_letLhsId_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_letLhs() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("letLhs");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_letLhs_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_Lean_Parser_Term_letLhsId_HasView;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_12 = l_Lean_Parser_Syntax_mkNode(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_Lean_Parser_Term_letLhs;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_16);
lean::cnstr_set(x_19, 1, x_1);
x_20 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_21 = l_Lean_Parser_Syntax_mkNode(x_20, x_19);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_1);
x_23 = l_Lean_Parser_Term_letLhs;
x_24 = l_Lean_Parser_Syntax_mkNode(x_23, x_22);
return x_24;
}
}
}
obj* _init_l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_letLhsId_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("letLhs");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__2;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
obj* x_58; 
x_58 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_58, 0, x_52);
return x_58;
}
else
{
obj* x_59; obj* x_60; obj* x_63; obj* x_64; 
x_59 = l_Lean_Parser_Term_letLhsId_HasView;
x_60 = lean::cnstr_get(x_59, 0);
lean::inc(x_60);
lean::dec(x_59);
x_63 = lean::apply_1(x_60, x_52);
x_64 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_64, 0, x_63);
return x_64;
}
}
else
{
obj* x_68; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_68 = l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1;
return x_68;
}
}
}
}
}
}
}
else
{
obj* x_71; 
lean::dec(x_8);
lean::dec(x_17);
x_71 = l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1;
return x_71;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_letLhs_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_letLhs_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_letLhs_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_letLhs_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_let() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("let");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_let_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_14; obj* x_15; obj* x_18; obj* x_19; obj* x_20; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
lean::dec(x_0);
x_14 = l_Lean_Parser_Term_letLhs_HasView;
x_15 = lean::cnstr_get(x_14, 1);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_3);
x_19 = lean::box(0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_11);
lean::cnstr_set(x_20, 1, x_19);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_21 = lean::box(3);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_7);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_21);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_18);
lean::cnstr_set(x_25, 1, x_24);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_21);
lean::cnstr_set(x_26, 1, x_25);
x_27 = l_Lean_Parser_Term_let;
x_28 = l_Lean_Parser_Syntax_mkNode(x_27, x_26);
return x_28;
}
else
{
obj* x_29; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; 
x_29 = lean::cnstr_get(x_9, 0);
lean::inc(x_29);
lean::dec(x_9);
x_32 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_32, 0, x_29);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_20);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_7);
lean::cnstr_set(x_34, 1, x_33);
x_35 = lean::box(3);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_34);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_18);
lean::cnstr_set(x_37, 1, x_36);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_35);
lean::cnstr_set(x_38, 1, x_37);
x_39 = l_Lean_Parser_Term_let;
x_40 = l_Lean_Parser_Syntax_mkNode(x_39, x_38);
return x_40;
}
}
else
{
obj* x_41; obj* x_44; 
x_41 = lean::cnstr_get(x_5, 0);
lean::inc(x_41);
lean::dec(x_5);
x_44 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_44, 0, x_41);
if (lean::obj_tag(x_9) == 0)
{
obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; 
x_45 = lean::box(3);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_20);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_7);
lean::cnstr_set(x_47, 1, x_46);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_44);
lean::cnstr_set(x_48, 1, x_47);
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_18);
lean::cnstr_set(x_49, 1, x_48);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_45);
lean::cnstr_set(x_50, 1, x_49);
x_51 = l_Lean_Parser_Term_let;
x_52 = l_Lean_Parser_Syntax_mkNode(x_51, x_50);
return x_52;
}
else
{
obj* x_53; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; 
x_53 = lean::cnstr_get(x_9, 0);
lean::inc(x_53);
lean::dec(x_9);
x_56 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_56, 0, x_53);
x_57 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_57, 0, x_56);
lean::cnstr_set(x_57, 1, x_20);
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_7);
lean::cnstr_set(x_58, 1, x_57);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_44);
lean::cnstr_set(x_59, 1, x_58);
x_60 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_60, 0, x_18);
lean::cnstr_set(x_60, 1, x_59);
x_61 = lean::box(3);
x_62 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_62, 0, x_61);
lean::cnstr_set(x_62, 1, x_60);
x_63 = l_Lean_Parser_Term_let;
x_64 = l_Lean_Parser_Syntax_mkNode(x_63, x_62);
return x_64;
}
}
}
else
{
obj* x_65; obj* x_68; 
x_65 = lean::cnstr_get(x_1, 0);
lean::inc(x_65);
lean::dec(x_1);
x_68 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_68, 0, x_65);
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; 
x_69 = lean::box(3);
x_70 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_70, 0, x_69);
lean::cnstr_set(x_70, 1, x_20);
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_7);
lean::cnstr_set(x_71, 1, x_70);
x_72 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_72, 0, x_69);
lean::cnstr_set(x_72, 1, x_71);
x_73 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_73, 0, x_18);
lean::cnstr_set(x_73, 1, x_72);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_68);
lean::cnstr_set(x_74, 1, x_73);
x_75 = l_Lean_Parser_Term_let;
x_76 = l_Lean_Parser_Syntax_mkNode(x_75, x_74);
return x_76;
}
else
{
obj* x_77; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; 
x_77 = lean::cnstr_get(x_9, 0);
lean::inc(x_77);
lean::dec(x_9);
x_80 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_80, 0, x_77);
x_81 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_81, 0, x_80);
lean::cnstr_set(x_81, 1, x_20);
x_82 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_82, 0, x_7);
lean::cnstr_set(x_82, 1, x_81);
x_83 = lean::box(3);
x_84 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_84, 0, x_83);
lean::cnstr_set(x_84, 1, x_82);
x_85 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_85, 0, x_18);
lean::cnstr_set(x_85, 1, x_84);
x_86 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_86, 0, x_68);
lean::cnstr_set(x_86, 1, x_85);
x_87 = l_Lean_Parser_Term_let;
x_88 = l_Lean_Parser_Syntax_mkNode(x_87, x_86);
return x_88;
}
}
else
{
obj* x_89; obj* x_92; 
x_89 = lean::cnstr_get(x_5, 0);
lean::inc(x_89);
lean::dec(x_5);
x_92 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_92, 0, x_89);
if (lean::obj_tag(x_9) == 0)
{
obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; 
x_93 = lean::box(3);
x_94 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_94, 0, x_93);
lean::cnstr_set(x_94, 1, x_20);
x_95 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_95, 0, x_7);
lean::cnstr_set(x_95, 1, x_94);
x_96 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_96, 0, x_92);
lean::cnstr_set(x_96, 1, x_95);
x_97 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_97, 0, x_18);
lean::cnstr_set(x_97, 1, x_96);
x_98 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_98, 0, x_68);
lean::cnstr_set(x_98, 1, x_97);
x_99 = l_Lean_Parser_Term_let;
x_100 = l_Lean_Parser_Syntax_mkNode(x_99, x_98);
return x_100;
}
else
{
obj* x_101; obj* x_104; obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; 
x_101 = lean::cnstr_get(x_9, 0);
lean::inc(x_101);
lean::dec(x_9);
x_104 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_104, 0, x_101);
x_105 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_105, 0, x_104);
lean::cnstr_set(x_105, 1, x_20);
x_106 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_106, 0, x_7);
lean::cnstr_set(x_106, 1, x_105);
x_107 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_107, 0, x_92);
lean::cnstr_set(x_107, 1, x_106);
x_108 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_108, 0, x_18);
lean::cnstr_set(x_108, 1, x_107);
x_109 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_109, 0, x_68);
lean::cnstr_set(x_109, 1, x_108);
x_110 = l_Lean_Parser_Term_let;
x_111 = l_Lean_Parser_Syntax_mkNode(x_110, x_109);
return x_111;
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_let_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_Term_letLhs_HasView;
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
x_7 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_7, 0, x_0);
lean::cnstr_set(x_7, 1, x_6);
lean::cnstr_set(x_7, 2, x_0);
lean::cnstr_set(x_7, 3, x_5);
lean::cnstr_set(x_7, 4, x_0);
lean::cnstr_set(x_7, 5, x_5);
return x_7;
}
}
obj* l_Lean_Parser_Term_let_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_let_HasView_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; obj* x_37; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_45; obj* x_46; 
x_36 = l_Lean_Parser_Term_letLhs_HasView;
x_37 = lean::cnstr_get(x_36, 0);
lean::inc(x_37);
lean::dec(x_36);
x_40 = lean::apply_1(x_37, x_28);
if (lean::obj_tag(x_27) == 0)
{
obj* x_48; 
x_48 = lean::box(3);
x_45 = x_27;
x_46 = x_48;
goto lbl_47;
}
else
{
obj* x_49; obj* x_51; 
x_49 = lean::cnstr_get(x_27, 0);
lean::inc(x_49);
x_51 = lean::cnstr_get(x_27, 1);
lean::inc(x_51);
lean::dec(x_27);
x_45 = x_51;
x_46 = x_49;
goto lbl_47;
}
lbl_44:
{
if (lean::obj_tag(x_43) == 0)
{
obj* x_54; obj* x_55; obj* x_56; 
x_54 = lean::box(0);
x_55 = lean::box(3);
x_56 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_56, 0, x_18);
lean::cnstr_set(x_56, 1, x_40);
lean::cnstr_set(x_56, 2, x_41);
lean::cnstr_set(x_56, 3, x_42);
lean::cnstr_set(x_56, 4, x_54);
lean::cnstr_set(x_56, 5, x_55);
return x_56;
}
else
{
obj* x_57; 
x_57 = lean::cnstr_get(x_43, 0);
lean::inc(x_57);
switch (lean::obj_tag(x_57)) {
case 0:
{
obj* x_59; obj* x_62; obj* x_65; 
x_59 = lean::cnstr_get(x_43, 1);
lean::inc(x_59);
lean::dec(x_43);
x_62 = lean::cnstr_get(x_57, 0);
lean::inc(x_62);
lean::dec(x_57);
x_65 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_65, 0, x_62);
if (lean::obj_tag(x_59) == 0)
{
obj* x_66; obj* x_67; 
x_66 = lean::box(3);
x_67 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_67, 0, x_18);
lean::cnstr_set(x_67, 1, x_40);
lean::cnstr_set(x_67, 2, x_41);
lean::cnstr_set(x_67, 3, x_42);
lean::cnstr_set(x_67, 4, x_65);
lean::cnstr_set(x_67, 5, x_66);
return x_67;
}
else
{
obj* x_68; obj* x_71; 
x_68 = lean::cnstr_get(x_59, 0);
lean::inc(x_68);
lean::dec(x_59);
x_71 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_71, 0, x_18);
lean::cnstr_set(x_71, 1, x_40);
lean::cnstr_set(x_71, 2, x_41);
lean::cnstr_set(x_71, 3, x_42);
lean::cnstr_set(x_71, 4, x_65);
lean::cnstr_set(x_71, 5, x_68);
return x_71;
}
}
case 3:
{
obj* x_72; obj* x_75; 
x_72 = lean::cnstr_get(x_43, 1);
lean::inc(x_72);
lean::dec(x_43);
x_75 = lean::box(0);
if (lean::obj_tag(x_72) == 0)
{
obj* x_76; obj* x_77; 
x_76 = lean::box(3);
x_77 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_77, 0, x_18);
lean::cnstr_set(x_77, 1, x_40);
lean::cnstr_set(x_77, 2, x_41);
lean::cnstr_set(x_77, 3, x_42);
lean::cnstr_set(x_77, 4, x_75);
lean::cnstr_set(x_77, 5, x_76);
return x_77;
}
else
{
obj* x_78; obj* x_81; 
x_78 = lean::cnstr_get(x_72, 0);
lean::inc(x_78);
lean::dec(x_72);
x_81 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_81, 0, x_18);
lean::cnstr_set(x_81, 1, x_40);
lean::cnstr_set(x_81, 2, x_41);
lean::cnstr_set(x_81, 3, x_42);
lean::cnstr_set(x_81, 4, x_75);
lean::cnstr_set(x_81, 5, x_78);
return x_81;
}
}
default:
{
obj* x_83; obj* x_86; 
lean::dec(x_57);
x_83 = lean::cnstr_get(x_43, 1);
lean::inc(x_83);
lean::dec(x_43);
x_86 = lean::box(0);
if (lean::obj_tag(x_83) == 0)
{
obj* x_87; obj* x_88; 
x_87 = lean::box(3);
x_88 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_88, 0, x_18);
lean::cnstr_set(x_88, 1, x_40);
lean::cnstr_set(x_88, 2, x_41);
lean::cnstr_set(x_88, 3, x_42);
lean::cnstr_set(x_88, 4, x_86);
lean::cnstr_set(x_88, 5, x_87);
return x_88;
}
else
{
obj* x_89; obj* x_92; 
x_89 = lean::cnstr_get(x_83, 0);
lean::inc(x_89);
lean::dec(x_83);
x_92 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_92, 0, x_18);
lean::cnstr_set(x_92, 1, x_40);
lean::cnstr_set(x_92, 2, x_41);
lean::cnstr_set(x_92, 3, x_42);
lean::cnstr_set(x_92, 4, x_86);
lean::cnstr_set(x_92, 5, x_89);
return x_92;
}
}
}
}
}
lbl_47:
{
switch (lean::obj_tag(x_46)) {
case 0:
{
obj* x_93; obj* x_96; 
x_93 = lean::cnstr_get(x_46, 0);
lean::inc(x_93);
lean::dec(x_46);
x_96 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_96, 0, x_93);
if (lean::obj_tag(x_45) == 0)
{
obj* x_97; obj* x_98; obj* x_99; 
x_97 = lean::box(0);
x_98 = lean::box(3);
x_99 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_99, 0, x_18);
lean::cnstr_set(x_99, 1, x_40);
lean::cnstr_set(x_99, 2, x_96);
lean::cnstr_set(x_99, 3, x_98);
lean::cnstr_set(x_99, 4, x_97);
lean::cnstr_set(x_99, 5, x_98);
return x_99;
}
else
{
obj* x_100; obj* x_102; 
x_100 = lean::cnstr_get(x_45, 0);
lean::inc(x_100);
x_102 = lean::cnstr_get(x_45, 1);
lean::inc(x_102);
lean::dec(x_45);
x_41 = x_96;
x_42 = x_100;
x_43 = x_102;
goto lbl_44;
}
}
case 3:
{
obj* x_105; 
x_105 = lean::box(0);
if (lean::obj_tag(x_45) == 0)
{
obj* x_106; obj* x_107; 
x_106 = lean::box(3);
x_107 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_107, 0, x_18);
lean::cnstr_set(x_107, 1, x_40);
lean::cnstr_set(x_107, 2, x_105);
lean::cnstr_set(x_107, 3, x_106);
lean::cnstr_set(x_107, 4, x_105);
lean::cnstr_set(x_107, 5, x_106);
return x_107;
}
else
{
obj* x_108; obj* x_110; 
x_108 = lean::cnstr_get(x_45, 0);
lean::inc(x_108);
x_110 = lean::cnstr_get(x_45, 1);
lean::inc(x_110);
lean::dec(x_45);
x_41 = x_105;
x_42 = x_108;
x_43 = x_110;
goto lbl_44;
}
}
default:
{
obj* x_114; 
lean::dec(x_46);
x_114 = lean::box(0);
if (lean::obj_tag(x_45) == 0)
{
obj* x_115; obj* x_116; 
x_115 = lean::box(3);
x_116 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_116, 0, x_18);
lean::cnstr_set(x_116, 1, x_40);
lean::cnstr_set(x_116, 2, x_114);
lean::cnstr_set(x_116, 3, x_115);
lean::cnstr_set(x_116, 4, x_114);
lean::cnstr_set(x_116, 5, x_115);
return x_116;
}
else
{
obj* x_117; obj* x_119; 
x_117 = lean::cnstr_get(x_45, 0);
lean::inc(x_117);
x_119 = lean::cnstr_get(x_45, 1);
lean::inc(x_119);
lean::dec(x_45);
x_41 = x_114;
x_42 = x_117;
x_43 = x_119;
goto lbl_44;
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_let_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_let_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_let_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_let_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_let_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_let_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; uint8 x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_14; obj* x_16; obj* x_18; obj* x_19; obj* x_20; obj* x_22; obj* x_24; obj* x_26; obj* x_28; obj* x_29; obj* x_31; obj* x_32; obj* x_34; obj* x_37; obj* x_40; obj* x_43; obj* x_46; obj* x_49; 
x_0 = lean::mk_string("let ");
x_1 = lean::mk_nat_obj(0ul);
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = lean::box(0);
x_5 = 0;
x_6 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens(x_5);
x_7 = l_Lean_Parser_tokens___rarg(x_6);
lean::dec(x_6);
x_9 = l_Lean_Parser_Term_optType_Parser_Lean_Parser_HasTokens;
x_10 = l_Lean_Parser_List_cons_tokens___rarg(x_9, x_4);
x_11 = l_Lean_Parser_List_cons_tokens___rarg(x_7, x_10);
lean::dec(x_10);
lean::dec(x_7);
x_14 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_11);
lean::dec(x_11);
x_16 = l_Lean_Parser_tokens___rarg(x_14);
lean::dec(x_14);
x_18 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_1);
x_19 = l_Lean_Parser_List_cons_tokens___rarg(x_18, x_4);
x_20 = l_Lean_Parser_List_cons_tokens___rarg(x_16, x_19);
lean::dec(x_16);
x_22 = l_Lean_Parser_tokens___rarg(x_20);
lean::dec(x_20);
x_24 = l_Lean_Parser_List_cons_tokens___rarg(x_22, x_4);
lean::dec(x_22);
x_26 = l_Lean_Parser_tokens___rarg(x_24);
lean::dec(x_24);
x_28 = lean::mk_string(" := ");
x_29 = l_Lean_Parser_symbol_tokens___rarg(x_28, x_1);
lean::dec(x_28);
x_31 = lean::mk_string(" in ");
x_32 = l_Lean_Parser_symbol_tokens___rarg(x_31, x_1);
lean::dec(x_31);
x_34 = l_Lean_Parser_List_cons_tokens___rarg(x_32, x_19);
lean::dec(x_19);
lean::dec(x_32);
x_37 = l_Lean_Parser_List_cons_tokens___rarg(x_18, x_34);
lean::dec(x_34);
lean::dec(x_18);
x_40 = l_Lean_Parser_List_cons_tokens___rarg(x_29, x_37);
lean::dec(x_37);
lean::dec(x_29);
x_43 = l_Lean_Parser_List_cons_tokens___rarg(x_26, x_40);
lean::dec(x_40);
lean::dec(x_26);
x_46 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_43);
lean::dec(x_43);
lean::dec(x_2);
x_49 = l_Lean_Parser_tokens___rarg(x_46);
lean::dec(x_46);
return x_49;
}
}
obj* _init_l_Lean_Parser_Term_let_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; uint8 x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; 
x_0 = lean::mk_string("let ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = 0;
x_8 = lean::box(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bracketedBinder_Parser___boxed), 6, 1);
lean::closure_set(x_9, 0, x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_many___at_Lean_Parser_command_NotationSpec_Parser_Lean_Parser_HasTokens___spec__1), 6, 1);
lean::closure_set(x_10, 0, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_optType_Parser), 5, 0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_11);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_10);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_14);
x_17 = l_Lean_Parser_Term_letLhsId;
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_18, 0, x_17);
lean::closure_set(x_18, 1, x_16);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_19, 0, x_5);
lean::inc(x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_11);
lean::inc(x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_18);
lean::cnstr_set(x_23, 1, x_21);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_24, 0, x_23);
lean::closure_set(x_24, 1, x_5);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_11);
x_26 = l_Lean_Parser_Term_letLhs;
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_27, 0, x_26);
lean::closure_set(x_27, 1, x_25);
x_28 = lean::mk_string(" := ");
x_29 = l_String_trim(x_28);
lean::dec(x_28);
lean::inc(x_29);
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_32, 0, x_29);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_33, 0, x_29);
lean::closure_set(x_33, 1, x_5);
lean::closure_set(x_33, 2, x_32);
x_34 = lean::mk_string(" in ");
x_35 = l_String_trim(x_34);
lean::dec(x_34);
lean::inc(x_35);
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_38, 0, x_35);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_39, 0, x_35);
lean::closure_set(x_39, 1, x_5);
lean::closure_set(x_39, 2, x_38);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_21);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_19);
lean::cnstr_set(x_41, 1, x_40);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_33);
lean::cnstr_set(x_42, 1, x_41);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_27);
lean::cnstr_set(x_43, 1, x_42);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_6);
lean::cnstr_set(x_44, 1, x_43);
x_45 = l_Lean_Parser_TermParserM_Monad;
x_46 = l_Lean_Parser_TermParserM_MonadExcept;
x_47 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_48 = l_Lean_Parser_TermParserM_Alternative;
x_49 = l_Lean_Parser_Term_let;
x_50 = l_Lean_Parser_Term_let_HasView;
x_51 = l_Lean_Parser_Combinators_node_view___rarg(x_45, x_46, x_47, x_48, x_49, x_44, x_50);
lean::dec(x_44);
return x_51;
}
}
obj* _init_l_Lean_Parser_Term_let_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; uint8 x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
x_0 = lean::mk_string("let ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = 0;
x_8 = lean::box(x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bracketedBinder_Parser___boxed), 6, 1);
lean::closure_set(x_9, 0, x_8);
x_10 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_many___at_Lean_Parser_command_NotationSpec_Parser_Lean_Parser_HasTokens___spec__1), 6, 1);
lean::closure_set(x_10, 0, x_9);
x_11 = lean::box(0);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_optType_Parser), 5, 0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_11);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_10);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_14);
x_17 = l_Lean_Parser_Term_letLhsId;
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_18, 0, x_17);
lean::closure_set(x_18, 1, x_16);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_19, 0, x_5);
lean::inc(x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_11);
lean::inc(x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_18);
lean::cnstr_set(x_23, 1, x_21);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_24, 0, x_23);
lean::closure_set(x_24, 1, x_5);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_11);
x_26 = l_Lean_Parser_Term_letLhs;
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_27, 0, x_26);
lean::closure_set(x_27, 1, x_25);
x_28 = lean::mk_string(" := ");
x_29 = l_String_trim(x_28);
lean::dec(x_28);
lean::inc(x_29);
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_32, 0, x_29);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_33, 0, x_29);
lean::closure_set(x_33, 1, x_5);
lean::closure_set(x_33, 2, x_32);
x_34 = lean::mk_string(" in ");
x_35 = l_String_trim(x_34);
lean::dec(x_34);
lean::inc(x_35);
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_38, 0, x_35);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_39, 0, x_35);
lean::closure_set(x_39, 1, x_5);
lean::closure_set(x_39, 2, x_38);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_21);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_19);
lean::cnstr_set(x_41, 1, x_40);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_33);
lean::cnstr_set(x_42, 1, x_41);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_27);
lean::cnstr_set(x_43, 1, x_42);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_6);
lean::cnstr_set(x_44, 1, x_43);
return x_44;
}
}
obj* l_Lean_Parser_Term_let_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_let;
x_6 = l_Lean_Parser_Term_let_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_optIdent() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("optIdent");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_optIdent_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_1);
if (lean::obj_tag(x_3) == 0)
{
obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_7 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_Lean_Parser_Term_optIdent;
x_10 = l_Lean_Parser_Syntax_mkNode(x_9, x_8);
return x_10;
}
else
{
obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_11 = lean::cnstr_get(x_3, 0);
lean::inc(x_11);
lean::dec(x_3);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_11);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_14);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_6);
lean::cnstr_set(x_17, 1, x_16);
x_18 = l_Lean_Parser_Term_optIdent;
x_19 = l_Lean_Parser_Syntax_mkNode(x_18, x_17);
return x_19;
}
}
}
obj* _init_l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOTAnIdent");
lean::inc(x_1);
x_3 = l_Lean_Parser_Substring_ofString(x_1);
x_4 = lean::box(0);
x_5 = lean_name_mk_string(x_4, x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_7, 0, x_0);
lean::cnstr_set(x_7, 1, x_3);
lean::cnstr_set(x_7, 2, x_5);
lean::cnstr_set(x_7, 3, x_6);
lean::cnstr_set(x_7, 4, x_6);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_0);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__1;
return x_0;
}
}
obj* l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 1:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_20; obj* x_23; obj* x_24; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::box(0);
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_20);
lean::cnstr_set(x_24, 1, x_23);
return x_24;
}
else
{
obj* x_25; 
x_25 = lean::cnstr_get(x_1, 0);
lean::inc(x_25);
lean::dec(x_1);
switch (lean::obj_tag(x_25)) {
case 0:
{
obj* x_28; obj* x_31; obj* x_34; obj* x_35; 
x_28 = lean::cnstr_get(x_2, 0);
lean::inc(x_28);
lean::dec(x_2);
x_31 = lean::cnstr_get(x_25, 0);
lean::inc(x_31);
lean::dec(x_25);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_31);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_28);
lean::cnstr_set(x_35, 1, x_34);
return x_35;
}
case 3:
{
obj* x_36; obj* x_39; obj* x_40; 
x_36 = lean::cnstr_get(x_2, 0);
lean::inc(x_36);
lean::dec(x_2);
x_39 = lean::box(0);
x_40 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_40, 0, x_36);
lean::cnstr_set(x_40, 1, x_39);
return x_40;
}
default:
{
obj* x_42; obj* x_45; obj* x_46; 
lean::dec(x_25);
x_42 = lean::cnstr_get(x_2, 0);
lean::inc(x_42);
lean::dec(x_2);
x_45 = lean::box(0);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_42);
lean::cnstr_set(x_46, 1, x_45);
return x_46;
}
}
}
}
case 3:
{
obj* x_47; 
x_47 = lean::box(0);
x_18 = x_47;
goto lbl_19;
}
default:
{
obj* x_49; 
lean::dec(x_2);
x_49 = lean::box(0);
x_18 = x_49;
goto lbl_19;
}
}
lbl_19:
{
lean::dec(x_18);
if (lean::obj_tag(x_1) == 0)
{
obj* x_51; 
x_51 = l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__1;
return x_51;
}
else
{
obj* x_52; 
x_52 = lean::cnstr_get(x_1, 0);
lean::inc(x_52);
lean::dec(x_1);
switch (lean::obj_tag(x_52)) {
case 0:
{
obj* x_55; obj* x_58; obj* x_59; obj* x_60; 
x_55 = lean::cnstr_get(x_52, 0);
lean::inc(x_55);
lean::dec(x_52);
x_58 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_58, 0, x_55);
x_59 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_60 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_60, 0, x_59);
lean::cnstr_set(x_60, 1, x_58);
return x_60;
}
case 3:
{
obj* x_61; 
x_61 = l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__1;
return x_61;
}
default:
{
obj* x_63; 
lean::dec(x_52);
x_63 = l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__1;
return x_63;
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_optIdent_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_optIdent_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_optIdent_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_optIdent_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_13; 
x_0 = lean::box(0);
x_1 = lean::mk_string(" : ");
x_2 = lean::mk_nat_obj(0ul);
x_3 = l_Lean_Parser_symbol_tokens___rarg(x_1, x_2);
lean::dec(x_1);
x_5 = l_Lean_Parser_List_cons_tokens___rarg(x_3, x_0);
lean::dec(x_3);
x_7 = l_Lean_Parser_List_cons_tokens___rarg(x_0, x_5);
lean::dec(x_5);
x_9 = l_Lean_Parser_tokens___rarg(x_7);
lean::dec(x_7);
x_11 = l_Lean_Parser_tokens___rarg(x_9);
lean::dec(x_9);
x_13 = l_Lean_Parser_tokens___rarg(x_11);
lean::dec(x_11);
return x_13;
}
}
obj* l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasView___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_14; 
x_6 = l_Lean_Parser_Term_optIdent;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_6, x_0, x_1, x_2, x_3, x_4, x_5);
x_8 = lean::cnstr_get(x_7, 0);
x_10 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 x_12 = x_7;
} else {
 lean::inc(x_8);
 lean::inc(x_10);
 lean::dec(x_7);
 x_12 = lean::box(0);
}
x_13 = l_Lean_Parser_ParsecT_tryMkRes___rarg(x_8);
if (lean::is_scalar(x_12)) {
 x_14 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_14 = x_12;
}
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_10);
return x_14;
}
}
obj* _init_l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_23; uint8 x_25; obj* x_26; 
x_0 = lean::mk_string(" : ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_8);
x_11 = l_Lean_Parser_Term_optIdent;
lean::inc(x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_13, 0, x_11);
lean::closure_set(x_13, 1, x_10);
lean::inc(x_10);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasView___lambda__1), 6, 1);
lean::closure_set(x_15, 0, x_10);
x_16 = l_Lean_Parser_TermParserM_Monad;
x_17 = l_Lean_Parser_TermParserM_MonadExcept;
x_18 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_19 = l_Lean_Parser_TermParserM_Alternative;
x_20 = l_Lean_Parser_Term_optIdent_HasView;
x_21 = l_Lean_Parser_Combinators_node_view___rarg(x_16, x_17, x_18, x_19, x_11, x_10, x_20);
lean::dec(x_10);
x_23 = l_Lean_Parser_Combinators_try_view___rarg(x_18, x_19, x_13, x_21);
lean::dec(x_13);
x_25 = 0;
x_26 = l_Lean_Parser_Combinators_optional_view___rarg(x_16, x_17, x_18, x_19, x_15, x_23, x_25);
lean::dec(x_15);
return x_26;
}
}
obj* _init_l_Lean_Parser_Term_optIdent_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_0 = lean::mk_string(" : ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasView___lambda__1), 6, 1);
lean::closure_set(x_11, 0, x_10);
return x_11;
}
}
obj* l_Lean_Parser_Term_optIdent_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; uint8 x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_optIdent_Parser___closed__1;
x_6 = 0;
x_7 = l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_haveTerm() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("haveTerm");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
if (lean::obj_tag(x_1) == 0)
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_8 = lean::box(3);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_Lean_Parser_Term_haveTerm;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
return x_11;
}
else
{
obj* x_12; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_12 = lean::cnstr_get(x_1, 0);
lean::inc(x_12);
lean::dec(x_1);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_12);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_7);
x_17 = l_Lean_Parser_Term_haveTerm;
x_18 = l_Lean_Parser_Syntax_mkNode(x_17, x_16);
return x_18;
}
}
}
obj* _init_l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__2___closed__1;
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
switch (lean::obj_tag(x_11)) {
case 0:
{
obj* x_13; obj* x_16; obj* x_19; 
x_13 = lean::cnstr_get(x_6, 1);
lean::inc(x_13);
lean::dec(x_6);
x_16 = lean::cnstr_get(x_11, 0);
lean::inc(x_16);
lean::dec(x_11);
if (lean::is_scalar(x_5)) {
 x_19 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_19 = x_5;
}
lean::cnstr_set(x_19, 0, x_16);
if (lean::obj_tag(x_13) == 0)
{
obj* x_20; obj* x_21; 
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_13, 0);
lean::inc(x_22);
lean::dec(x_13);
x_25 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_25, 0, x_19);
lean::cnstr_set(x_25, 1, x_22);
return x_25;
}
}
case 3:
{
obj* x_27; 
lean::dec(x_5);
x_27 = lean::cnstr_get(x_6, 1);
lean::inc(x_27);
lean::dec(x_6);
if (lean::obj_tag(x_27) == 0)
{
obj* x_30; 
x_30 = l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__2___closed__1;
return x_30;
}
else
{
obj* x_31; obj* x_34; obj* x_35; 
x_31 = lean::cnstr_get(x_27, 0);
lean::inc(x_31);
lean::dec(x_27);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_31);
return x_35;
}
}
default:
{
obj* x_38; 
lean::dec(x_11);
lean::dec(x_5);
x_38 = lean::cnstr_get(x_6, 1);
lean::inc(x_38);
lean::dec(x_6);
if (lean::obj_tag(x_38) == 0)
{
obj* x_41; 
x_41 = l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__2___closed__1;
return x_41;
}
else
{
obj* x_42; obj* x_45; obj* x_46; 
x_42 = lean::cnstr_get(x_38, 0);
lean::inc(x_42);
lean::dec(x_38);
x_45 = lean::box(0);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_42);
return x_46;
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_haveTerm_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_haveTerm_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_haveTerm_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_haveFrom() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("haveFrom");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_haveFrom_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_10; obj* x_11; obj* x_12; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_Lean_Parser_Term_from_HasView;
x_7 = lean::cnstr_get(x_6, 1);
lean::inc(x_7);
lean::dec(x_6);
x_10 = lean::apply_1(x_7, x_3);
x_11 = lean::box(0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
if (lean::obj_tag(x_1) == 0)
{
obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_13 = lean::box(3);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_12);
x_15 = l_Lean_Parser_Term_haveFrom;
x_16 = l_Lean_Parser_Syntax_mkNode(x_15, x_14);
return x_16;
}
else
{
obj* x_17; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_17 = lean::cnstr_get(x_1, 0);
lean::inc(x_17);
lean::dec(x_1);
x_20 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_20, 0, x_17);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_12);
x_22 = l_Lean_Parser_Term_haveFrom;
x_23 = l_Lean_Parser_Syntax_mkNode(x_22, x_21);
return x_23;
}
}
}
obj* _init_l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; 
x_0 = l_Lean_Parser_Term_from_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
return x_5;
}
}
obj* _init_l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_Term_from_HasView;
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_0);
lean::cnstr_set(x_7, 1, x_6);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__2;
return x_0;
}
}
obj* l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__3;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_18; obj* x_21; 
x_18 = lean::cnstr_get(x_2, 0);
lean::inc(x_18);
lean::dec(x_2);
x_21 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_21, 0, x_18);
if (lean::obj_tag(x_1) == 0)
{
obj* x_22; obj* x_23; 
x_22 = l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__1;
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_21);
lean::cnstr_set(x_23, 1, x_22);
return x_23;
}
else
{
obj* x_24; obj* x_27; obj* x_28; obj* x_31; obj* x_32; 
x_24 = lean::cnstr_get(x_1, 0);
lean::inc(x_24);
lean::dec(x_1);
x_27 = l_Lean_Parser_Term_from_HasView;
x_28 = lean::cnstr_get(x_27, 0);
lean::inc(x_28);
lean::dec(x_27);
x_31 = lean::apply_1(x_28, x_24);
x_32 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_32, 0, x_21);
lean::cnstr_set(x_32, 1, x_31);
return x_32;
}
}
case 3:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_33; 
x_33 = l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__2;
return x_33;
}
else
{
obj* x_34; obj* x_37; obj* x_38; obj* x_39; obj* x_42; obj* x_43; 
x_34 = lean::cnstr_get(x_1, 0);
lean::inc(x_34);
lean::dec(x_1);
x_37 = lean::box(0);
x_38 = l_Lean_Parser_Term_from_HasView;
x_39 = lean::cnstr_get(x_38, 0);
lean::inc(x_39);
lean::dec(x_38);
x_42 = lean::apply_1(x_39, x_34);
x_43 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_43, 0, x_37);
lean::cnstr_set(x_43, 1, x_42);
return x_43;
}
}
default:
{
lean::dec(x_2);
if (lean::obj_tag(x_1) == 0)
{
obj* x_45; 
x_45 = l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__2;
return x_45;
}
else
{
obj* x_46; obj* x_49; obj* x_50; obj* x_51; obj* x_54; obj* x_55; 
x_46 = lean::cnstr_get(x_1, 0);
lean::inc(x_46);
lean::dec(x_1);
x_49 = lean::box(0);
x_50 = l_Lean_Parser_Term_from_HasView;
x_51 = lean::cnstr_get(x_50, 0);
lean::inc(x_51);
lean::dec(x_50);
x_54 = lean::apply_1(x_51, x_46);
x_55 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_55, 0, x_49);
lean::cnstr_set(x_55, 1, x_54);
return x_55;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_haveFrom_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_haveFrom_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_haveFrom_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_haveFrom_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_haveProof() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("haveProof");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_haveProof_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_Lean_Parser_Term_haveTerm_HasView;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_12 = l_Lean_Parser_Syntax_mkNode(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_Lean_Parser_Term_haveProof;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_Lean_Parser_Term_haveFrom_HasView;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_26 = l_Lean_Parser_Syntax_mkNode(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_Lean_Parser_Term_haveProof;
x_29 = l_Lean_Parser_Syntax_mkNode(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_haveTerm_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("haveProof");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__2;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
obj* x_58; obj* x_59; obj* x_62; obj* x_63; 
x_58 = l_Lean_Parser_Term_haveFrom_HasView;
x_59 = lean::cnstr_get(x_58, 0);
lean::inc(x_59);
lean::dec(x_58);
x_62 = lean::apply_1(x_59, x_52);
x_63 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_63, 0, x_62);
return x_63;
}
else
{
obj* x_64; obj* x_65; obj* x_68; obj* x_69; 
x_64 = l_Lean_Parser_Term_haveTerm_HasView;
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
lean::dec(x_64);
x_68 = lean::apply_1(x_65, x_52);
x_69 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_69, 0, x_68);
return x_69;
}
}
else
{
obj* x_73; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_73 = l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1;
return x_73;
}
}
}
}
}
}
}
else
{
obj* x_76; 
lean::dec(x_8);
lean::dec(x_17);
x_76 = l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1;
return x_76;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_haveProof_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_haveProof_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_haveProof_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_haveProof_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_have() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("have");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_have_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_14; obj* x_15; obj* x_18; obj* x_19; obj* x_20; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
lean::dec(x_0);
x_14 = l_Lean_Parser_Term_haveProof_HasView;
x_15 = lean::cnstr_get(x_14, 1);
lean::inc(x_15);
lean::dec(x_14);
x_18 = lean::apply_1(x_15, x_7);
x_19 = lean::box(0);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_11);
lean::cnstr_set(x_20, 1, x_19);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_3) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_21 = lean::box(3);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_18);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_5);
lean::cnstr_set(x_24, 1, x_23);
x_25 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_21);
lean::cnstr_set(x_27, 1, x_26);
x_28 = l_Lean_Parser_Term_have;
x_29 = l_Lean_Parser_Syntax_mkNode(x_28, x_27);
return x_29;
}
else
{
obj* x_30; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
x_30 = lean::cnstr_get(x_9, 0);
lean::inc(x_30);
lean::dec(x_9);
x_33 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_33, 0, x_30);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_20);
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_18);
lean::cnstr_set(x_35, 1, x_34);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_5);
lean::cnstr_set(x_36, 1, x_35);
x_37 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_36);
x_39 = lean::box(3);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_38);
x_41 = l_Lean_Parser_Term_have;
x_42 = l_Lean_Parser_Syntax_mkNode(x_41, x_40);
return x_42;
}
}
else
{
obj* x_43; obj* x_46; obj* x_47; obj* x_50; obj* x_51; obj* x_52; obj* x_53; 
x_43 = lean::cnstr_get(x_3, 0);
lean::inc(x_43);
lean::dec(x_3);
x_46 = l_Lean_Parser_Term_optIdent_HasView;
x_47 = lean::cnstr_get(x_46, 1);
lean::inc(x_47);
lean::dec(x_46);
x_50 = lean::apply_1(x_47, x_43);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_50);
lean::cnstr_set(x_51, 1, x_19);
x_52 = l_Lean_Parser_noKind;
x_53 = l_Lean_Parser_Syntax_mkNode(x_52, x_51);
if (lean::obj_tag(x_9) == 0)
{
obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; 
x_54 = lean::box(3);
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_20);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_18);
lean::cnstr_set(x_56, 1, x_55);
x_57 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_57, 0, x_5);
lean::cnstr_set(x_57, 1, x_56);
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_53);
lean::cnstr_set(x_58, 1, x_57);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_54);
lean::cnstr_set(x_59, 1, x_58);
x_60 = l_Lean_Parser_Term_have;
x_61 = l_Lean_Parser_Syntax_mkNode(x_60, x_59);
return x_61;
}
else
{
obj* x_62; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; 
x_62 = lean::cnstr_get(x_9, 0);
lean::inc(x_62);
lean::dec(x_9);
x_65 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_65, 0, x_62);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_65);
lean::cnstr_set(x_66, 1, x_20);
x_67 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_67, 0, x_18);
lean::cnstr_set(x_67, 1, x_66);
x_68 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_68, 0, x_5);
lean::cnstr_set(x_68, 1, x_67);
x_69 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_69, 0, x_53);
lean::cnstr_set(x_69, 1, x_68);
x_70 = lean::box(3);
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_70);
lean::cnstr_set(x_71, 1, x_69);
x_72 = l_Lean_Parser_Term_have;
x_73 = l_Lean_Parser_Syntax_mkNode(x_72, x_71);
return x_73;
}
}
}
else
{
obj* x_74; obj* x_77; 
x_74 = lean::cnstr_get(x_1, 0);
lean::inc(x_74);
lean::dec(x_1);
x_77 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_77, 0, x_74);
if (lean::obj_tag(x_3) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; 
x_78 = lean::box(3);
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_78);
lean::cnstr_set(x_79, 1, x_20);
x_80 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_80, 0, x_18);
lean::cnstr_set(x_80, 1, x_79);
x_81 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_81, 0, x_5);
lean::cnstr_set(x_81, 1, x_80);
x_82 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_83 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_83, 0, x_82);
lean::cnstr_set(x_83, 1, x_81);
x_84 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_84, 0, x_77);
lean::cnstr_set(x_84, 1, x_83);
x_85 = l_Lean_Parser_Term_have;
x_86 = l_Lean_Parser_Syntax_mkNode(x_85, x_84);
return x_86;
}
else
{
obj* x_87; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; 
x_87 = lean::cnstr_get(x_9, 0);
lean::inc(x_87);
lean::dec(x_9);
x_90 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_90, 0, x_87);
x_91 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_91, 0, x_90);
lean::cnstr_set(x_91, 1, x_20);
x_92 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_92, 0, x_18);
lean::cnstr_set(x_92, 1, x_91);
x_93 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_93, 0, x_5);
lean::cnstr_set(x_93, 1, x_92);
x_94 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_95 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_95, 0, x_94);
lean::cnstr_set(x_95, 1, x_93);
x_96 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_96, 0, x_77);
lean::cnstr_set(x_96, 1, x_95);
x_97 = l_Lean_Parser_Term_have;
x_98 = l_Lean_Parser_Syntax_mkNode(x_97, x_96);
return x_98;
}
}
else
{
obj* x_99; obj* x_102; obj* x_103; obj* x_106; obj* x_107; obj* x_108; obj* x_109; 
x_99 = lean::cnstr_get(x_3, 0);
lean::inc(x_99);
lean::dec(x_3);
x_102 = l_Lean_Parser_Term_optIdent_HasView;
x_103 = lean::cnstr_get(x_102, 1);
lean::inc(x_103);
lean::dec(x_102);
x_106 = lean::apply_1(x_103, x_99);
x_107 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_107, 0, x_106);
lean::cnstr_set(x_107, 1, x_19);
x_108 = l_Lean_Parser_noKind;
x_109 = l_Lean_Parser_Syntax_mkNode(x_108, x_107);
if (lean::obj_tag(x_9) == 0)
{
obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; obj* x_115; obj* x_116; obj* x_117; 
x_110 = lean::box(3);
x_111 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_111, 0, x_110);
lean::cnstr_set(x_111, 1, x_20);
x_112 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_112, 0, x_18);
lean::cnstr_set(x_112, 1, x_111);
x_113 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_113, 0, x_5);
lean::cnstr_set(x_113, 1, x_112);
x_114 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_114, 0, x_109);
lean::cnstr_set(x_114, 1, x_113);
x_115 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_115, 0, x_77);
lean::cnstr_set(x_115, 1, x_114);
x_116 = l_Lean_Parser_Term_have;
x_117 = l_Lean_Parser_Syntax_mkNode(x_116, x_115);
return x_117;
}
else
{
obj* x_118; obj* x_121; obj* x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; 
x_118 = lean::cnstr_get(x_9, 0);
lean::inc(x_118);
lean::dec(x_9);
x_121 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_121, 0, x_118);
x_122 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_122, 0, x_121);
lean::cnstr_set(x_122, 1, x_20);
x_123 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_123, 0, x_18);
lean::cnstr_set(x_123, 1, x_122);
x_124 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_124, 0, x_5);
lean::cnstr_set(x_124, 1, x_123);
x_125 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_125, 0, x_109);
lean::cnstr_set(x_125, 1, x_124);
x_126 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_126, 0, x_77);
lean::cnstr_set(x_126, 1, x_125);
x_127 = l_Lean_Parser_Term_have;
x_128 = l_Lean_Parser_Syntax_mkNode(x_127, x_126);
return x_128;
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_optIdent_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_3 = lean::box(3);
x_4 = l_Lean_Parser_Syntax_asNode___main(x_3);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__1;
x_1 = x_5;
goto lbl_2;
}
else
{
obj* x_6; obj* x_8; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
if (lean::is_exclusive(x_4)) {
 lean::cnstr_set(x_4, 0, lean::box(0));
 x_8 = x_4;
} else {
 lean::inc(x_6);
 lean::dec(x_4);
 x_8 = lean::box(0);
}
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
lean::dec(x_8);
x_1 = x_0;
goto lbl_2;
}
else
{
obj* x_13; 
x_13 = lean::cnstr_get(x_9, 1);
lean::inc(x_13);
if (lean::obj_tag(x_13) == 0)
{
obj* x_15; obj* x_18; obj* x_19; obj* x_22; obj* x_23; 
x_15 = lean::cnstr_get(x_9, 0);
lean::inc(x_15);
lean::dec(x_9);
x_18 = l_Lean_Parser_Term_optIdent_HasView;
x_19 = lean::cnstr_get(x_18, 0);
lean::inc(x_19);
lean::dec(x_18);
x_22 = lean::apply_1(x_19, x_15);
if (lean::is_scalar(x_8)) {
 x_23 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_23 = x_8;
}
lean::cnstr_set(x_23, 0, x_22);
x_1 = x_23;
goto lbl_2;
}
else
{
obj* x_27; 
lean::dec(x_13);
lean::dec(x_8);
lean::dec(x_9);
x_27 = l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__1;
x_1 = x_27;
goto lbl_2;
}
}
}
lbl_2:
{
obj* x_28; obj* x_29; obj* x_32; obj* x_33; obj* x_34; 
x_28 = l_Lean_Parser_Term_haveProof_HasView;
x_29 = lean::cnstr_get(x_28, 0);
lean::inc(x_29);
lean::dec(x_28);
x_32 = lean::box(3);
x_33 = lean::apply_1(x_29, x_32);
x_34 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_34, 0, x_0);
lean::cnstr_set(x_34, 1, x_1);
lean::cnstr_set(x_34, 2, x_32);
lean::cnstr_set(x_34, 3, x_33);
lean::cnstr_set(x_34, 4, x_0);
lean::cnstr_set(x_34, 5, x_32);
return x_34;
}
}
}
obj* l_Lean_Parser_Term_have_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; obj* x_38; 
x_38 = l_Lean_Parser_Syntax_asNode___main(x_28);
if (lean::obj_tag(x_38) == 0)
{
obj* x_39; 
x_39 = l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__1;
x_36 = x_39;
goto lbl_37;
}
else
{
obj* x_40; obj* x_42; obj* x_43; 
x_40 = lean::cnstr_get(x_38, 0);
if (lean::is_exclusive(x_38)) {
 lean::cnstr_set(x_38, 0, lean::box(0));
 x_42 = x_38;
} else {
 lean::inc(x_40);
 lean::dec(x_38);
 x_42 = lean::box(0);
}
x_43 = lean::cnstr_get(x_40, 1);
lean::inc(x_43);
lean::dec(x_40);
if (lean::obj_tag(x_43) == 0)
{
obj* x_47; 
lean::dec(x_42);
x_47 = lean::box(0);
x_36 = x_47;
goto lbl_37;
}
else
{
obj* x_48; 
x_48 = lean::cnstr_get(x_43, 1);
lean::inc(x_48);
if (lean::obj_tag(x_48) == 0)
{
obj* x_50; obj* x_53; obj* x_54; obj* x_57; obj* x_58; 
x_50 = lean::cnstr_get(x_43, 0);
lean::inc(x_50);
lean::dec(x_43);
x_53 = l_Lean_Parser_Term_optIdent_HasView;
x_54 = lean::cnstr_get(x_53, 0);
lean::inc(x_54);
lean::dec(x_53);
x_57 = lean::apply_1(x_54, x_50);
if (lean::is_scalar(x_42)) {
 x_58 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_58 = x_42;
}
lean::cnstr_set(x_58, 0, x_57);
x_36 = x_58;
goto lbl_37;
}
else
{
obj* x_62; 
lean::dec(x_42);
lean::dec(x_43);
lean::dec(x_48);
x_62 = l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__1;
x_36 = x_62;
goto lbl_37;
}
}
}
lbl_37:
{
obj* x_63; obj* x_64; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_66; 
x_66 = lean::box(3);
x_63 = x_27;
x_64 = x_66;
goto lbl_65;
}
else
{
obj* x_67; obj* x_69; 
x_67 = lean::cnstr_get(x_27, 0);
lean::inc(x_67);
x_69 = lean::cnstr_get(x_27, 1);
lean::inc(x_69);
lean::dec(x_27);
x_63 = x_69;
x_64 = x_67;
goto lbl_65;
}
lbl_65:
{
obj* x_72; obj* x_73; 
if (lean::obj_tag(x_63) == 0)
{
obj* x_75; 
x_75 = lean::box(3);
x_72 = x_63;
x_73 = x_75;
goto lbl_74;
}
else
{
obj* x_76; obj* x_78; 
x_76 = lean::cnstr_get(x_63, 0);
lean::inc(x_76);
x_78 = lean::cnstr_get(x_63, 1);
lean::inc(x_78);
lean::dec(x_63);
x_72 = x_78;
x_73 = x_76;
goto lbl_74;
}
lbl_74:
{
obj* x_81; obj* x_82; obj* x_85; 
x_81 = l_Lean_Parser_Term_haveProof_HasView;
x_82 = lean::cnstr_get(x_81, 0);
lean::inc(x_82);
lean::dec(x_81);
x_85 = lean::apply_1(x_82, x_73);
if (lean::obj_tag(x_72) == 0)
{
obj* x_86; obj* x_87; obj* x_88; 
x_86 = lean::box(0);
x_87 = lean::box(3);
x_88 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_88, 0, x_18);
lean::cnstr_set(x_88, 1, x_36);
lean::cnstr_set(x_88, 2, x_64);
lean::cnstr_set(x_88, 3, x_85);
lean::cnstr_set(x_88, 4, x_86);
lean::cnstr_set(x_88, 5, x_87);
return x_88;
}
else
{
obj* x_89; 
x_89 = lean::cnstr_get(x_72, 0);
lean::inc(x_89);
switch (lean::obj_tag(x_89)) {
case 0:
{
obj* x_91; obj* x_94; obj* x_97; 
x_91 = lean::cnstr_get(x_72, 1);
lean::inc(x_91);
lean::dec(x_72);
x_94 = lean::cnstr_get(x_89, 0);
lean::inc(x_94);
lean::dec(x_89);
x_97 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_97, 0, x_94);
if (lean::obj_tag(x_91) == 0)
{
obj* x_98; obj* x_99; 
x_98 = lean::box(3);
x_99 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_99, 0, x_18);
lean::cnstr_set(x_99, 1, x_36);
lean::cnstr_set(x_99, 2, x_64);
lean::cnstr_set(x_99, 3, x_85);
lean::cnstr_set(x_99, 4, x_97);
lean::cnstr_set(x_99, 5, x_98);
return x_99;
}
else
{
obj* x_100; obj* x_103; 
x_100 = lean::cnstr_get(x_91, 0);
lean::inc(x_100);
lean::dec(x_91);
x_103 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_103, 0, x_18);
lean::cnstr_set(x_103, 1, x_36);
lean::cnstr_set(x_103, 2, x_64);
lean::cnstr_set(x_103, 3, x_85);
lean::cnstr_set(x_103, 4, x_97);
lean::cnstr_set(x_103, 5, x_100);
return x_103;
}
}
case 3:
{
obj* x_104; obj* x_107; 
x_104 = lean::cnstr_get(x_72, 1);
lean::inc(x_104);
lean::dec(x_72);
x_107 = lean::box(0);
if (lean::obj_tag(x_104) == 0)
{
obj* x_108; obj* x_109; 
x_108 = lean::box(3);
x_109 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_109, 0, x_18);
lean::cnstr_set(x_109, 1, x_36);
lean::cnstr_set(x_109, 2, x_64);
lean::cnstr_set(x_109, 3, x_85);
lean::cnstr_set(x_109, 4, x_107);
lean::cnstr_set(x_109, 5, x_108);
return x_109;
}
else
{
obj* x_110; obj* x_113; 
x_110 = lean::cnstr_get(x_104, 0);
lean::inc(x_110);
lean::dec(x_104);
x_113 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_113, 0, x_18);
lean::cnstr_set(x_113, 1, x_36);
lean::cnstr_set(x_113, 2, x_64);
lean::cnstr_set(x_113, 3, x_85);
lean::cnstr_set(x_113, 4, x_107);
lean::cnstr_set(x_113, 5, x_110);
return x_113;
}
}
default:
{
obj* x_115; obj* x_118; 
lean::dec(x_89);
x_115 = lean::cnstr_get(x_72, 1);
lean::inc(x_115);
lean::dec(x_72);
x_118 = lean::box(0);
if (lean::obj_tag(x_115) == 0)
{
obj* x_119; obj* x_120; 
x_119 = lean::box(3);
x_120 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_120, 0, x_18);
lean::cnstr_set(x_120, 1, x_36);
lean::cnstr_set(x_120, 2, x_64);
lean::cnstr_set(x_120, 3, x_85);
lean::cnstr_set(x_120, 4, x_118);
lean::cnstr_set(x_120, 5, x_119);
return x_120;
}
else
{
obj* x_121; obj* x_124; 
x_121 = lean::cnstr_get(x_115, 0);
lean::inc(x_121);
lean::dec(x_115);
x_124 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_124, 0, x_18);
lean::cnstr_set(x_124, 1, x_36);
lean::cnstr_set(x_124, 2, x_64);
lean::cnstr_set(x_124, 3, x_85);
lean::cnstr_set(x_124, 4, x_118);
lean::cnstr_set(x_124, 5, x_121);
return x_124;
}
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_have_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_have_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_have_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_have_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_have_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_have_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_12; obj* x_14; obj* x_15; obj* x_17; obj* x_18; obj* x_19; obj* x_21; obj* x_23; obj* x_25; obj* x_28; obj* x_30; obj* x_32; obj* x_34; obj* x_37; obj* x_40; obj* x_43; obj* x_44; obj* x_46; obj* x_49; 
x_0 = lean::mk_string("have ");
x_1 = lean::mk_nat_obj(0ul);
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_1);
x_5 = lean::mk_string(" := ");
x_6 = l_Lean_Parser_symbol_tokens___rarg(x_5, x_1);
lean::dec(x_5);
x_8 = lean::box(0);
x_9 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_8);
x_10 = l_Lean_Parser_List_cons_tokens___rarg(x_6, x_9);
lean::dec(x_6);
x_12 = l_Lean_Parser_tokens___rarg(x_10);
lean::dec(x_10);
x_14 = lean::mk_string(", ");
x_15 = l_Lean_Parser_symbol_tokens___rarg(x_14, x_1);
lean::dec(x_14);
x_17 = l_Lean_Parser_Term_from_Parser_Lean_Parser_HasTokens;
x_18 = l_Lean_Parser_List_cons_tokens___rarg(x_17, x_8);
x_19 = l_Lean_Parser_List_cons_tokens___rarg(x_15, x_18);
lean::dec(x_18);
x_21 = l_Lean_Parser_tokens___rarg(x_19);
lean::dec(x_19);
x_23 = l_Lean_Parser_List_cons_tokens___rarg(x_21, x_8);
lean::dec(x_21);
x_25 = l_Lean_Parser_List_cons_tokens___rarg(x_12, x_23);
lean::dec(x_23);
lean::dec(x_12);
x_28 = l_Lean_Parser_tokens___rarg(x_25);
lean::dec(x_25);
x_30 = l_Lean_Parser_List_cons_tokens___rarg(x_28, x_8);
lean::dec(x_28);
x_32 = l_Lean_Parser_tokens___rarg(x_30);
lean::dec(x_30);
x_34 = l_Lean_Parser_List_cons_tokens___rarg(x_15, x_9);
lean::dec(x_9);
lean::dec(x_15);
x_37 = l_Lean_Parser_List_cons_tokens___rarg(x_32, x_34);
lean::dec(x_34);
lean::dec(x_32);
x_40 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_37);
lean::dec(x_37);
lean::dec(x_4);
x_43 = l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasTokens;
x_44 = l_Lean_Parser_List_cons_tokens___rarg(x_43, x_40);
lean::dec(x_40);
x_46 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_44);
lean::dec(x_44);
lean::dec(x_2);
x_49 = l_Lean_Parser_tokens___rarg(x_46);
lean::dec(x_46);
return x_49;
}
}
obj* _init_l_Lean_Parser_Term_have_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_12; obj* x_13; obj* x_14; obj* x_16; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; 
x_0 = lean::mk_string("have ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::mk_string(" := ");
x_9 = l_String_trim(x_8);
lean::dec(x_8);
lean::inc(x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_12, 0, x_9);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_13, 0, x_9);
lean::closure_set(x_13, 1, x_5);
lean::closure_set(x_13, 2, x_12);
x_14 = lean::box(0);
lean::inc(x_7);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_7);
lean::cnstr_set(x_16, 1, x_14);
lean::inc(x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_13);
lean::cnstr_set(x_18, 1, x_16);
x_19 = l_Lean_Parser_Term_haveTerm;
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_20, 0, x_19);
lean::closure_set(x_20, 1, x_18);
x_21 = lean::mk_string(", ");
x_22 = l_String_trim(x_21);
lean::dec(x_21);
lean::inc(x_22);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_25, 0, x_22);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_26, 0, x_22);
lean::closure_set(x_26, 1, x_5);
lean::closure_set(x_26, 2, x_25);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_from_Parser), 5, 0);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_14);
lean::inc(x_26);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_26);
lean::cnstr_set(x_30, 1, x_28);
x_31 = l_Lean_Parser_Term_haveFrom;
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_32, 0, x_31);
lean::closure_set(x_32, 1, x_30);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_14);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_20);
lean::cnstr_set(x_34, 1, x_33);
x_35 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_35, 0, x_34);
lean::closure_set(x_35, 1, x_5);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_14);
x_37 = l_Lean_Parser_Term_haveProof;
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_38, 0, x_37);
lean::closure_set(x_38, 1, x_36);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_26);
lean::cnstr_set(x_39, 1, x_16);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_38);
lean::cnstr_set(x_40, 1, x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_7);
lean::cnstr_set(x_41, 1, x_40);
x_42 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_optIdent_Parser), 5, 0);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_41);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_6);
lean::cnstr_set(x_44, 1, x_43);
x_45 = l_Lean_Parser_TermParserM_Monad;
x_46 = l_Lean_Parser_TermParserM_MonadExcept;
x_47 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_48 = l_Lean_Parser_TermParserM_Alternative;
x_49 = l_Lean_Parser_Term_have;
x_50 = l_Lean_Parser_Term_have_HasView;
x_51 = l_Lean_Parser_Combinators_node_view___rarg(x_45, x_46, x_47, x_48, x_49, x_44, x_50);
lean::dec(x_44);
return x_51;
}
}
obj* _init_l_Lean_Parser_Term_have_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_12; obj* x_13; obj* x_14; obj* x_16; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
x_0 = lean::mk_string("have ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::mk_string(" := ");
x_9 = l_String_trim(x_8);
lean::dec(x_8);
lean::inc(x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_12, 0, x_9);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_13, 0, x_9);
lean::closure_set(x_13, 1, x_5);
lean::closure_set(x_13, 2, x_12);
x_14 = lean::box(0);
lean::inc(x_7);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_7);
lean::cnstr_set(x_16, 1, x_14);
lean::inc(x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_13);
lean::cnstr_set(x_18, 1, x_16);
x_19 = l_Lean_Parser_Term_haveTerm;
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_20, 0, x_19);
lean::closure_set(x_20, 1, x_18);
x_21 = lean::mk_string(", ");
x_22 = l_String_trim(x_21);
lean::dec(x_21);
lean::inc(x_22);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_25, 0, x_22);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_26, 0, x_22);
lean::closure_set(x_26, 1, x_5);
lean::closure_set(x_26, 2, x_25);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_from_Parser), 5, 0);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_14);
lean::inc(x_26);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_26);
lean::cnstr_set(x_30, 1, x_28);
x_31 = l_Lean_Parser_Term_haveFrom;
x_32 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_32, 0, x_31);
lean::closure_set(x_32, 1, x_30);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_14);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_20);
lean::cnstr_set(x_34, 1, x_33);
x_35 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_35, 0, x_34);
lean::closure_set(x_35, 1, x_5);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_14);
x_37 = l_Lean_Parser_Term_haveProof;
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_38, 0, x_37);
lean::closure_set(x_38, 1, x_36);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_26);
lean::cnstr_set(x_39, 1, x_16);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_38);
lean::cnstr_set(x_40, 1, x_39);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_7);
lean::cnstr_set(x_41, 1, x_40);
x_42 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_optIdent_Parser), 5, 0);
x_43 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_41);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_6);
lean::cnstr_set(x_44, 1, x_43);
return x_44;
}
}
obj* l_Lean_Parser_Term_have_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_have;
x_6 = l_Lean_Parser_Term_have_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_show() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("show");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_show_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_10; obj* x_11; obj* x_14; obj* x_15; obj* x_16; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
lean::dec(x_0);
x_10 = l_Lean_Parser_Term_from_HasView;
x_11 = lean::cnstr_get(x_10, 1);
lean::inc(x_11);
lean::dec(x_10);
x_14 = lean::apply_1(x_11, x_7);
x_15 = lean::box(0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_14);
lean::cnstr_set(x_16, 1, x_15);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; 
x_17 = lean::box(3);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_16);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_3);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_17);
lean::cnstr_set(x_20, 1, x_19);
x_21 = l_Lean_Parser_Term_show;
x_22 = l_Lean_Parser_Syntax_mkNode(x_21, x_20);
return x_22;
}
else
{
obj* x_23; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
x_23 = lean::cnstr_get(x_5, 0);
lean::inc(x_23);
lean::dec(x_5);
x_26 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_26, 0, x_23);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_16);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_3);
lean::cnstr_set(x_28, 1, x_27);
x_29 = lean::box(3);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_28);
x_31 = l_Lean_Parser_Term_show;
x_32 = l_Lean_Parser_Syntax_mkNode(x_31, x_30);
return x_32;
}
}
else
{
obj* x_33; obj* x_36; 
x_33 = lean::cnstr_get(x_1, 0);
lean::inc(x_33);
lean::dec(x_1);
x_36 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_36, 0, x_33);
if (lean::obj_tag(x_5) == 0)
{
obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
x_37 = lean::box(3);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_16);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_3);
lean::cnstr_set(x_39, 1, x_38);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_36);
lean::cnstr_set(x_40, 1, x_39);
x_41 = l_Lean_Parser_Term_show;
x_42 = l_Lean_Parser_Syntax_mkNode(x_41, x_40);
return x_42;
}
else
{
obj* x_43; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; 
x_43 = lean::cnstr_get(x_5, 0);
lean::inc(x_43);
lean::dec(x_5);
x_46 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_46, 0, x_43);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_46);
lean::cnstr_set(x_47, 1, x_16);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_3);
lean::cnstr_set(x_48, 1, x_47);
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_36);
lean::cnstr_set(x_49, 1, x_48);
x_50 = l_Lean_Parser_Term_show;
x_51 = l_Lean_Parser_Syntax_mkNode(x_50, x_49);
return x_51;
}
}
}
}
obj* _init_l_Lean_Parser_Term_show_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__1;
x_3 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_3, 0, x_0);
lean::cnstr_set(x_3, 1, x_1);
lean::cnstr_set(x_3, 2, x_0);
lean::cnstr_set(x_3, 3, x_2);
return x_3;
}
}
obj* l_Lean_Parser_Term_show_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_show_HasView_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; obj* x_37; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_39; 
x_39 = lean::box(3);
x_36 = x_27;
x_37 = x_39;
goto lbl_38;
}
else
{
obj* x_40; obj* x_42; 
x_40 = lean::cnstr_get(x_27, 0);
lean::inc(x_40);
x_42 = lean::cnstr_get(x_27, 1);
lean::inc(x_42);
lean::dec(x_27);
x_36 = x_42;
x_37 = x_40;
goto lbl_38;
}
lbl_38:
{
switch (lean::obj_tag(x_37)) {
case 0:
{
obj* x_45; obj* x_48; 
x_45 = lean::cnstr_get(x_37, 0);
lean::inc(x_45);
lean::dec(x_37);
x_48 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_48, 0, x_45);
if (lean::obj_tag(x_36) == 0)
{
obj* x_49; obj* x_50; 
x_49 = l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__1;
x_50 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_50, 0, x_18);
lean::cnstr_set(x_50, 1, x_28);
lean::cnstr_set(x_50, 2, x_48);
lean::cnstr_set(x_50, 3, x_49);
return x_50;
}
else
{
obj* x_51; obj* x_54; obj* x_55; obj* x_58; obj* x_59; 
x_51 = lean::cnstr_get(x_36, 0);
lean::inc(x_51);
lean::dec(x_36);
x_54 = l_Lean_Parser_Term_from_HasView;
x_55 = lean::cnstr_get(x_54, 0);
lean::inc(x_55);
lean::dec(x_54);
x_58 = lean::apply_1(x_55, x_51);
x_59 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_59, 0, x_18);
lean::cnstr_set(x_59, 1, x_28);
lean::cnstr_set(x_59, 2, x_48);
lean::cnstr_set(x_59, 3, x_58);
return x_59;
}
}
case 3:
{
obj* x_60; 
x_60 = lean::box(0);
if (lean::obj_tag(x_36) == 0)
{
obj* x_61; obj* x_62; 
x_61 = l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__1;
x_62 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_62, 0, x_18);
lean::cnstr_set(x_62, 1, x_28);
lean::cnstr_set(x_62, 2, x_60);
lean::cnstr_set(x_62, 3, x_61);
return x_62;
}
else
{
obj* x_63; obj* x_66; obj* x_67; obj* x_70; obj* x_71; 
x_63 = lean::cnstr_get(x_36, 0);
lean::inc(x_63);
lean::dec(x_36);
x_66 = l_Lean_Parser_Term_from_HasView;
x_67 = lean::cnstr_get(x_66, 0);
lean::inc(x_67);
lean::dec(x_66);
x_70 = lean::apply_1(x_67, x_63);
x_71 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_71, 0, x_18);
lean::cnstr_set(x_71, 1, x_28);
lean::cnstr_set(x_71, 2, x_60);
lean::cnstr_set(x_71, 3, x_70);
return x_71;
}
}
default:
{
obj* x_73; 
lean::dec(x_37);
x_73 = lean::box(0);
if (lean::obj_tag(x_36) == 0)
{
obj* x_74; obj* x_75; 
x_74 = l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__1;
x_75 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_75, 0, x_18);
lean::cnstr_set(x_75, 1, x_28);
lean::cnstr_set(x_75, 2, x_73);
lean::cnstr_set(x_75, 3, x_74);
return x_75;
}
else
{
obj* x_76; obj* x_79; obj* x_80; obj* x_83; obj* x_84; 
x_76 = lean::cnstr_get(x_36, 0);
lean::inc(x_76);
lean::dec(x_36);
x_79 = l_Lean_Parser_Term_from_HasView;
x_80 = lean::cnstr_get(x_79, 0);
lean::inc(x_80);
lean::dec(x_79);
x_83 = lean::apply_1(x_80, x_76);
x_84 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_84, 0, x_18);
lean::cnstr_set(x_84, 1, x_28);
lean::cnstr_set(x_84, 2, x_73);
lean::cnstr_set(x_84, 3, x_83);
return x_84;
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_show_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_show_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_show_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_show_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_show_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_show_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_14; obj* x_17; obj* x_20; 
x_0 = lean::mk_string("show ");
x_1 = lean::mk_nat_obj(0ul);
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_1);
x_5 = lean::mk_string(", ");
x_6 = l_Lean_Parser_symbol_tokens___rarg(x_5, x_1);
lean::dec(x_5);
x_8 = lean::box(0);
x_9 = l_Lean_Parser_Term_from_Parser_Lean_Parser_HasTokens;
x_10 = l_Lean_Parser_List_cons_tokens___rarg(x_9, x_8);
x_11 = l_Lean_Parser_List_cons_tokens___rarg(x_6, x_10);
lean::dec(x_10);
lean::dec(x_6);
x_14 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_11);
lean::dec(x_11);
lean::dec(x_4);
x_17 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_14);
lean::dec(x_14);
lean::dec(x_2);
x_20 = l_Lean_Parser_tokens___rarg(x_17);
lean::dec(x_17);
return x_20;
}
}
obj* _init_l_Lean_Parser_Term_show_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_0 = lean::mk_string("show ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::mk_string(", ");
x_9 = l_String_trim(x_8);
lean::dec(x_8);
lean::inc(x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_12, 0, x_9);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_13, 0, x_9);
lean::closure_set(x_13, 1, x_5);
lean::closure_set(x_13, 2, x_12);
x_14 = lean::box(0);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_from_Parser), 5, 0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_14);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_13);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_7);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_6);
lean::cnstr_set(x_19, 1, x_18);
x_20 = l_Lean_Parser_TermParserM_Monad;
x_21 = l_Lean_Parser_TermParserM_MonadExcept;
x_22 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_23 = l_Lean_Parser_TermParserM_Alternative;
x_24 = l_Lean_Parser_Term_show;
x_25 = l_Lean_Parser_Term_show_HasView;
x_26 = l_Lean_Parser_Combinators_node_view___rarg(x_20, x_21, x_22, x_23, x_24, x_19, x_25);
lean::dec(x_19);
return x_26;
}
}
obj* _init_l_Lean_Parser_Term_show_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_0 = lean::mk_string("show ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::mk_string(", ");
x_9 = l_String_trim(x_8);
lean::dec(x_8);
lean::inc(x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_12, 0, x_9);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_13, 0, x_9);
lean::closure_set(x_13, 1, x_5);
lean::closure_set(x_13, 2, x_12);
x_14 = lean::box(0);
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_from_Parser), 5, 0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_14);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_13);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_7);
lean::cnstr_set(x_18, 1, x_17);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_6);
lean::cnstr_set(x_19, 1, x_18);
return x_19;
}
}
obj* l_Lean_Parser_Term_show_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_show;
x_6 = l_Lean_Parser_Term_show_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_matchEquation() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("matchEquation");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_matchEquation_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_List_map___main___at_Lean_Parser_Term_tuple_HasView_x_27___elambda__1___spec__1(x_1);
x_9 = l_List_join___main___rarg(x_8);
x_10 = l_Lean_Parser_noKind;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
x_12 = lean::box(0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_5);
lean::cnstr_set(x_13, 1, x_12);
if (lean::obj_tag(x_3) == 0)
{
obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_14 = lean::box(3);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_13);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_11);
lean::cnstr_set(x_16, 1, x_15);
x_17 = l_Lean_Parser_Term_matchEquation;
x_18 = l_Lean_Parser_Syntax_mkNode(x_17, x_16);
return x_18;
}
else
{
obj* x_19; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_19 = lean::cnstr_get(x_3, 0);
lean::inc(x_19);
lean::dec(x_3);
x_22 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_13);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_11);
lean::cnstr_set(x_24, 1, x_23);
x_25 = l_Lean_Parser_Term_matchEquation;
x_26 = l_Lean_Parser_Syntax_mkNode(x_25, x_24);
return x_26;
}
}
}
obj* _init_l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::box(0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_5, 0, x_4);
lean::cnstr_set(x_5, 1, x_0);
lean::cnstr_set(x_5, 2, x_1);
return x_5;
}
}
obj* _init_l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
x_9 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__2;
x_10 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__3;
x_11 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_tuple_HasView_x_27___spec__1(x_9, x_10, x_6);
x_12 = lean::box(0);
x_13 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_13, 0, x_11);
lean::cnstr_set(x_13, 1, x_12);
lean::cnstr_set(x_13, 2, x_0);
return x_13;
}
}
}
obj* l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
x_18 = l_Lean_Parser_Syntax_asNode___main(x_2);
if (lean::obj_tag(x_18) == 0)
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_19; 
x_19 = l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__1;
return x_19;
}
else
{
obj* x_20; obj* x_22; obj* x_25; 
x_20 = lean::cnstr_get(x_1, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_1, 1);
lean::inc(x_22);
lean::dec(x_1);
x_25 = lean::box(0);
switch (lean::obj_tag(x_20)) {
case 0:
{
obj* x_26; obj* x_29; 
x_26 = lean::cnstr_get(x_20, 0);
lean::inc(x_26);
lean::dec(x_20);
x_29 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_29, 0, x_26);
if (lean::obj_tag(x_22) == 0)
{
obj* x_30; obj* x_31; obj* x_32; 
x_30 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
x_31 = lean::box(3);
x_32 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_32, 0, x_30);
lean::cnstr_set(x_32, 1, x_29);
lean::cnstr_set(x_32, 2, x_31);
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_37; 
x_33 = lean::cnstr_get(x_22, 0);
lean::inc(x_33);
lean::dec(x_22);
x_36 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
x_37 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_29);
lean::cnstr_set(x_37, 2, x_33);
return x_37;
}
}
case 3:
{
if (lean::obj_tag(x_22) == 0)
{
obj* x_38; 
x_38 = l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__1;
return x_38;
}
else
{
obj* x_39; obj* x_42; obj* x_43; 
x_39 = lean::cnstr_get(x_22, 0);
lean::inc(x_39);
lean::dec(x_22);
x_42 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
x_43 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_43, 0, x_42);
lean::cnstr_set(x_43, 1, x_25);
lean::cnstr_set(x_43, 2, x_39);
return x_43;
}
}
default:
{
lean::dec(x_20);
if (lean::obj_tag(x_22) == 0)
{
obj* x_45; 
x_45 = l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__1;
return x_45;
}
else
{
obj* x_46; obj* x_49; obj* x_50; 
x_46 = lean::cnstr_get(x_22, 0);
lean::inc(x_46);
lean::dec(x_22);
x_49 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
x_50 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_25);
lean::cnstr_set(x_50, 2, x_46);
return x_50;
}
}
}
}
}
else
{
obj* x_51; obj* x_53; obj* x_54; obj* x_57; obj* x_58; obj* x_59; 
x_51 = lean::cnstr_get(x_18, 0);
if (lean::is_exclusive(x_18)) {
 lean::cnstr_set(x_18, 0, lean::box(0));
 x_53 = x_18;
} else {
 lean::inc(x_51);
 lean::dec(x_18);
 x_53 = lean::box(0);
}
x_54 = lean::cnstr_get(x_51, 1);
lean::inc(x_54);
lean::dec(x_51);
x_57 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__2;
x_58 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__3;
x_59 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_tuple_HasView_x_27___spec__1(x_57, x_58, x_54);
if (lean::obj_tag(x_1) == 0)
{
obj* x_61; obj* x_62; obj* x_63; 
lean::dec(x_53);
x_61 = lean::box(0);
x_62 = lean::box(3);
x_63 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_63, 0, x_59);
lean::cnstr_set(x_63, 1, x_61);
lean::cnstr_set(x_63, 2, x_62);
return x_63;
}
else
{
obj* x_64; 
x_64 = lean::cnstr_get(x_1, 0);
lean::inc(x_64);
switch (lean::obj_tag(x_64)) {
case 0:
{
obj* x_66; obj* x_69; obj* x_72; 
x_66 = lean::cnstr_get(x_1, 1);
lean::inc(x_66);
lean::dec(x_1);
x_69 = lean::cnstr_get(x_64, 0);
lean::inc(x_69);
lean::dec(x_64);
if (lean::is_scalar(x_53)) {
 x_72 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_72 = x_53;
}
lean::cnstr_set(x_72, 0, x_69);
if (lean::obj_tag(x_66) == 0)
{
obj* x_73; obj* x_74; 
x_73 = lean::box(3);
x_74 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_74, 0, x_59);
lean::cnstr_set(x_74, 1, x_72);
lean::cnstr_set(x_74, 2, x_73);
return x_74;
}
else
{
obj* x_75; obj* x_78; 
x_75 = lean::cnstr_get(x_66, 0);
lean::inc(x_75);
lean::dec(x_66);
x_78 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_78, 0, x_59);
lean::cnstr_set(x_78, 1, x_72);
lean::cnstr_set(x_78, 2, x_75);
return x_78;
}
}
case 3:
{
obj* x_80; obj* x_83; 
lean::dec(x_53);
x_80 = lean::cnstr_get(x_1, 1);
lean::inc(x_80);
lean::dec(x_1);
x_83 = lean::box(0);
if (lean::obj_tag(x_80) == 0)
{
obj* x_84; obj* x_85; 
x_84 = lean::box(3);
x_85 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_85, 0, x_59);
lean::cnstr_set(x_85, 1, x_83);
lean::cnstr_set(x_85, 2, x_84);
return x_85;
}
else
{
obj* x_86; obj* x_89; 
x_86 = lean::cnstr_get(x_80, 0);
lean::inc(x_86);
lean::dec(x_80);
x_89 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_89, 0, x_59);
lean::cnstr_set(x_89, 1, x_83);
lean::cnstr_set(x_89, 2, x_86);
return x_89;
}
}
default:
{
obj* x_92; obj* x_95; 
lean::dec(x_53);
lean::dec(x_64);
x_92 = lean::cnstr_get(x_1, 1);
lean::inc(x_92);
lean::dec(x_1);
x_95 = lean::box(0);
if (lean::obj_tag(x_92) == 0)
{
obj* x_96; obj* x_97; 
x_96 = lean::box(3);
x_97 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_97, 0, x_59);
lean::cnstr_set(x_97, 1, x_95);
lean::cnstr_set(x_97, 2, x_96);
return x_97;
}
else
{
obj* x_98; obj* x_101; 
x_98 = lean::cnstr_get(x_92, 0);
lean::inc(x_98);
lean::dec(x_92);
x_101 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_101, 0, x_59);
lean::cnstr_set(x_101, 1, x_95);
lean::cnstr_set(x_101, 2, x_98);
return x_101;
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_matchEquation_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_matchEquation_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_matchEquation_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_matchEquation_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_match() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("match");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_List_map___main___at_Lean_Parser_Term_match_HasView_x_27___elambda__1___spec__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_8; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
x_7 = l_List_map___main___at_Lean_Parser_Term_match_HasView_x_27___elambda__1___spec__1(x_4);
x_8 = lean::cnstr_get(x_2, 1);
lean::inc(x_8);
if (lean::obj_tag(x_8) == 0)
{
obj* x_10; obj* x_13; obj* x_14; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
x_10 = lean::cnstr_get(x_2, 0);
lean::inc(x_10);
lean::dec(x_2);
x_13 = l_Lean_Parser_Term_matchEquation_HasView;
x_14 = lean::cnstr_get(x_13, 1);
lean::inc(x_14);
lean::dec(x_13);
x_17 = lean::apply_1(x_14, x_10);
x_18 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_19 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_19 = x_6;
}
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_7);
return x_20;
}
else
{
obj* x_21; obj* x_24; obj* x_27; obj* x_28; obj* x_31; 
x_21 = lean::cnstr_get(x_2, 0);
lean::inc(x_21);
lean::dec(x_2);
x_24 = lean::cnstr_get(x_8, 0);
lean::inc(x_24);
lean::dec(x_8);
x_27 = l_Lean_Parser_Term_matchEquation_HasView;
x_28 = lean::cnstr_get(x_27, 1);
lean::inc(x_28);
lean::dec(x_27);
x_31 = lean::apply_1(x_28, x_21);
if (lean::obj_tag(x_24) == 0)
{
obj* x_32; obj* x_33; obj* x_34; 
x_32 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
if (lean::is_scalar(x_6)) {
 x_33 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_33 = x_6;
}
lean::cnstr_set(x_33, 0, x_31);
lean::cnstr_set(x_33, 1, x_32);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_7);
return x_34;
}
else
{
obj* x_35; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
x_35 = lean::cnstr_get(x_24, 0);
lean::inc(x_35);
lean::dec(x_24);
x_38 = lean::box(0);
x_39 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_39, 0, x_35);
if (lean::is_scalar(x_6)) {
 x_40 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_40 = x_6;
}
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_38);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_31);
lean::cnstr_set(x_41, 1, x_40);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_7);
return x_42;
}
}
}
}
}
obj* l_Lean_Parser_Term_match_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
lean::dec(x_0);
x_14 = l_List_map___main___at_Lean_Parser_Term_tuple_HasView_x_27___elambda__1___spec__1(x_3);
x_15 = l_List_join___main___rarg(x_14);
x_16 = l_Lean_Parser_noKind;
x_17 = l_Lean_Parser_Syntax_mkNode(x_16, x_15);
x_18 = l_List_map___main___at_Lean_Parser_Term_match_HasView_x_27___elambda__1___spec__1(x_11);
x_19 = l_List_join___main___rarg(x_18);
x_20 = l_Lean_Parser_Syntax_mkNode(x_16, x_19);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
if (lean::obj_tag(x_1) == 0)
{
obj* x_25; 
x_25 = lean::box(3);
x_23 = x_25;
goto lbl_24;
}
else
{
obj* x_26; obj* x_29; 
x_26 = lean::cnstr_get(x_1, 0);
lean::inc(x_26);
lean::dec(x_1);
x_29 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_29, 0, x_26);
x_23 = x_29;
goto lbl_24;
}
lbl_24:
{
obj* x_30; obj* x_32; obj* x_33; 
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_7) == 0)
{
obj* x_35; 
x_35 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_30 = x_35;
goto lbl_31;
}
else
{
obj* x_36; obj* x_39; 
x_36 = lean::cnstr_get(x_7, 0);
lean::inc(x_36);
lean::dec(x_7);
x_39 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_32 = x_39;
x_33 = x_36;
goto lbl_34;
}
}
else
{
obj* x_40; obj* x_43; obj* x_44; obj* x_47; obj* x_48; obj* x_49; 
x_40 = lean::cnstr_get(x_5, 0);
lean::inc(x_40);
lean::dec(x_5);
x_43 = l_Lean_Parser_Term_typeSpec_HasView;
x_44 = lean::cnstr_get(x_43, 1);
lean::inc(x_44);
lean::dec(x_43);
x_47 = lean::apply_1(x_44, x_40);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_47);
lean::cnstr_set(x_48, 1, x_21);
x_49 = l_Lean_Parser_Syntax_mkNode(x_16, x_48);
if (lean::obj_tag(x_7) == 0)
{
x_30 = x_49;
goto lbl_31;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_7, 0);
lean::inc(x_50);
lean::dec(x_7);
x_32 = x_49;
x_33 = x_50;
goto lbl_34;
}
}
lbl_31:
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; 
x_53 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_22);
x_55 = lean::box(3);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_55);
lean::cnstr_set(x_56, 1, x_54);
x_57 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_57, 0, x_30);
lean::cnstr_set(x_57, 1, x_56);
x_58 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_58, 0, x_17);
lean::cnstr_set(x_58, 1, x_57);
x_59 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_59, 0, x_23);
lean::cnstr_set(x_59, 1, x_58);
x_60 = l_Lean_Parser_Term_match;
x_61 = l_Lean_Parser_Syntax_mkNode(x_60, x_59);
return x_61;
}
else
{
obj* x_62; 
x_62 = lean::cnstr_get(x_9, 0);
lean::inc(x_62);
lean::dec(x_9);
if (lean::obj_tag(x_62) == 0)
{
obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; 
x_65 = l_Lean_Parser_command_notation_HasView_x_27___elambda__1___closed__1;
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_65);
lean::cnstr_set(x_66, 1, x_22);
x_67 = lean::box(3);
x_68 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_68, 0, x_67);
lean::cnstr_set(x_68, 1, x_66);
x_69 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_69, 0, x_30);
lean::cnstr_set(x_69, 1, x_68);
x_70 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_70, 0, x_17);
lean::cnstr_set(x_70, 1, x_69);
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_23);
lean::cnstr_set(x_71, 1, x_70);
x_72 = l_Lean_Parser_Term_match;
x_73 = l_Lean_Parser_Syntax_mkNode(x_72, x_71);
return x_73;
}
else
{
obj* x_74; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; 
x_74 = lean::cnstr_get(x_62, 0);
lean::inc(x_74);
lean::dec(x_62);
x_77 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_77, 0, x_74);
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_77);
lean::cnstr_set(x_78, 1, x_21);
x_79 = l_Lean_Parser_Syntax_mkNode(x_16, x_78);
x_80 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_80, 0, x_79);
lean::cnstr_set(x_80, 1, x_22);
x_81 = lean::box(3);
x_82 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_82, 0, x_81);
lean::cnstr_set(x_82, 1, x_80);
x_83 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_83, 0, x_30);
lean::cnstr_set(x_83, 1, x_82);
x_84 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_84, 0, x_17);
lean::cnstr_set(x_84, 1, x_83);
x_85 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_85, 0, x_23);
lean::cnstr_set(x_85, 1, x_84);
x_86 = l_Lean_Parser_Term_match;
x_87 = l_Lean_Parser_Syntax_mkNode(x_86, x_85);
return x_87;
}
}
}
lbl_34:
{
obj* x_88; 
x_88 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_88, 0, x_33);
if (lean::obj_tag(x_9) == 0)
{
obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; 
x_89 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_90 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_90, 0, x_89);
lean::cnstr_set(x_90, 1, x_22);
x_91 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_91, 0, x_88);
lean::cnstr_set(x_91, 1, x_90);
x_92 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_92, 0, x_32);
lean::cnstr_set(x_92, 1, x_91);
x_93 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_93, 0, x_17);
lean::cnstr_set(x_93, 1, x_92);
x_94 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_94, 0, x_23);
lean::cnstr_set(x_94, 1, x_93);
x_95 = l_Lean_Parser_Term_match;
x_96 = l_Lean_Parser_Syntax_mkNode(x_95, x_94);
return x_96;
}
else
{
obj* x_97; 
x_97 = lean::cnstr_get(x_9, 0);
lean::inc(x_97);
lean::dec(x_9);
if (lean::obj_tag(x_97) == 0)
{
obj* x_100; obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; 
x_100 = l_Lean_Parser_command_notation_HasView_x_27___elambda__1___closed__1;
x_101 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_101, 0, x_100);
lean::cnstr_set(x_101, 1, x_22);
x_102 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_102, 0, x_88);
lean::cnstr_set(x_102, 1, x_101);
x_103 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_103, 0, x_32);
lean::cnstr_set(x_103, 1, x_102);
x_104 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_104, 0, x_17);
lean::cnstr_set(x_104, 1, x_103);
x_105 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_105, 0, x_23);
lean::cnstr_set(x_105, 1, x_104);
x_106 = l_Lean_Parser_Term_match;
x_107 = l_Lean_Parser_Syntax_mkNode(x_106, x_105);
return x_107;
}
else
{
obj* x_108; obj* x_111; obj* x_112; obj* x_113; obj* x_114; obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; obj* x_120; 
x_108 = lean::cnstr_get(x_97, 0);
lean::inc(x_108);
lean::dec(x_97);
x_111 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_111, 0, x_108);
x_112 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_112, 0, x_111);
lean::cnstr_set(x_112, 1, x_21);
x_113 = l_Lean_Parser_Syntax_mkNode(x_16, x_112);
x_114 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_114, 0, x_113);
lean::cnstr_set(x_114, 1, x_22);
x_115 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_115, 0, x_88);
lean::cnstr_set(x_115, 1, x_114);
x_116 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_116, 0, x_32);
lean::cnstr_set(x_116, 1, x_115);
x_117 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_117, 0, x_17);
lean::cnstr_set(x_117, 1, x_116);
x_118 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_118, 0, x_23);
lean::cnstr_set(x_118, 1, x_117);
x_119 = l_Lean_Parser_Term_match;
x_120 = l_Lean_Parser_Syntax_mkNode(x_119, x_118);
return x_120;
}
}
}
}
}
}
obj* l_Lean_Parser_Combinators_sepBy1___at_Lean_Parser_Term_match_HasView_x_27___spec__1(obj* x_0, obj* x_1, uint8 x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; uint8 x_13; obj* x_14; obj* x_16; obj* x_18; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_8 = l_String_OldIterator_remaining___main(x_6);
x_9 = lean::box(0);
x_10 = lean::mk_nat_obj(1ul);
x_11 = lean::nat_add(x_8, x_10);
lean::dec(x_8);
x_13 = 0;
x_14 = l___private_init_lean_parser_combinators_2__sepByAux___main___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__2(x_0, x_1, x_2, x_13, x_9, x_11, x_3, x_4, x_5, x_6, x_7);
lean::dec(x_11);
x_16 = lean::cnstr_get(x_14, 0);
x_18 = lean::cnstr_get(x_14, 1);
if (lean::is_exclusive(x_14)) {
 x_20 = x_14;
} else {
 lean::inc(x_16);
 lean::inc(x_18);
 lean::dec(x_14);
 x_20 = lean::box(0);
}
x_21 = l_Lean_Parser_finishCommentBlock___closed__2;
x_22 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_21, x_16);
if (lean::is_scalar(x_20)) {
 x_23 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_23 = x_20;
}
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_18);
return x_23;
}
}
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_match_HasView_x_27___spec__2(obj* x_0, obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; 
x_3 = lean::box(0);
return x_3;
}
else
{
obj* x_4; 
x_4 = lean::cnstr_get(x_2, 1);
lean::inc(x_4);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_6 = lean::cnstr_get(x_2, 0);
if (lean::is_exclusive(x_2)) {
 lean::cnstr_release(x_2, 1);
 x_8 = x_2;
} else {
 lean::inc(x_6);
 lean::dec(x_2);
 x_8 = lean::box(0);
}
x_9 = l_Lean_Parser_Term_matchEquation_HasView;
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
x_13 = lean::apply_1(x_10, x_6);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::box(0);
if (lean::is_scalar(x_8)) {
 x_17 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_17 = x_8;
}
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set(x_17, 1, x_16);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_30; obj* x_31; 
x_18 = lean::cnstr_get(x_2, 0);
lean::inc(x_18);
lean::dec(x_2);
x_21 = lean::cnstr_get(x_4, 0);
x_23 = lean::cnstr_get(x_4, 1);
if (lean::is_exclusive(x_4)) {
 lean::cnstr_set(x_4, 0, lean::box(0));
 lean::cnstr_set(x_4, 1, lean::box(0));
 x_25 = x_4;
} else {
 lean::inc(x_21);
 lean::inc(x_23);
 lean::dec(x_4);
 x_25 = lean::box(0);
}
x_26 = l_Lean_Parser_Term_matchEquation_HasView;
x_27 = lean::cnstr_get(x_26, 0);
lean::inc(x_27);
lean::dec(x_26);
x_30 = lean::apply_1(x_27, x_18);
x_31 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_match_HasView_x_27___spec__2(x_0, x_1, x_23);
switch (lean::obj_tag(x_21)) {
case 0:
{
obj* x_32; obj* x_35; obj* x_36; obj* x_37; obj* x_38; 
x_32 = lean::cnstr_get(x_21, 0);
lean::inc(x_32);
lean::dec(x_21);
x_35 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_35, 0, x_32);
x_36 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_36, 0, x_35);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_30);
lean::cnstr_set(x_37, 1, x_36);
if (lean::is_scalar(x_25)) {
 x_38 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_38 = x_25;
}
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_31);
return x_38;
}
case 3:
{
obj* x_39; obj* x_40; obj* x_41; 
x_39 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_40 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_40, 0, x_30);
lean::cnstr_set(x_40, 1, x_39);
if (lean::is_scalar(x_25)) {
 x_41 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_41 = x_25;
}
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_31);
return x_41;
}
default:
{
obj* x_43; obj* x_44; obj* x_45; 
lean::dec(x_21);
x_43 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_44 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_44, 0, x_30);
lean::cnstr_set(x_44, 1, x_43);
if (lean::is_scalar(x_25)) {
 x_45 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_45 = x_25;
}
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_31);
return x_45;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_Term_matchEquation_HasView;
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_0);
return x_9;
}
}
obj* _init_l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_6; obj* x_7; uint8 x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_0 = lean::mk_nat_obj(0ul);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::mk_string(", ");
x_3 = l_String_trim(x_2);
lean::dec(x_2);
lean::inc(x_3);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_6, 0, x_3);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_7, 0, x_3);
lean::closure_set(x_7, 1, x_0);
lean::closure_set(x_7, 2, x_6);
x_8 = 0;
x_9 = lean::box(x_8);
lean::inc(x_1);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_sepBy1___at_Lean_Parser_Term_match_HasView_x_27___spec__1___boxed), 8, 3);
lean::closure_set(x_11, 0, x_1);
lean::closure_set(x_11, 1, x_7);
lean::closure_set(x_11, 2, x_9);
x_12 = lean::mk_string(":=");
x_13 = l_String_trim(x_12);
lean::dec(x_12);
lean::inc(x_13);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_16, 0, x_13);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_17, 0, x_13);
lean::closure_set(x_17, 1, x_0);
lean::closure_set(x_17, 2, x_16);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_1);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_17);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_11);
lean::cnstr_set(x_21, 1, x_20);
x_22 = l_Lean_Parser_Term_matchEquation;
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_23, 0, x_22);
lean::closure_set(x_23, 1, x_21);
return x_23;
}
}
obj* _init_l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = lean::mk_string(" | ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_3 = lean::box(3);
x_4 = l_Lean_Parser_Syntax_asNode___main(x_3);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
x_1 = x_5;
goto lbl_2;
}
else
{
obj* x_6; obj* x_9; obj* x_12; obj* x_13; obj* x_14; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
x_12 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__2;
x_13 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__3;
x_14 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_tuple_HasView_x_27___spec__1(x_12, x_13, x_9);
x_1 = x_14;
goto lbl_2;
}
lbl_2:
{
obj* x_15; obj* x_17; obj* x_18; 
x_17 = lean::box(3);
x_18 = l_Lean_Parser_Syntax_asNode___main(x_17);
if (lean::obj_tag(x_18) == 0)
{
obj* x_19; 
x_19 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_15 = x_19;
goto lbl_16;
}
else
{
obj* x_20; obj* x_22; obj* x_23; 
x_20 = lean::cnstr_get(x_18, 0);
if (lean::is_exclusive(x_18)) {
 lean::cnstr_set(x_18, 0, lean::box(0));
 x_22 = x_18;
} else {
 lean::inc(x_20);
 lean::dec(x_18);
 x_22 = lean::box(0);
}
x_23 = lean::cnstr_get(x_20, 1);
lean::inc(x_23);
lean::dec(x_20);
if (lean::obj_tag(x_23) == 0)
{
lean::dec(x_22);
x_15 = x_0;
goto lbl_16;
}
else
{
obj* x_27; 
x_27 = lean::cnstr_get(x_23, 1);
lean::inc(x_27);
if (lean::obj_tag(x_27) == 0)
{
obj* x_29; obj* x_32; obj* x_33; obj* x_36; obj* x_37; 
x_29 = lean::cnstr_get(x_23, 0);
lean::inc(x_29);
lean::dec(x_23);
x_32 = l_Lean_Parser_Term_typeSpec_HasView;
x_33 = lean::cnstr_get(x_32, 0);
lean::inc(x_33);
lean::dec(x_32);
x_36 = lean::apply_1(x_33, x_29);
if (lean::is_scalar(x_22)) {
 x_37 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_37 = x_22;
}
lean::cnstr_set(x_37, 0, x_36);
x_15 = x_37;
goto lbl_16;
}
else
{
obj* x_41; 
lean::dec(x_22);
lean::dec(x_23);
lean::dec(x_27);
x_41 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_15 = x_41;
goto lbl_16;
}
}
}
lbl_16:
{
obj* x_42; obj* x_44; obj* x_45; 
x_44 = lean::box(3);
x_45 = l_Lean_Parser_Syntax_asNode___main(x_44);
if (lean::obj_tag(x_45) == 0)
{
obj* x_46; 
x_46 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_42 = x_46;
goto lbl_43;
}
else
{
obj* x_47; obj* x_49; obj* x_50; 
x_47 = lean::cnstr_get(x_45, 0);
if (lean::is_exclusive(x_45)) {
 lean::cnstr_set(x_45, 0, lean::box(0));
 x_49 = x_45;
} else {
 lean::inc(x_47);
 lean::dec(x_45);
 x_49 = lean::box(0);
}
x_50 = lean::cnstr_get(x_47, 1);
lean::inc(x_50);
lean::dec(x_47);
if (lean::obj_tag(x_50) == 0)
{
lean::dec(x_49);
x_42 = x_0;
goto lbl_43;
}
else
{
obj* x_54; 
x_54 = lean::cnstr_get(x_50, 1);
lean::inc(x_54);
if (lean::obj_tag(x_54) == 0)
{
obj* x_56; 
x_56 = lean::cnstr_get(x_50, 0);
lean::inc(x_56);
lean::dec(x_50);
switch (lean::obj_tag(x_56)) {
case 0:
{
obj* x_59; obj* x_62; obj* x_63; 
x_59 = lean::cnstr_get(x_56, 0);
lean::inc(x_59);
lean::dec(x_56);
if (lean::is_scalar(x_49)) {
 x_62 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_62 = x_49;
}
lean::cnstr_set(x_62, 0, x_59);
x_63 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_63, 0, x_62);
x_42 = x_63;
goto lbl_43;
}
case 3:
{
obj* x_65; 
lean::dec(x_49);
x_65 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_42 = x_65;
goto lbl_43;
}
default:
{
obj* x_68; 
lean::dec(x_49);
lean::dec(x_56);
x_68 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_42 = x_68;
goto lbl_43;
}
}
}
else
{
obj* x_72; 
lean::dec(x_49);
lean::dec(x_50);
lean::dec(x_54);
x_72 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_42 = x_72;
goto lbl_43;
}
}
}
lbl_43:
{
obj* x_73; obj* x_74; 
x_73 = lean::box(3);
x_74 = l_Lean_Parser_Syntax_asNode___main(x_73);
if (lean::obj_tag(x_74) == 0)
{
obj* x_75; obj* x_76; 
x_75 = l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__1;
x_76 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_76, 0, x_0);
lean::cnstr_set(x_76, 1, x_1);
lean::cnstr_set(x_76, 2, x_15);
lean::cnstr_set(x_76, 3, x_0);
lean::cnstr_set(x_76, 4, x_42);
lean::cnstr_set(x_76, 5, x_75);
return x_76;
}
else
{
obj* x_77; obj* x_80; obj* x_83; obj* x_84; obj* x_85; obj* x_86; 
x_77 = lean::cnstr_get(x_74, 0);
lean::inc(x_77);
lean::dec(x_74);
x_80 = lean::cnstr_get(x_77, 1);
lean::inc(x_80);
lean::dec(x_77);
x_83 = l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__2;
x_84 = l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__3;
x_85 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_match_HasView_x_27___spec__2(x_83, x_84, x_80);
x_86 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_86, 0, x_0);
lean::cnstr_set(x_86, 1, x_1);
lean::cnstr_set(x_86, 2, x_15);
lean::cnstr_set(x_86, 3, x_0);
lean::cnstr_set(x_86, 4, x_42);
lean::cnstr_set(x_86, 5, x_85);
return x_86;
}
}
}
}
}
}
obj* l_Lean_Parser_Term_match_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__4;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; obj* x_38; 
x_38 = l_Lean_Parser_Syntax_asNode___main(x_28);
if (lean::obj_tag(x_38) == 0)
{
obj* x_39; 
x_39 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1;
x_36 = x_39;
goto lbl_37;
}
else
{
obj* x_40; obj* x_43; obj* x_46; obj* x_47; obj* x_48; 
x_40 = lean::cnstr_get(x_38, 0);
lean::inc(x_40);
lean::dec(x_38);
x_43 = lean::cnstr_get(x_40, 1);
lean::inc(x_43);
lean::dec(x_40);
x_46 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__2;
x_47 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__3;
x_48 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_tuple_HasView_x_27___spec__1(x_46, x_47, x_43);
x_36 = x_48;
goto lbl_37;
}
lbl_37:
{
obj* x_49; obj* x_50; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_52; 
x_52 = lean::box(3);
x_49 = x_27;
x_50 = x_52;
goto lbl_51;
}
else
{
obj* x_53; obj* x_55; 
x_53 = lean::cnstr_get(x_27, 0);
lean::inc(x_53);
x_55 = lean::cnstr_get(x_27, 1);
lean::inc(x_55);
lean::dec(x_27);
x_49 = x_55;
x_50 = x_53;
goto lbl_51;
}
lbl_51:
{
obj* x_58; obj* x_60; 
x_60 = l_Lean_Parser_Syntax_asNode___main(x_50);
if (lean::obj_tag(x_60) == 0)
{
obj* x_61; 
x_61 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_58 = x_61;
goto lbl_59;
}
else
{
obj* x_62; obj* x_64; obj* x_65; 
x_62 = lean::cnstr_get(x_60, 0);
if (lean::is_exclusive(x_60)) {
 lean::cnstr_set(x_60, 0, lean::box(0));
 x_64 = x_60;
} else {
 lean::inc(x_62);
 lean::dec(x_60);
 x_64 = lean::box(0);
}
x_65 = lean::cnstr_get(x_62, 1);
lean::inc(x_65);
lean::dec(x_62);
if (lean::obj_tag(x_65) == 0)
{
obj* x_69; 
lean::dec(x_64);
x_69 = lean::box(0);
x_58 = x_69;
goto lbl_59;
}
else
{
obj* x_70; 
x_70 = lean::cnstr_get(x_65, 1);
lean::inc(x_70);
if (lean::obj_tag(x_70) == 0)
{
obj* x_72; obj* x_75; obj* x_76; obj* x_79; obj* x_80; 
x_72 = lean::cnstr_get(x_65, 0);
lean::inc(x_72);
lean::dec(x_65);
x_75 = l_Lean_Parser_Term_typeSpec_HasView;
x_76 = lean::cnstr_get(x_75, 0);
lean::inc(x_76);
lean::dec(x_75);
x_79 = lean::apply_1(x_76, x_72);
if (lean::is_scalar(x_64)) {
 x_80 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_80 = x_64;
}
lean::cnstr_set(x_80, 0, x_79);
x_58 = x_80;
goto lbl_59;
}
else
{
obj* x_84; 
lean::dec(x_64);
lean::dec(x_70);
lean::dec(x_65);
x_84 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_58 = x_84;
goto lbl_59;
}
}
}
lbl_59:
{
obj* x_85; obj* x_86; 
if (lean::obj_tag(x_49) == 0)
{
obj* x_88; 
x_88 = lean::box(3);
x_85 = x_49;
x_86 = x_88;
goto lbl_87;
}
else
{
obj* x_89; obj* x_91; 
x_89 = lean::cnstr_get(x_49, 0);
lean::inc(x_89);
x_91 = lean::cnstr_get(x_49, 1);
lean::inc(x_91);
lean::dec(x_49);
x_85 = x_91;
x_86 = x_89;
goto lbl_87;
}
lbl_87:
{
obj* x_94; 
switch (lean::obj_tag(x_86)) {
case 0:
{
obj* x_96; obj* x_99; 
x_96 = lean::cnstr_get(x_86, 0);
lean::inc(x_96);
lean::dec(x_86);
x_99 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_99, 0, x_96);
x_94 = x_99;
goto lbl_95;
}
case 3:
{
obj* x_100; 
x_100 = lean::box(0);
x_94 = x_100;
goto lbl_95;
}
default:
{
obj* x_102; 
lean::dec(x_86);
x_102 = lean::box(0);
x_94 = x_102;
goto lbl_95;
}
}
lbl_95:
{
obj* x_103; obj* x_104; 
if (lean::obj_tag(x_85) == 0)
{
obj* x_106; 
x_106 = lean::box(3);
x_103 = x_85;
x_104 = x_106;
goto lbl_105;
}
else
{
obj* x_107; obj* x_109; 
x_107 = lean::cnstr_get(x_85, 0);
lean::inc(x_107);
x_109 = lean::cnstr_get(x_85, 1);
lean::inc(x_109);
lean::dec(x_85);
x_103 = x_109;
x_104 = x_107;
goto lbl_105;
}
lbl_105:
{
obj* x_112; obj* x_114; 
x_114 = l_Lean_Parser_Syntax_asNode___main(x_104);
if (lean::obj_tag(x_114) == 0)
{
obj* x_115; 
x_115 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_112 = x_115;
goto lbl_113;
}
else
{
obj* x_116; obj* x_118; obj* x_119; 
x_116 = lean::cnstr_get(x_114, 0);
if (lean::is_exclusive(x_114)) {
 lean::cnstr_set(x_114, 0, lean::box(0));
 x_118 = x_114;
} else {
 lean::inc(x_116);
 lean::dec(x_114);
 x_118 = lean::box(0);
}
x_119 = lean::cnstr_get(x_116, 1);
lean::inc(x_119);
lean::dec(x_116);
if (lean::obj_tag(x_119) == 0)
{
obj* x_123; 
lean::dec(x_118);
x_123 = lean::box(0);
x_112 = x_123;
goto lbl_113;
}
else
{
obj* x_124; 
x_124 = lean::cnstr_get(x_119, 1);
lean::inc(x_124);
if (lean::obj_tag(x_124) == 0)
{
obj* x_126; 
x_126 = lean::cnstr_get(x_119, 0);
lean::inc(x_126);
lean::dec(x_119);
switch (lean::obj_tag(x_126)) {
case 0:
{
obj* x_129; obj* x_132; obj* x_133; 
x_129 = lean::cnstr_get(x_126, 0);
lean::inc(x_129);
lean::dec(x_126);
if (lean::is_scalar(x_118)) {
 x_132 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_132 = x_118;
}
lean::cnstr_set(x_132, 0, x_129);
x_133 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_133, 0, x_132);
x_112 = x_133;
goto lbl_113;
}
case 3:
{
obj* x_135; 
lean::dec(x_118);
x_135 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_112 = x_135;
goto lbl_113;
}
default:
{
obj* x_138; 
lean::dec(x_118);
lean::dec(x_126);
x_138 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_112 = x_138;
goto lbl_113;
}
}
}
else
{
obj* x_142; 
lean::dec(x_119);
lean::dec(x_118);
lean::dec(x_124);
x_142 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_112 = x_142;
goto lbl_113;
}
}
}
lbl_113:
{
obj* x_143; 
if (lean::obj_tag(x_103) == 0)
{
obj* x_145; 
x_145 = lean::box(3);
x_143 = x_145;
goto lbl_144;
}
else
{
obj* x_146; 
x_146 = lean::cnstr_get(x_103, 0);
lean::inc(x_146);
lean::dec(x_103);
x_143 = x_146;
goto lbl_144;
}
lbl_144:
{
obj* x_149; 
x_149 = l_Lean_Parser_Syntax_asNode___main(x_143);
if (lean::obj_tag(x_149) == 0)
{
obj* x_150; obj* x_151; 
x_150 = l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__1;
x_151 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_151, 0, x_18);
lean::cnstr_set(x_151, 1, x_36);
lean::cnstr_set(x_151, 2, x_58);
lean::cnstr_set(x_151, 3, x_94);
lean::cnstr_set(x_151, 4, x_112);
lean::cnstr_set(x_151, 5, x_150);
return x_151;
}
else
{
obj* x_152; obj* x_155; obj* x_158; obj* x_159; obj* x_160; obj* x_161; 
x_152 = lean::cnstr_get(x_149, 0);
lean::inc(x_152);
lean::dec(x_149);
x_155 = lean::cnstr_get(x_152, 1);
lean::inc(x_155);
lean::dec(x_152);
x_158 = l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__2;
x_159 = l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__3;
x_160 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_match_HasView_x_27___spec__2(x_158, x_159, x_155);
x_161 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_161, 0, x_18);
lean::cnstr_set(x_161, 1, x_36);
lean::cnstr_set(x_161, 2, x_58);
lean::cnstr_set(x_161, 3, x_94);
lean::cnstr_set(x_161, 4, x_112);
lean::cnstr_set(x_161, 5, x_160);
return x_161;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_match_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_match_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_match_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_Lean_Parser_Combinators_sepBy1___at_Lean_Parser_Term_match_HasView_x_27___spec__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
uint8 x_8; obj* x_9; 
x_8 = lean::unbox(x_2);
x_9 = l_Lean_Parser_Combinators_sepBy1___at_Lean_Parser_Term_match_HasView_x_27___spec__1(x_0, x_1, x_8, x_3, x_4, x_5, x_6, x_7);
return x_9;
}
}
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_match_HasView_x_27___spec__2___boxed(obj* x_0, obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_match_HasView_x_27___spec__2(x_0, x_1, x_2);
lean::dec(x_0);
lean::dec(x_1);
return x_3;
}
}
obj* _init_l_Lean_Parser_Term_match_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_match_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_match_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_20; obj* x_21; obj* x_23; obj* x_26; obj* x_28; obj* x_30; obj* x_33; obj* x_35; obj* x_38; obj* x_41; obj* x_42; obj* x_44; obj* x_47; obj* x_50; 
x_0 = lean::mk_string("match ");
x_1 = lean::mk_nat_obj(0ul);
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_1);
x_5 = lean::mk_string(", ");
x_6 = l_Lean_Parser_symbol_tokens___rarg(x_5, x_1);
lean::dec(x_5);
x_8 = l_Lean_Parser_Combinators_sepBy1_tokens___rarg(x_4, x_6);
lean::dec(x_6);
x_10 = lean::mk_string(" with ");
x_11 = l_Lean_Parser_symbol_tokens___rarg(x_10, x_1);
lean::dec(x_10);
x_13 = lean::mk_string(" | ");
x_14 = l_Lean_Parser_symbol_tokens___rarg(x_13, x_1);
lean::dec(x_13);
x_16 = l_Lean_Parser_tokens___rarg(x_14);
x_17 = lean::mk_string(":=");
x_18 = l_Lean_Parser_symbol_tokens___rarg(x_17, x_1);
lean::dec(x_17);
x_20 = lean::box(0);
x_21 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_20);
lean::dec(x_4);
x_23 = l_Lean_Parser_List_cons_tokens___rarg(x_18, x_21);
lean::dec(x_21);
lean::dec(x_18);
x_26 = l_Lean_Parser_List_cons_tokens___rarg(x_8, x_23);
lean::dec(x_23);
x_28 = l_Lean_Parser_tokens___rarg(x_26);
lean::dec(x_26);
x_30 = l_Lean_Parser_Combinators_sepBy1_tokens___rarg(x_28, x_14);
lean::dec(x_14);
lean::dec(x_28);
x_33 = l_Lean_Parser_List_cons_tokens___rarg(x_30, x_20);
lean::dec(x_30);
x_35 = l_Lean_Parser_List_cons_tokens___rarg(x_16, x_33);
lean::dec(x_33);
lean::dec(x_16);
x_38 = l_Lean_Parser_List_cons_tokens___rarg(x_11, x_35);
lean::dec(x_35);
lean::dec(x_11);
x_41 = l_Lean_Parser_Term_optType_Parser_Lean_Parser_HasTokens;
x_42 = l_Lean_Parser_List_cons_tokens___rarg(x_41, x_38);
lean::dec(x_38);
x_44 = l_Lean_Parser_List_cons_tokens___rarg(x_8, x_42);
lean::dec(x_42);
lean::dec(x_8);
x_47 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_44);
lean::dec(x_44);
lean::dec(x_2);
x_50 = l_Lean_Parser_tokens___rarg(x_47);
lean::dec(x_47);
return x_50;
}
}
obj* _init_l_Lean_Parser_Term_match_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_12; obj* x_13; uint8 x_14; obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_29; obj* x_30; obj* x_33; obj* x_34; obj* x_35; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; 
x_0 = lean::mk_string("match ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::mk_string(", ");
x_9 = l_String_trim(x_8);
lean::dec(x_8);
lean::inc(x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_12, 0, x_9);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_13, 0, x_9);
lean::closure_set(x_13, 1, x_5);
lean::closure_set(x_13, 2, x_12);
x_14 = 0;
x_15 = lean::box(x_14);
lean::inc(x_15);
lean::inc(x_7);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_sepBy1___at_Lean_Parser_Term_match_HasView_x_27___spec__1___boxed), 8, 3);
lean::closure_set(x_18, 0, x_7);
lean::closure_set(x_18, 1, x_13);
lean::closure_set(x_18, 2, x_15);
x_19 = lean::mk_string(" with ");
x_20 = l_String_trim(x_19);
lean::dec(x_19);
lean::inc(x_20);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_23, 0, x_20);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_24, 0, x_20);
lean::closure_set(x_24, 1, x_5);
lean::closure_set(x_24, 2, x_23);
x_25 = lean::mk_string(" | ");
x_26 = l_String_trim(x_25);
lean::dec(x_25);
lean::inc(x_26);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_29, 0, x_26);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_30, 0, x_26);
lean::closure_set(x_30, 1, x_5);
lean::closure_set(x_30, 2, x_29);
lean::inc(x_15);
lean::inc(x_30);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_33, 0, x_30);
lean::closure_set(x_33, 1, x_15);
x_34 = lean::mk_string(":=");
x_35 = l_String_trim(x_34);
lean::dec(x_34);
lean::inc(x_35);
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_38, 0, x_35);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_39, 0, x_35);
lean::closure_set(x_39, 1, x_5);
lean::closure_set(x_39, 2, x_38);
x_40 = lean::box(0);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_7);
lean::cnstr_set(x_41, 1, x_40);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_39);
lean::cnstr_set(x_42, 1, x_41);
lean::inc(x_18);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_18);
lean::cnstr_set(x_44, 1, x_42);
x_45 = l_Lean_Parser_Term_matchEquation;
x_46 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_46, 0, x_45);
lean::closure_set(x_46, 1, x_44);
x_47 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_sepBy1___at_Lean_Parser_Term_match_HasView_x_27___spec__1___boxed), 8, 3);
lean::closure_set(x_47, 0, x_46);
lean::closure_set(x_47, 1, x_30);
lean::closure_set(x_47, 2, x_15);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_47);
lean::cnstr_set(x_48, 1, x_40);
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_33);
lean::cnstr_set(x_49, 1, x_48);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_24);
lean::cnstr_set(x_50, 1, x_49);
x_51 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_optType_Parser), 5, 0);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_50);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_18);
lean::cnstr_set(x_53, 1, x_52);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_6);
lean::cnstr_set(x_54, 1, x_53);
x_55 = l_Lean_Parser_TermParserM_Monad;
x_56 = l_Lean_Parser_TermParserM_MonadExcept;
x_57 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_58 = l_Lean_Parser_TermParserM_Alternative;
x_59 = l_Lean_Parser_Term_match;
x_60 = l_Lean_Parser_Term_match_HasView;
x_61 = l_Lean_Parser_Combinators_node_view___rarg(x_55, x_56, x_57, x_58, x_59, x_54, x_60);
lean::dec(x_54);
return x_61;
}
}
obj* _init_l_Lean_Parser_Term_match_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_12; obj* x_13; uint8 x_14; obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_29; obj* x_30; obj* x_33; obj* x_34; obj* x_35; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; 
x_0 = lean::mk_string("match ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::mk_string(", ");
x_9 = l_String_trim(x_8);
lean::dec(x_8);
lean::inc(x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_12, 0, x_9);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_13, 0, x_9);
lean::closure_set(x_13, 1, x_5);
lean::closure_set(x_13, 2, x_12);
x_14 = 0;
x_15 = lean::box(x_14);
lean::inc(x_15);
lean::inc(x_7);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_sepBy1___at_Lean_Parser_Term_match_HasView_x_27___spec__1___boxed), 8, 3);
lean::closure_set(x_18, 0, x_7);
lean::closure_set(x_18, 1, x_13);
lean::closure_set(x_18, 2, x_15);
x_19 = lean::mk_string(" with ");
x_20 = l_String_trim(x_19);
lean::dec(x_19);
lean::inc(x_20);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_23, 0, x_20);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_24, 0, x_20);
lean::closure_set(x_24, 1, x_5);
lean::closure_set(x_24, 2, x_23);
x_25 = lean::mk_string(" | ");
x_26 = l_String_trim(x_25);
lean::dec(x_25);
lean::inc(x_26);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_29, 0, x_26);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_30, 0, x_26);
lean::closure_set(x_30, 1, x_5);
lean::closure_set(x_30, 2, x_29);
lean::inc(x_15);
lean::inc(x_30);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_33, 0, x_30);
lean::closure_set(x_33, 1, x_15);
x_34 = lean::mk_string(":=");
x_35 = l_String_trim(x_34);
lean::dec(x_34);
lean::inc(x_35);
x_38 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_38, 0, x_35);
x_39 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_39, 0, x_35);
lean::closure_set(x_39, 1, x_5);
lean::closure_set(x_39, 2, x_38);
x_40 = lean::box(0);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_7);
lean::cnstr_set(x_41, 1, x_40);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_39);
lean::cnstr_set(x_42, 1, x_41);
lean::inc(x_18);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_18);
lean::cnstr_set(x_44, 1, x_42);
x_45 = l_Lean_Parser_Term_matchEquation;
x_46 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_46, 0, x_45);
lean::closure_set(x_46, 1, x_44);
x_47 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_sepBy1___at_Lean_Parser_Term_match_HasView_x_27___spec__1___boxed), 8, 3);
lean::closure_set(x_47, 0, x_46);
lean::closure_set(x_47, 1, x_30);
lean::closure_set(x_47, 2, x_15);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_47);
lean::cnstr_set(x_48, 1, x_40);
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_33);
lean::cnstr_set(x_49, 1, x_48);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_24);
lean::cnstr_set(x_50, 1, x_49);
x_51 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_optType_Parser), 5, 0);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_50);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_18);
lean::cnstr_set(x_53, 1, x_52);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_6);
lean::cnstr_set(x_54, 1, x_53);
return x_54;
}
}
obj* l_Lean_Parser_Term_match_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_match;
x_6 = l_Lean_Parser_Term_match_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_if() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("if");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_if_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_13; obj* x_16; obj* x_17; obj* x_18; obj* x_20; obj* x_21; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
x_13 = lean::cnstr_get(x_0, 6);
lean::inc(x_13);
lean::dec(x_0);
x_16 = lean::box(0);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_13);
lean::cnstr_set(x_17, 1, x_16);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_3) == 0)
{
obj* x_23; 
x_23 = lean::box(3);
x_18 = x_23;
goto lbl_19;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_3, 0);
lean::inc(x_24);
lean::dec(x_3);
x_27 = lean::box(3);
x_20 = x_27;
x_21 = x_24;
goto lbl_22;
}
}
else
{
obj* x_28; obj* x_31; 
x_28 = lean::cnstr_get(x_1, 0);
lean::inc(x_28);
lean::dec(x_1);
x_31 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_31, 0, x_28);
if (lean::obj_tag(x_3) == 0)
{
x_18 = x_31;
goto lbl_19;
}
else
{
obj* x_32; 
x_32 = lean::cnstr_get(x_3, 0);
lean::inc(x_32);
lean::dec(x_3);
x_20 = x_31;
x_21 = x_32;
goto lbl_22;
}
}
lbl_19:
{
if (lean::obj_tag(x_7) == 0)
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_44; 
x_35 = lean::box(3);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_17);
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_9);
lean::cnstr_set(x_37, 1, x_36);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_35);
lean::cnstr_set(x_38, 1, x_37);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_5);
lean::cnstr_set(x_39, 1, x_38);
x_40 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_39);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_18);
lean::cnstr_set(x_42, 1, x_41);
x_43 = l_Lean_Parser_Term_if;
x_44 = l_Lean_Parser_Syntax_mkNode(x_43, x_42);
return x_44;
}
else
{
obj* x_45; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; 
x_45 = lean::cnstr_get(x_11, 0);
lean::inc(x_45);
lean::dec(x_11);
x_48 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_48, 0, x_45);
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_48);
lean::cnstr_set(x_49, 1, x_17);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_9);
lean::cnstr_set(x_50, 1, x_49);
x_51 = lean::box(3);
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_50);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_5);
lean::cnstr_set(x_53, 1, x_52);
x_54 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_55 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_53);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_18);
lean::cnstr_set(x_56, 1, x_55);
x_57 = l_Lean_Parser_Term_if;
x_58 = l_Lean_Parser_Syntax_mkNode(x_57, x_56);
return x_58;
}
}
else
{
obj* x_59; obj* x_62; 
x_59 = lean::cnstr_get(x_7, 0);
lean::inc(x_59);
lean::dec(x_7);
x_62 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_62, 0, x_59);
if (lean::obj_tag(x_11) == 0)
{
obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; 
x_63 = lean::box(3);
x_64 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_64, 0, x_63);
lean::cnstr_set(x_64, 1, x_17);
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_9);
lean::cnstr_set(x_65, 1, x_64);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_62);
lean::cnstr_set(x_66, 1, x_65);
x_67 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_67, 0, x_5);
lean::cnstr_set(x_67, 1, x_66);
x_68 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_69 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_69, 0, x_68);
lean::cnstr_set(x_69, 1, x_67);
x_70 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_70, 0, x_18);
lean::cnstr_set(x_70, 1, x_69);
x_71 = l_Lean_Parser_Term_if;
x_72 = l_Lean_Parser_Syntax_mkNode(x_71, x_70);
return x_72;
}
else
{
obj* x_73; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; 
x_73 = lean::cnstr_get(x_11, 0);
lean::inc(x_73);
lean::dec(x_11);
x_76 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_76, 0, x_73);
x_77 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_77, 0, x_76);
lean::cnstr_set(x_77, 1, x_17);
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_9);
lean::cnstr_set(x_78, 1, x_77);
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_62);
lean::cnstr_set(x_79, 1, x_78);
x_80 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_80, 0, x_5);
lean::cnstr_set(x_80, 1, x_79);
x_81 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_82 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_82, 0, x_81);
lean::cnstr_set(x_82, 1, x_80);
x_83 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_83, 0, x_18);
lean::cnstr_set(x_83, 1, x_82);
x_84 = l_Lean_Parser_Term_if;
x_85 = l_Lean_Parser_Syntax_mkNode(x_84, x_83);
return x_85;
}
}
}
lbl_22:
{
obj* x_86; obj* x_87; obj* x_90; obj* x_91; obj* x_92; obj* x_93; 
x_86 = l_Lean_Parser_Term_optIdent_HasView;
x_87 = lean::cnstr_get(x_86, 1);
lean::inc(x_87);
lean::dec(x_86);
x_90 = lean::apply_1(x_87, x_21);
x_91 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_91, 0, x_90);
lean::cnstr_set(x_91, 1, x_16);
x_92 = l_Lean_Parser_noKind;
x_93 = l_Lean_Parser_Syntax_mkNode(x_92, x_91);
if (lean::obj_tag(x_7) == 0)
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; obj* x_100; obj* x_101; obj* x_102; 
x_94 = lean::box(3);
x_95 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_95, 0, x_94);
lean::cnstr_set(x_95, 1, x_17);
x_96 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_96, 0, x_9);
lean::cnstr_set(x_96, 1, x_95);
x_97 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_97, 0, x_94);
lean::cnstr_set(x_97, 1, x_96);
x_98 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_98, 0, x_5);
lean::cnstr_set(x_98, 1, x_97);
x_99 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_99, 0, x_93);
lean::cnstr_set(x_99, 1, x_98);
x_100 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_100, 0, x_20);
lean::cnstr_set(x_100, 1, x_99);
x_101 = l_Lean_Parser_Term_if;
x_102 = l_Lean_Parser_Syntax_mkNode(x_101, x_100);
return x_102;
}
else
{
obj* x_103; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; obj* x_115; 
x_103 = lean::cnstr_get(x_11, 0);
lean::inc(x_103);
lean::dec(x_11);
x_106 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_106, 0, x_103);
x_107 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_107, 0, x_106);
lean::cnstr_set(x_107, 1, x_17);
x_108 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_108, 0, x_9);
lean::cnstr_set(x_108, 1, x_107);
x_109 = lean::box(3);
x_110 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_110, 0, x_109);
lean::cnstr_set(x_110, 1, x_108);
x_111 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_111, 0, x_5);
lean::cnstr_set(x_111, 1, x_110);
x_112 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_112, 0, x_93);
lean::cnstr_set(x_112, 1, x_111);
x_113 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_113, 0, x_20);
lean::cnstr_set(x_113, 1, x_112);
x_114 = l_Lean_Parser_Term_if;
x_115 = l_Lean_Parser_Syntax_mkNode(x_114, x_113);
return x_115;
}
}
else
{
obj* x_116; obj* x_119; 
x_116 = lean::cnstr_get(x_7, 0);
lean::inc(x_116);
lean::dec(x_7);
x_119 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_119, 0, x_116);
if (lean::obj_tag(x_11) == 0)
{
obj* x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; 
x_120 = lean::box(3);
x_121 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_121, 0, x_120);
lean::cnstr_set(x_121, 1, x_17);
x_122 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_122, 0, x_9);
lean::cnstr_set(x_122, 1, x_121);
x_123 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_123, 0, x_119);
lean::cnstr_set(x_123, 1, x_122);
x_124 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_124, 0, x_5);
lean::cnstr_set(x_124, 1, x_123);
x_125 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_125, 0, x_93);
lean::cnstr_set(x_125, 1, x_124);
x_126 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_126, 0, x_20);
lean::cnstr_set(x_126, 1, x_125);
x_127 = l_Lean_Parser_Term_if;
x_128 = l_Lean_Parser_Syntax_mkNode(x_127, x_126);
return x_128;
}
else
{
obj* x_129; obj* x_132; obj* x_133; obj* x_134; obj* x_135; obj* x_136; obj* x_137; obj* x_138; obj* x_139; obj* x_140; 
x_129 = lean::cnstr_get(x_11, 0);
lean::inc(x_129);
lean::dec(x_11);
x_132 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_132, 0, x_129);
x_133 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_133, 0, x_132);
lean::cnstr_set(x_133, 1, x_17);
x_134 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_134, 0, x_9);
lean::cnstr_set(x_134, 1, x_133);
x_135 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_135, 0, x_119);
lean::cnstr_set(x_135, 1, x_134);
x_136 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_136, 0, x_5);
lean::cnstr_set(x_136, 1, x_135);
x_137 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_137, 0, x_93);
lean::cnstr_set(x_137, 1, x_136);
x_138 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_138, 0, x_20);
lean::cnstr_set(x_138, 1, x_137);
x_139 = l_Lean_Parser_Term_if;
x_140 = l_Lean_Parser_Syntax_mkNode(x_139, x_138);
return x_140;
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_if_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = l_Lean_Parser_Syntax_asNode___main(x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; obj* x_4; 
x_3 = l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__1;
x_4 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_4, 0, x_0);
lean::cnstr_set(x_4, 1, x_3);
lean::cnstr_set(x_4, 2, x_1);
lean::cnstr_set(x_4, 3, x_0);
lean::cnstr_set(x_4, 4, x_1);
lean::cnstr_set(x_4, 5, x_0);
lean::cnstr_set(x_4, 6, x_1);
return x_4;
}
else
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_2, 0);
if (lean::is_exclusive(x_2)) {
 lean::cnstr_set(x_2, 0, lean::box(0));
 x_7 = x_2;
} else {
 lean::inc(x_5);
 lean::dec(x_2);
 x_7 = lean::box(0);
}
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
obj* x_12; 
lean::dec(x_7);
x_12 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_12, 0, x_0);
lean::cnstr_set(x_12, 1, x_0);
lean::cnstr_set(x_12, 2, x_1);
lean::cnstr_set(x_12, 3, x_0);
lean::cnstr_set(x_12, 4, x_1);
lean::cnstr_set(x_12, 5, x_0);
lean::cnstr_set(x_12, 6, x_1);
return x_12;
}
else
{
obj* x_13; 
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
if (lean::obj_tag(x_13) == 0)
{
obj* x_15; obj* x_18; obj* x_19; obj* x_22; obj* x_23; obj* x_24; 
x_15 = lean::cnstr_get(x_8, 0);
lean::inc(x_15);
lean::dec(x_8);
x_18 = l_Lean_Parser_Term_optIdent_HasView;
x_19 = lean::cnstr_get(x_18, 0);
lean::inc(x_19);
lean::dec(x_18);
x_22 = lean::apply_1(x_19, x_15);
if (lean::is_scalar(x_7)) {
 x_23 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_23 = x_7;
}
lean::cnstr_set(x_23, 0, x_22);
x_24 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_24, 0, x_0);
lean::cnstr_set(x_24, 1, x_23);
lean::cnstr_set(x_24, 2, x_1);
lean::cnstr_set(x_24, 3, x_0);
lean::cnstr_set(x_24, 4, x_1);
lean::cnstr_set(x_24, 5, x_0);
lean::cnstr_set(x_24, 6, x_1);
return x_24;
}
else
{
obj* x_28; obj* x_29; 
lean::dec(x_7);
lean::dec(x_8);
lean::dec(x_13);
x_28 = l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__1;
x_29 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_29, 0, x_0);
lean::cnstr_set(x_29, 1, x_28);
lean::cnstr_set(x_29, 2, x_1);
lean::cnstr_set(x_29, 3, x_0);
lean::cnstr_set(x_29, 4, x_1);
lean::cnstr_set(x_29, 5, x_0);
lean::cnstr_set(x_29, 6, x_1);
return x_29;
}
}
}
}
}
obj* l_Lean_Parser_Term_if_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_if_HasView_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; obj* x_38; 
x_38 = l_Lean_Parser_Syntax_asNode___main(x_28);
if (lean::obj_tag(x_38) == 0)
{
obj* x_39; 
x_39 = l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__1;
x_36 = x_39;
goto lbl_37;
}
else
{
obj* x_40; obj* x_42; obj* x_43; 
x_40 = lean::cnstr_get(x_38, 0);
if (lean::is_exclusive(x_38)) {
 lean::cnstr_set(x_38, 0, lean::box(0));
 x_42 = x_38;
} else {
 lean::inc(x_40);
 lean::dec(x_38);
 x_42 = lean::box(0);
}
x_43 = lean::cnstr_get(x_40, 1);
lean::inc(x_43);
lean::dec(x_40);
if (lean::obj_tag(x_43) == 0)
{
obj* x_47; 
lean::dec(x_42);
x_47 = lean::box(0);
x_36 = x_47;
goto lbl_37;
}
else
{
obj* x_48; 
x_48 = lean::cnstr_get(x_43, 1);
lean::inc(x_48);
if (lean::obj_tag(x_48) == 0)
{
obj* x_50; obj* x_53; obj* x_54; obj* x_57; obj* x_58; 
x_50 = lean::cnstr_get(x_43, 0);
lean::inc(x_50);
lean::dec(x_43);
x_53 = l_Lean_Parser_Term_optIdent_HasView;
x_54 = lean::cnstr_get(x_53, 0);
lean::inc(x_54);
lean::dec(x_53);
x_57 = lean::apply_1(x_54, x_50);
if (lean::is_scalar(x_42)) {
 x_58 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_58 = x_42;
}
lean::cnstr_set(x_58, 0, x_57);
x_36 = x_58;
goto lbl_37;
}
else
{
obj* x_62; 
lean::dec(x_42);
lean::dec(x_43);
lean::dec(x_48);
x_62 = l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__1;
x_36 = x_62;
goto lbl_37;
}
}
}
lbl_37:
{
obj* x_63; obj* x_64; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_66; 
x_66 = lean::box(3);
x_63 = x_27;
x_64 = x_66;
goto lbl_65;
}
else
{
obj* x_67; obj* x_69; 
x_67 = lean::cnstr_get(x_27, 0);
lean::inc(x_67);
x_69 = lean::cnstr_get(x_27, 1);
lean::inc(x_69);
lean::dec(x_27);
x_63 = x_69;
x_64 = x_67;
goto lbl_65;
}
lbl_65:
{
obj* x_72; obj* x_73; obj* x_74; obj* x_76; obj* x_77; 
if (lean::obj_tag(x_63) == 0)
{
obj* x_79; 
x_79 = lean::box(3);
x_76 = x_63;
x_77 = x_79;
goto lbl_78;
}
else
{
obj* x_80; obj* x_82; 
x_80 = lean::cnstr_get(x_63, 0);
lean::inc(x_80);
x_82 = lean::cnstr_get(x_63, 1);
lean::inc(x_82);
lean::dec(x_63);
x_76 = x_82;
x_77 = x_80;
goto lbl_78;
}
lbl_75:
{
if (lean::obj_tag(x_74) == 0)
{
obj* x_85; obj* x_86; obj* x_87; 
x_85 = lean::box(0);
x_86 = lean::box(3);
x_87 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_87, 0, x_18);
lean::cnstr_set(x_87, 1, x_36);
lean::cnstr_set(x_87, 2, x_64);
lean::cnstr_set(x_87, 3, x_72);
lean::cnstr_set(x_87, 4, x_73);
lean::cnstr_set(x_87, 5, x_85);
lean::cnstr_set(x_87, 6, x_86);
return x_87;
}
else
{
obj* x_88; 
x_88 = lean::cnstr_get(x_74, 0);
lean::inc(x_88);
switch (lean::obj_tag(x_88)) {
case 0:
{
obj* x_90; obj* x_93; obj* x_96; 
x_90 = lean::cnstr_get(x_74, 1);
lean::inc(x_90);
lean::dec(x_74);
x_93 = lean::cnstr_get(x_88, 0);
lean::inc(x_93);
lean::dec(x_88);
x_96 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_96, 0, x_93);
if (lean::obj_tag(x_90) == 0)
{
obj* x_97; obj* x_98; 
x_97 = lean::box(3);
x_98 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_98, 0, x_18);
lean::cnstr_set(x_98, 1, x_36);
lean::cnstr_set(x_98, 2, x_64);
lean::cnstr_set(x_98, 3, x_72);
lean::cnstr_set(x_98, 4, x_73);
lean::cnstr_set(x_98, 5, x_96);
lean::cnstr_set(x_98, 6, x_97);
return x_98;
}
else
{
obj* x_99; obj* x_102; 
x_99 = lean::cnstr_get(x_90, 0);
lean::inc(x_99);
lean::dec(x_90);
x_102 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_102, 0, x_18);
lean::cnstr_set(x_102, 1, x_36);
lean::cnstr_set(x_102, 2, x_64);
lean::cnstr_set(x_102, 3, x_72);
lean::cnstr_set(x_102, 4, x_73);
lean::cnstr_set(x_102, 5, x_96);
lean::cnstr_set(x_102, 6, x_99);
return x_102;
}
}
case 3:
{
obj* x_103; obj* x_106; 
x_103 = lean::cnstr_get(x_74, 1);
lean::inc(x_103);
lean::dec(x_74);
x_106 = lean::box(0);
if (lean::obj_tag(x_103) == 0)
{
obj* x_107; obj* x_108; 
x_107 = lean::box(3);
x_108 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_108, 0, x_18);
lean::cnstr_set(x_108, 1, x_36);
lean::cnstr_set(x_108, 2, x_64);
lean::cnstr_set(x_108, 3, x_72);
lean::cnstr_set(x_108, 4, x_73);
lean::cnstr_set(x_108, 5, x_106);
lean::cnstr_set(x_108, 6, x_107);
return x_108;
}
else
{
obj* x_109; obj* x_112; 
x_109 = lean::cnstr_get(x_103, 0);
lean::inc(x_109);
lean::dec(x_103);
x_112 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_112, 0, x_18);
lean::cnstr_set(x_112, 1, x_36);
lean::cnstr_set(x_112, 2, x_64);
lean::cnstr_set(x_112, 3, x_72);
lean::cnstr_set(x_112, 4, x_73);
lean::cnstr_set(x_112, 5, x_106);
lean::cnstr_set(x_112, 6, x_109);
return x_112;
}
}
default:
{
obj* x_114; obj* x_117; 
lean::dec(x_88);
x_114 = lean::cnstr_get(x_74, 1);
lean::inc(x_114);
lean::dec(x_74);
x_117 = lean::box(0);
if (lean::obj_tag(x_114) == 0)
{
obj* x_118; obj* x_119; 
x_118 = lean::box(3);
x_119 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_119, 0, x_18);
lean::cnstr_set(x_119, 1, x_36);
lean::cnstr_set(x_119, 2, x_64);
lean::cnstr_set(x_119, 3, x_72);
lean::cnstr_set(x_119, 4, x_73);
lean::cnstr_set(x_119, 5, x_117);
lean::cnstr_set(x_119, 6, x_118);
return x_119;
}
else
{
obj* x_120; obj* x_123; 
x_120 = lean::cnstr_get(x_114, 0);
lean::inc(x_120);
lean::dec(x_114);
x_123 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_123, 0, x_18);
lean::cnstr_set(x_123, 1, x_36);
lean::cnstr_set(x_123, 2, x_64);
lean::cnstr_set(x_123, 3, x_72);
lean::cnstr_set(x_123, 4, x_73);
lean::cnstr_set(x_123, 5, x_117);
lean::cnstr_set(x_123, 6, x_120);
return x_123;
}
}
}
}
}
lbl_78:
{
switch (lean::obj_tag(x_77)) {
case 0:
{
obj* x_124; obj* x_127; 
x_124 = lean::cnstr_get(x_77, 0);
lean::inc(x_124);
lean::dec(x_77);
x_127 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_127, 0, x_124);
if (lean::obj_tag(x_76) == 0)
{
obj* x_128; obj* x_129; obj* x_130; 
x_128 = lean::box(0);
x_129 = lean::box(3);
x_130 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_130, 0, x_18);
lean::cnstr_set(x_130, 1, x_36);
lean::cnstr_set(x_130, 2, x_64);
lean::cnstr_set(x_130, 3, x_127);
lean::cnstr_set(x_130, 4, x_129);
lean::cnstr_set(x_130, 5, x_128);
lean::cnstr_set(x_130, 6, x_129);
return x_130;
}
else
{
obj* x_131; obj* x_133; 
x_131 = lean::cnstr_get(x_76, 0);
lean::inc(x_131);
x_133 = lean::cnstr_get(x_76, 1);
lean::inc(x_133);
lean::dec(x_76);
x_72 = x_127;
x_73 = x_131;
x_74 = x_133;
goto lbl_75;
}
}
case 3:
{
obj* x_136; 
x_136 = lean::box(0);
if (lean::obj_tag(x_76) == 0)
{
obj* x_137; obj* x_138; 
x_137 = lean::box(3);
x_138 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_138, 0, x_18);
lean::cnstr_set(x_138, 1, x_36);
lean::cnstr_set(x_138, 2, x_64);
lean::cnstr_set(x_138, 3, x_136);
lean::cnstr_set(x_138, 4, x_137);
lean::cnstr_set(x_138, 5, x_136);
lean::cnstr_set(x_138, 6, x_137);
return x_138;
}
else
{
obj* x_139; obj* x_141; 
x_139 = lean::cnstr_get(x_76, 0);
lean::inc(x_139);
x_141 = lean::cnstr_get(x_76, 1);
lean::inc(x_141);
lean::dec(x_76);
x_72 = x_136;
x_73 = x_139;
x_74 = x_141;
goto lbl_75;
}
}
default:
{
obj* x_145; 
lean::dec(x_77);
x_145 = lean::box(0);
if (lean::obj_tag(x_76) == 0)
{
obj* x_146; obj* x_147; 
x_146 = lean::box(3);
x_147 = lean::alloc_cnstr(0, 7, 0);
lean::cnstr_set(x_147, 0, x_18);
lean::cnstr_set(x_147, 1, x_36);
lean::cnstr_set(x_147, 2, x_64);
lean::cnstr_set(x_147, 3, x_145);
lean::cnstr_set(x_147, 4, x_146);
lean::cnstr_set(x_147, 5, x_145);
lean::cnstr_set(x_147, 6, x_146);
return x_147;
}
else
{
obj* x_148; obj* x_150; 
x_148 = lean::cnstr_get(x_76, 0);
lean::inc(x_148);
x_150 = lean::cnstr_get(x_76, 1);
lean::inc(x_150);
lean::dec(x_76);
x_72 = x_145;
x_73 = x_148;
x_74 = x_150;
goto lbl_75;
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_if_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_if_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_if_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_if_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_if_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_if_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_13; obj* x_16; obj* x_18; obj* x_21; obj* x_24; obj* x_25; obj* x_27; obj* x_30; 
x_0 = lean::mk_string("if ");
x_1 = lean::mk_nat_obj(0ul);
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_1);
x_5 = lean::mk_string(" then ");
x_6 = l_Lean_Parser_symbol_tokens___rarg(x_5, x_1);
lean::dec(x_5);
x_8 = lean::mk_string(" else ");
x_9 = l_Lean_Parser_symbol_tokens___rarg(x_8, x_1);
lean::dec(x_8);
x_11 = lean::box(0);
x_12 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_11);
x_13 = l_Lean_Parser_List_cons_tokens___rarg(x_9, x_12);
lean::dec(x_12);
lean::dec(x_9);
x_16 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_13);
lean::dec(x_13);
x_18 = l_Lean_Parser_List_cons_tokens___rarg(x_6, x_16);
lean::dec(x_16);
lean::dec(x_6);
x_21 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_18);
lean::dec(x_18);
lean::dec(x_4);
x_24 = l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasTokens;
x_25 = l_Lean_Parser_List_cons_tokens___rarg(x_24, x_21);
lean::dec(x_21);
x_27 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_25);
lean::dec(x_25);
lean::dec(x_2);
x_30 = l_Lean_Parser_tokens___rarg(x_27);
lean::dec(x_27);
return x_30;
}
}
obj* _init_l_Lean_Parser_Term_if_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; 
x_0 = lean::mk_string("if ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::mk_string(" then ");
x_9 = l_String_trim(x_8);
lean::dec(x_8);
lean::inc(x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_12, 0, x_9);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_13, 0, x_9);
lean::closure_set(x_13, 1, x_5);
lean::closure_set(x_13, 2, x_12);
x_14 = lean::mk_string(" else ");
x_15 = l_String_trim(x_14);
lean::dec(x_14);
lean::inc(x_15);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_18, 0, x_15);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_19, 0, x_15);
lean::closure_set(x_19, 1, x_5);
lean::closure_set(x_19, 2, x_18);
x_20 = lean::box(0);
lean::inc(x_7);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_7);
lean::cnstr_set(x_22, 1, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_19);
lean::cnstr_set(x_23, 1, x_22);
lean::inc(x_7);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_7);
lean::cnstr_set(x_25, 1, x_23);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_13);
lean::cnstr_set(x_26, 1, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_7);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_optIdent_Parser), 5, 0);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_27);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_6);
lean::cnstr_set(x_30, 1, x_29);
x_31 = l_Lean_Parser_TermParserM_Monad;
x_32 = l_Lean_Parser_TermParserM_MonadExcept;
x_33 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_34 = l_Lean_Parser_TermParserM_Alternative;
x_35 = l_Lean_Parser_Term_if;
x_36 = l_Lean_Parser_Term_if_HasView;
x_37 = l_Lean_Parser_Combinators_node_view___rarg(x_31, x_32, x_33, x_34, x_35, x_30, x_36);
lean::dec(x_30);
return x_37;
}
}
obj* _init_l_Lean_Parser_Term_if_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_22; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; 
x_0 = lean::mk_string("if ");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = lean::mk_nat_obj(0ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_7, 0, x_5);
x_8 = lean::mk_string(" then ");
x_9 = l_String_trim(x_8);
lean::dec(x_8);
lean::inc(x_9);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_12, 0, x_9);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_13, 0, x_9);
lean::closure_set(x_13, 1, x_5);
lean::closure_set(x_13, 2, x_12);
x_14 = lean::mk_string(" else ");
x_15 = l_String_trim(x_14);
lean::dec(x_14);
lean::inc(x_15);
x_18 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_18, 0, x_15);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_19, 0, x_15);
lean::closure_set(x_19, 1, x_5);
lean::closure_set(x_19, 2, x_18);
x_20 = lean::box(0);
lean::inc(x_7);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_7);
lean::cnstr_set(x_22, 1, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_19);
lean::cnstr_set(x_23, 1, x_22);
lean::inc(x_7);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_7);
lean::cnstr_set(x_25, 1, x_23);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_13);
lean::cnstr_set(x_26, 1, x_25);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_7);
lean::cnstr_set(x_27, 1, x_26);
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_optIdent_Parser), 5, 0);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_27);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_6);
lean::cnstr_set(x_30, 1, x_29);
return x_30;
}
}
obj* l_Lean_Parser_Term_if_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_if;
x_6 = l_Lean_Parser_Term_if_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_structInstType() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("structInstType");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_structInstType_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_1);
if (lean::obj_tag(x_3) == 0)
{
obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_7 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_Lean_Parser_Term_structInstType;
x_10 = l_Lean_Parser_Syntax_mkNode(x_9, x_8);
return x_10;
}
else
{
obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_11 = lean::cnstr_get(x_3, 0);
lean::inc(x_11);
lean::dec(x_3);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_11);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_14);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_6);
lean::cnstr_set(x_17, 1, x_16);
x_18 = l_Lean_Parser_Term_structInstType;
x_19 = l_Lean_Parser_Syntax_mkNode(x_18, x_17);
return x_19;
}
}
}
obj* _init_l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOTAnIdent");
lean::inc(x_1);
x_3 = l_Lean_Parser_Substring_ofString(x_1);
x_4 = lean::box(0);
x_5 = lean_name_mk_string(x_4, x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_7, 0, x_0);
lean::cnstr_set(x_7, 1, x_3);
lean::cnstr_set(x_7, 2, x_5);
lean::cnstr_set(x_7, 3, x_6);
lean::cnstr_set(x_7, 4, x_6);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_0);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__1;
return x_0;
}
}
obj* l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 1:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_20; obj* x_23; obj* x_24; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::box(0);
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_20);
lean::cnstr_set(x_24, 1, x_23);
return x_24;
}
else
{
obj* x_25; 
x_25 = lean::cnstr_get(x_1, 0);
lean::inc(x_25);
lean::dec(x_1);
switch (lean::obj_tag(x_25)) {
case 0:
{
obj* x_28; obj* x_31; obj* x_34; obj* x_35; 
x_28 = lean::cnstr_get(x_2, 0);
lean::inc(x_28);
lean::dec(x_2);
x_31 = lean::cnstr_get(x_25, 0);
lean::inc(x_31);
lean::dec(x_25);
x_34 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_34, 0, x_31);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_28);
lean::cnstr_set(x_35, 1, x_34);
return x_35;
}
case 3:
{
obj* x_36; obj* x_39; obj* x_40; 
x_36 = lean::cnstr_get(x_2, 0);
lean::inc(x_36);
lean::dec(x_2);
x_39 = lean::box(0);
x_40 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_40, 0, x_36);
lean::cnstr_set(x_40, 1, x_39);
return x_40;
}
default:
{
obj* x_42; obj* x_45; obj* x_46; 
lean::dec(x_25);
x_42 = lean::cnstr_get(x_2, 0);
lean::inc(x_42);
lean::dec(x_2);
x_45 = lean::box(0);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_42);
lean::cnstr_set(x_46, 1, x_45);
return x_46;
}
}
}
}
case 3:
{
obj* x_47; 
x_47 = lean::box(0);
x_18 = x_47;
goto lbl_19;
}
default:
{
obj* x_49; 
lean::dec(x_2);
x_49 = lean::box(0);
x_18 = x_49;
goto lbl_19;
}
}
lbl_19:
{
lean::dec(x_18);
if (lean::obj_tag(x_1) == 0)
{
obj* x_51; 
x_51 = l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__1;
return x_51;
}
else
{
obj* x_52; 
x_52 = lean::cnstr_get(x_1, 0);
lean::inc(x_52);
lean::dec(x_1);
switch (lean::obj_tag(x_52)) {
case 0:
{
obj* x_55; obj* x_58; obj* x_59; obj* x_60; 
x_55 = lean::cnstr_get(x_52, 0);
lean::inc(x_55);
lean::dec(x_52);
x_58 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_58, 0, x_55);
x_59 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_60 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_60, 0, x_59);
lean::cnstr_set(x_60, 1, x_58);
return x_60;
}
case 3:
{
obj* x_61; 
x_61 = l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__1;
return x_61;
}
default:
{
obj* x_63; 
lean::dec(x_52);
x_63 = l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__1;
return x_63;
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_structInstType_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInstType_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_structInstType_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_structInstType_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_structInstWith() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("structInstWith");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_structInstWith_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::cnstr_get(x_0, 1);
lean::inc(x_1);
if (lean::obj_tag(x_1) == 0)
{
obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
lean::dec(x_0);
x_6 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = l_Lean_Parser_Term_structInstWith;
x_9 = l_Lean_Parser_Syntax_mkNode(x_8, x_7);
return x_9;
}
else
{
obj* x_10; obj* x_13; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
x_10 = lean::cnstr_get(x_0, 0);
lean::inc(x_10);
lean::dec(x_0);
x_13 = lean::cnstr_get(x_1, 0);
lean::inc(x_13);
lean::dec(x_1);
x_16 = lean::box(0);
x_17 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_17, 0, x_13);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_17);
lean::cnstr_set(x_18, 1, x_16);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_10);
lean::cnstr_set(x_19, 1, x_18);
x_20 = l_Lean_Parser_Term_structInstWith;
x_21 = l_Lean_Parser_Syntax_mkNode(x_20, x_19);
return x_21;
}
}
}
obj* _init_l_Lean_Parser_Term_structInstWith_HasView_x_27___elambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
return x_2;
}
}
obj* l_Lean_Parser_Term_structInstWith_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_structInstWith_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_Lean_Parser_Term_structInstWith_HasView_x_27___elambda__2___closed__1;
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 1);
lean::inc(x_11);
if (lean::obj_tag(x_11) == 0)
{
obj* x_14; obj* x_17; obj* x_18; 
lean::dec(x_5);
x_14 = lean::cnstr_get(x_6, 0);
lean::inc(x_14);
lean::dec(x_6);
x_17 = lean::box(0);
x_18 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_18, 0, x_14);
lean::cnstr_set(x_18, 1, x_17);
return x_18;
}
else
{
obj* x_19; 
x_19 = lean::cnstr_get(x_11, 0);
lean::inc(x_19);
lean::dec(x_11);
switch (lean::obj_tag(x_19)) {
case 0:
{
obj* x_22; obj* x_25; obj* x_28; obj* x_29; 
x_22 = lean::cnstr_get(x_6, 0);
lean::inc(x_22);
lean::dec(x_6);
x_25 = lean::cnstr_get(x_19, 0);
lean::inc(x_25);
lean::dec(x_19);
if (lean::is_scalar(x_5)) {
 x_28 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_28 = x_5;
}
lean::cnstr_set(x_28, 0, x_25);
x_29 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_29, 0, x_22);
lean::cnstr_set(x_29, 1, x_28);
return x_29;
}
case 3:
{
obj* x_31; obj* x_34; obj* x_35; 
lean::dec(x_5);
x_31 = lean::cnstr_get(x_6, 0);
lean::inc(x_31);
lean::dec(x_6);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_31);
lean::cnstr_set(x_35, 1, x_34);
return x_35;
}
default:
{
obj* x_38; obj* x_41; obj* x_42; 
lean::dec(x_5);
lean::dec(x_19);
x_38 = lean::cnstr_get(x_6, 0);
lean::inc(x_38);
lean::dec(x_6);
x_41 = lean::box(0);
x_42 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_42, 0, x_38);
lean::cnstr_set(x_42, 1, x_41);
return x_42;
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_structInstWith_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInstWith_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInstWith_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_structInstWith_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_structInstWith_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_structInstField() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("structInstField");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_structInstField_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_8, 0, x_1);
x_9 = lean::box(0);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_5);
lean::cnstr_set(x_10, 1, x_9);
if (lean::obj_tag(x_3) == 0)
{
obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_11 = lean::box(3);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_8);
lean::cnstr_set(x_13, 1, x_12);
x_14 = l_Lean_Parser_Term_structInstField;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_16 = lean::cnstr_get(x_3, 0);
lean::inc(x_16);
lean::dec(x_3);
x_19 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_19, 0, x_16);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_10);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_8);
lean::cnstr_set(x_21, 1, x_20);
x_22 = l_Lean_Parser_Term_structInstField;
x_23 = l_Lean_Parser_Syntax_mkNode(x_22, x_21);
return x_23;
}
}
}
obj* _init_l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOTAnIdent");
lean::inc(x_1);
x_3 = l_Lean_Parser_Substring_ofString(x_1);
x_4 = lean::box(0);
x_5 = lean_name_mk_string(x_4, x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_7, 0, x_0);
lean::cnstr_set(x_7, 1, x_3);
lean::cnstr_set(x_7, 2, x_5);
lean::cnstr_set(x_7, 3, x_6);
lean::cnstr_set(x_7, 4, x_6);
x_8 = lean::box(3);
x_9 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_0);
lean::cnstr_set(x_9, 2, x_8);
return x_9;
}
}
obj* _init_l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__1;
return x_0;
}
}
obj* l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 1:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_20; obj* x_23; obj* x_24; obj* x_25; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::box(0);
x_24 = lean::box(3);
x_25 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_25, 0, x_20);
lean::cnstr_set(x_25, 1, x_23);
lean::cnstr_set(x_25, 2, x_24);
return x_25;
}
else
{
obj* x_26; 
x_26 = lean::cnstr_get(x_1, 0);
lean::inc(x_26);
switch (lean::obj_tag(x_26)) {
case 0:
{
obj* x_28; obj* x_31; obj* x_34; obj* x_37; 
x_28 = lean::cnstr_get(x_2, 0);
lean::inc(x_28);
lean::dec(x_2);
x_31 = lean::cnstr_get(x_1, 1);
lean::inc(x_31);
lean::dec(x_1);
x_34 = lean::cnstr_get(x_26, 0);
lean::inc(x_34);
lean::dec(x_26);
x_37 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_37, 0, x_34);
if (lean::obj_tag(x_31) == 0)
{
obj* x_38; obj* x_39; 
x_38 = lean::box(3);
x_39 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_39, 0, x_28);
lean::cnstr_set(x_39, 1, x_37);
lean::cnstr_set(x_39, 2, x_38);
return x_39;
}
else
{
obj* x_40; obj* x_43; 
x_40 = lean::cnstr_get(x_31, 0);
lean::inc(x_40);
lean::dec(x_31);
x_43 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_43, 0, x_28);
lean::cnstr_set(x_43, 1, x_37);
lean::cnstr_set(x_43, 2, x_40);
return x_43;
}
}
case 3:
{
obj* x_44; obj* x_47; obj* x_50; 
x_44 = lean::cnstr_get(x_2, 0);
lean::inc(x_44);
lean::dec(x_2);
x_47 = lean::cnstr_get(x_1, 1);
lean::inc(x_47);
lean::dec(x_1);
x_50 = lean::box(0);
if (lean::obj_tag(x_47) == 0)
{
obj* x_51; obj* x_52; 
x_51 = lean::box(3);
x_52 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_52, 0, x_44);
lean::cnstr_set(x_52, 1, x_50);
lean::cnstr_set(x_52, 2, x_51);
return x_52;
}
else
{
obj* x_53; obj* x_56; 
x_53 = lean::cnstr_get(x_47, 0);
lean::inc(x_53);
lean::dec(x_47);
x_56 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_56, 0, x_44);
lean::cnstr_set(x_56, 1, x_50);
lean::cnstr_set(x_56, 2, x_53);
return x_56;
}
}
default:
{
obj* x_58; obj* x_61; obj* x_64; 
lean::dec(x_26);
x_58 = lean::cnstr_get(x_2, 0);
lean::inc(x_58);
lean::dec(x_2);
x_61 = lean::cnstr_get(x_1, 1);
lean::inc(x_61);
lean::dec(x_1);
x_64 = lean::box(0);
if (lean::obj_tag(x_61) == 0)
{
obj* x_65; obj* x_66; 
x_65 = lean::box(3);
x_66 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_66, 0, x_58);
lean::cnstr_set(x_66, 1, x_64);
lean::cnstr_set(x_66, 2, x_65);
return x_66;
}
else
{
obj* x_67; obj* x_70; 
x_67 = lean::cnstr_get(x_61, 0);
lean::inc(x_67);
lean::dec(x_61);
x_70 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_70, 0, x_58);
lean::cnstr_set(x_70, 1, x_64);
lean::cnstr_set(x_70, 2, x_67);
return x_70;
}
}
}
}
}
case 3:
{
obj* x_71; 
x_71 = lean::box(0);
x_18 = x_71;
goto lbl_19;
}
default:
{
obj* x_73; 
lean::dec(x_2);
x_73 = lean::box(0);
x_18 = x_73;
goto lbl_19;
}
}
lbl_19:
{
lean::dec(x_18);
if (lean::obj_tag(x_1) == 0)
{
obj* x_75; 
x_75 = l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__1;
return x_75;
}
else
{
obj* x_76; obj* x_78; obj* x_81; 
x_76 = lean::cnstr_get(x_1, 0);
lean::inc(x_76);
x_78 = lean::cnstr_get(x_1, 1);
lean::inc(x_78);
lean::dec(x_1);
x_81 = lean::box(0);
switch (lean::obj_tag(x_76)) {
case 0:
{
obj* x_82; obj* x_85; 
x_82 = lean::cnstr_get(x_76, 0);
lean::inc(x_82);
lean::dec(x_76);
x_85 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_85, 0, x_82);
if (lean::obj_tag(x_78) == 0)
{
obj* x_86; obj* x_87; obj* x_88; 
x_86 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_87 = lean::box(3);
x_88 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_88, 0, x_86);
lean::cnstr_set(x_88, 1, x_85);
lean::cnstr_set(x_88, 2, x_87);
return x_88;
}
else
{
obj* x_89; obj* x_92; obj* x_93; 
x_89 = lean::cnstr_get(x_78, 0);
lean::inc(x_89);
lean::dec(x_78);
x_92 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_93 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_93, 0, x_92);
lean::cnstr_set(x_93, 1, x_85);
lean::cnstr_set(x_93, 2, x_89);
return x_93;
}
}
case 3:
{
if (lean::obj_tag(x_78) == 0)
{
obj* x_94; 
x_94 = l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__1;
return x_94;
}
else
{
obj* x_95; obj* x_98; obj* x_99; 
x_95 = lean::cnstr_get(x_78, 0);
lean::inc(x_95);
lean::dec(x_78);
x_98 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_99 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_99, 0, x_98);
lean::cnstr_set(x_99, 1, x_81);
lean::cnstr_set(x_99, 2, x_95);
return x_99;
}
}
default:
{
lean::dec(x_76);
if (lean::obj_tag(x_78) == 0)
{
obj* x_101; 
x_101 = l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__1;
return x_101;
}
else
{
obj* x_102; obj* x_105; obj* x_106; 
x_102 = lean::cnstr_get(x_78, 0);
lean::inc(x_102);
lean::dec(x_78);
x_105 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_106 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_106, 0, x_105);
lean::cnstr_set(x_106, 1, x_81);
lean::cnstr_set(x_106, 2, x_102);
return x_106;
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_structInstField_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInstField_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_structInstField_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_structInstField_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_structInstSource() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("structInstSource");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_structInstSource_HasView_x_27___elambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_noKind;
x_2 = l_Lean_Parser_Syntax_mkNode(x_1, x_0);
x_3 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_3, 0, x_2);
lean::cnstr_set(x_3, 1, x_0);
x_4 = lean::box(3);
x_5 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_5, 0, x_4);
lean::cnstr_set(x_5, 1, x_3);
x_6 = l_Lean_Parser_Term_structInstSource;
x_7 = l_Lean_Parser_Syntax_mkNode(x_6, x_5);
return x_7;
}
}
obj* l_Lean_Parser_Term_structInstSource_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_3) == 0)
{
obj* x_7; 
x_7 = l_Lean_Parser_Term_structInstSource_HasView_x_27___elambda__1___closed__1;
return x_7;
}
else
{
obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_8 = lean::cnstr_get(x_3, 0);
lean::inc(x_8);
lean::dec(x_3);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_8);
lean::cnstr_set(x_11, 1, x_6);
x_12 = l_Lean_Parser_noKind;
x_13 = l_Lean_Parser_Syntax_mkNode(x_12, x_11);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_6);
x_15 = lean::box(3);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_14);
x_17 = l_Lean_Parser_Term_structInstSource;
x_18 = l_Lean_Parser_Syntax_mkNode(x_17, x_16);
return x_18;
}
}
else
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_1, 0);
lean::inc(x_19);
lean::dec(x_1);
x_22 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_22, 0, x_19);
if (lean::obj_tag(x_3) == 0)
{
obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
x_23 = l_Lean_Parser_detailIdent_HasView_x_27___elambda__1___closed__1;
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_22);
lean::cnstr_set(x_24, 1, x_23);
x_25 = l_Lean_Parser_Term_structInstSource;
x_26 = l_Lean_Parser_Syntax_mkNode(x_25, x_24);
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; 
x_27 = lean::cnstr_get(x_3, 0);
lean::inc(x_27);
lean::dec(x_3);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_27);
lean::cnstr_set(x_30, 1, x_6);
x_31 = l_Lean_Parser_noKind;
x_32 = l_Lean_Parser_Syntax_mkNode(x_31, x_30);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_6);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_22);
lean::cnstr_set(x_34, 1, x_33);
x_35 = l_Lean_Parser_Term_structInstSource;
x_36 = l_Lean_Parser_Syntax_mkNode(x_35, x_34);
return x_36;
}
}
}
}
obj* _init_l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_1, 0, x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = l_Lean_Parser_Syntax_asNode___main(x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; obj* x_4; 
x_3 = l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__1;
x_4 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_4, 0, x_0);
lean::cnstr_set(x_4, 1, x_3);
return x_4;
}
else
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = lean::cnstr_get(x_2, 0);
if (lean::is_exclusive(x_2)) {
 lean::cnstr_set(x_2, 0, lean::box(0));
 x_7 = x_2;
} else {
 lean::inc(x_5);
 lean::dec(x_2);
 x_7 = lean::box(0);
}
x_8 = lean::cnstr_get(x_5, 1);
lean::inc(x_8);
lean::dec(x_5);
if (lean::obj_tag(x_8) == 0)
{
obj* x_12; 
lean::dec(x_7);
x_12 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_12, 0, x_0);
lean::cnstr_set(x_12, 1, x_0);
return x_12;
}
else
{
obj* x_13; 
x_13 = lean::cnstr_get(x_8, 1);
lean::inc(x_13);
if (lean::obj_tag(x_13) == 0)
{
obj* x_15; obj* x_18; obj* x_19; 
x_15 = lean::cnstr_get(x_8, 0);
lean::inc(x_15);
lean::dec(x_8);
if (lean::is_scalar(x_7)) {
 x_18 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_18 = x_7;
}
lean::cnstr_set(x_18, 0, x_15);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_0);
lean::cnstr_set(x_19, 1, x_18);
return x_19;
}
else
{
obj* x_23; obj* x_24; 
lean::dec(x_7);
lean::dec(x_8);
lean::dec(x_13);
x_23 = l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__1;
x_24 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_24, 0, x_0);
lean::cnstr_set(x_24, 1, x_23);
return x_24;
}
}
}
}
}
obj* l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_8; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
if (lean::is_exclusive(x_4)) {
 lean::cnstr_set(x_4, 0, lean::box(0));
 x_8 = x_4;
} else {
 lean::inc(x_6);
 lean::dec(x_4);
 x_8 = lean::box(0);
}
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_13; 
lean::dec(x_8);
x_13 = l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__2;
return x_13;
}
else
{
obj* x_14; 
x_14 = lean::cnstr_get(x_9, 0);
lean::inc(x_14);
switch (lean::obj_tag(x_14)) {
case 0:
{
obj* x_16; obj* x_19; obj* x_22; 
x_16 = lean::cnstr_get(x_9, 1);
lean::inc(x_16);
lean::dec(x_9);
x_19 = lean::cnstr_get(x_14, 0);
lean::inc(x_19);
lean::dec(x_14);
if (lean::is_scalar(x_8)) {
 x_22 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_22 = x_8;
}
lean::cnstr_set(x_22, 0, x_19);
if (lean::obj_tag(x_16) == 0)
{
obj* x_23; obj* x_24; 
x_23 = lean::box(3);
x_24 = l_Lean_Parser_Syntax_asNode___main(x_23);
if (lean::obj_tag(x_24) == 0)
{
obj* x_25; obj* x_26; 
x_25 = l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__1;
x_26 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_26, 0, x_22);
lean::cnstr_set(x_26, 1, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_29; obj* x_30; 
x_27 = lean::cnstr_get(x_24, 0);
if (lean::is_exclusive(x_24)) {
 lean::cnstr_set(x_24, 0, lean::box(0));
 x_29 = x_24;
} else {
 lean::inc(x_27);
 lean::dec(x_24);
 x_29 = lean::box(0);
}
x_30 = lean::cnstr_get(x_27, 1);
lean::inc(x_30);
lean::dec(x_27);
if (lean::obj_tag(x_30) == 0)
{
obj* x_34; obj* x_35; 
lean::dec(x_29);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_22);
lean::cnstr_set(x_35, 1, x_34);
return x_35;
}
else
{
obj* x_36; 
x_36 = lean::cnstr_get(x_30, 1);
lean::inc(x_36);
if (lean::obj_tag(x_36) == 0)
{
obj* x_38; obj* x_41; obj* x_42; 
x_38 = lean::cnstr_get(x_30, 0);
lean::inc(x_38);
lean::dec(x_30);
if (lean::is_scalar(x_29)) {
 x_41 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_41 = x_29;
}
lean::cnstr_set(x_41, 0, x_38);
x_42 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_42, 0, x_22);
lean::cnstr_set(x_42, 1, x_41);
return x_42;
}
else
{
obj* x_46; obj* x_47; 
lean::dec(x_30);
lean::dec(x_36);
lean::dec(x_29);
x_46 = l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__1;
x_47 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_47, 0, x_22);
lean::cnstr_set(x_47, 1, x_46);
return x_47;
}
}
}
}
else
{
obj* x_48; 
x_48 = lean::cnstr_get(x_16, 0);
lean::inc(x_48);
lean::dec(x_16);
x_1 = x_22;
x_2 = x_48;
goto lbl_3;
}
}
case 3:
{
obj* x_52; 
lean::dec(x_8);
x_52 = lean::cnstr_get(x_9, 1);
lean::inc(x_52);
lean::dec(x_9);
if (lean::obj_tag(x_52) == 0)
{
obj* x_55; 
x_55 = l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__2;
return x_55;
}
else
{
obj* x_56; obj* x_59; 
x_56 = lean::cnstr_get(x_52, 0);
lean::inc(x_56);
lean::dec(x_52);
x_59 = lean::box(0);
x_1 = x_59;
x_2 = x_56;
goto lbl_3;
}
}
default:
{
obj* x_62; 
lean::dec(x_14);
lean::dec(x_8);
x_62 = lean::cnstr_get(x_9, 1);
lean::inc(x_62);
lean::dec(x_9);
if (lean::obj_tag(x_62) == 0)
{
obj* x_65; 
x_65 = l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__2;
return x_65;
}
else
{
obj* x_66; obj* x_69; 
x_66 = lean::cnstr_get(x_62, 0);
lean::inc(x_66);
lean::dec(x_62);
x_69 = lean::box(0);
x_1 = x_69;
x_2 = x_66;
goto lbl_3;
}
}
}
}
}
lbl_3:
{
obj* x_70; 
x_70 = l_Lean_Parser_Syntax_asNode___main(x_2);
if (lean::obj_tag(x_70) == 0)
{
obj* x_71; obj* x_72; 
x_71 = l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__1;
x_72 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_72, 0, x_1);
lean::cnstr_set(x_72, 1, x_71);
return x_72;
}
else
{
obj* x_73; obj* x_75; obj* x_76; 
x_73 = lean::cnstr_get(x_70, 0);
if (lean::is_exclusive(x_70)) {
 lean::cnstr_set(x_70, 0, lean::box(0));
 x_75 = x_70;
} else {
 lean::inc(x_73);
 lean::dec(x_70);
 x_75 = lean::box(0);
}
x_76 = lean::cnstr_get(x_73, 1);
lean::inc(x_76);
lean::dec(x_73);
if (lean::obj_tag(x_76) == 0)
{
obj* x_80; obj* x_81; 
lean::dec(x_75);
x_80 = lean::box(0);
x_81 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_81, 0, x_1);
lean::cnstr_set(x_81, 1, x_80);
return x_81;
}
else
{
obj* x_82; 
x_82 = lean::cnstr_get(x_76, 1);
lean::inc(x_82);
if (lean::obj_tag(x_82) == 0)
{
obj* x_84; obj* x_87; obj* x_88; 
x_84 = lean::cnstr_get(x_76, 0);
lean::inc(x_84);
lean::dec(x_76);
if (lean::is_scalar(x_75)) {
 x_87 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_87 = x_75;
}
lean::cnstr_set(x_87, 0, x_84);
x_88 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_88, 0, x_1);
lean::cnstr_set(x_88, 1, x_87);
return x_88;
}
else
{
obj* x_92; obj* x_93; 
lean::dec(x_76);
lean::dec(x_82);
lean::dec(x_75);
x_92 = l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__1;
x_93 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_93, 0, x_1);
lean::cnstr_set(x_93, 1, x_92);
return x_93;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_structInstSource_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInstSource_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_structInstSource_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_structInstSource_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_structInstItem() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("structInstItem");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_structInstItem_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = l_Lean_Parser_Term_structInstField_HasView;
x_6 = lean::cnstr_get(x_5, 1);
lean::inc(x_6);
lean::dec(x_5);
x_9 = lean::apply_1(x_6, x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_9);
lean::cnstr_set(x_10, 1, x_1);
x_11 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_12 = l_Lean_Parser_Syntax_mkNode(x_11, x_10);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_1);
x_14 = l_Lean_Parser_Term_structInstItem;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
return x_15;
}
else
{
obj* x_16; obj* x_19; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_16 = lean::cnstr_get(x_0, 0);
lean::inc(x_16);
lean::dec(x_0);
x_19 = l_Lean_Parser_Term_structInstSource_HasView;
x_20 = lean::cnstr_get(x_19, 1);
lean::inc(x_20);
lean::dec(x_19);
x_23 = lean::apply_1(x_20, x_16);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_1);
x_25 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_26 = l_Lean_Parser_Syntax_mkNode(x_25, x_24);
x_27 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_27, 0, x_26);
lean::cnstr_set(x_27, 1, x_1);
x_28 = l_Lean_Parser_Term_structInstItem;
x_29 = l_Lean_Parser_Syntax_mkNode(x_28, x_27);
return x_29;
}
}
}
obj* _init_l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_structInstField_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("structInstItem");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__2;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
obj* x_58; obj* x_59; obj* x_62; obj* x_63; 
x_58 = l_Lean_Parser_Term_structInstSource_HasView;
x_59 = lean::cnstr_get(x_58, 0);
lean::inc(x_59);
lean::dec(x_58);
x_62 = lean::apply_1(x_59, x_52);
x_63 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_63, 0, x_62);
return x_63;
}
else
{
obj* x_64; obj* x_65; obj* x_68; obj* x_69; 
x_64 = l_Lean_Parser_Term_structInstField_HasView;
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
lean::dec(x_64);
x_68 = lean::apply_1(x_65, x_52);
x_69 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_69, 0, x_68);
return x_69;
}
}
else
{
obj* x_73; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_73 = l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1;
return x_73;
}
}
}
}
}
}
}
else
{
obj* x_76; 
lean::dec(x_8);
lean::dec(x_17);
x_76 = l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1;
return x_76;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_structInstItem_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInstItem_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_structInstItem_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_structInstItem_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_structInst() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("structInst");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_List_map___main___at_Lean_Parser_Term_structInst_HasView_x_27___elambda__1___spec__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = lean::box(0);
return x_1;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_8; 
x_2 = lean::cnstr_get(x_0, 0);
x_4 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_6 = x_0;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_0);
 x_6 = lean::box(0);
}
x_7 = l_List_map___main___at_Lean_Parser_Term_structInst_HasView_x_27___elambda__1___spec__1(x_4);
x_8 = lean::cnstr_get(x_2, 1);
lean::inc(x_8);
if (lean::obj_tag(x_8) == 0)
{
obj* x_10; obj* x_13; obj* x_14; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
x_10 = lean::cnstr_get(x_2, 0);
lean::inc(x_10);
lean::dec(x_2);
x_13 = l_Lean_Parser_Term_structInstItem_HasView;
x_14 = lean::cnstr_get(x_13, 1);
lean::inc(x_14);
lean::dec(x_13);
x_17 = lean::apply_1(x_14, x_10);
x_18 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_19 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_19 = x_6;
}
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_7);
return x_20;
}
else
{
obj* x_21; obj* x_24; obj* x_27; obj* x_28; obj* x_31; 
x_21 = lean::cnstr_get(x_2, 0);
lean::inc(x_21);
lean::dec(x_2);
x_24 = lean::cnstr_get(x_8, 0);
lean::inc(x_24);
lean::dec(x_8);
x_27 = l_Lean_Parser_Term_structInstItem_HasView;
x_28 = lean::cnstr_get(x_27, 1);
lean::inc(x_28);
lean::dec(x_27);
x_31 = lean::apply_1(x_28, x_21);
if (lean::obj_tag(x_24) == 0)
{
obj* x_32; obj* x_33; obj* x_34; 
x_32 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
if (lean::is_scalar(x_6)) {
 x_33 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_33 = x_6;
}
lean::cnstr_set(x_33, 0, x_31);
lean::cnstr_set(x_33, 1, x_32);
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_7);
return x_34;
}
else
{
obj* x_35; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
x_35 = lean::cnstr_get(x_24, 0);
lean::inc(x_35);
lean::dec(x_24);
x_38 = lean::box(0);
x_39 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_39, 0, x_35);
if (lean::is_scalar(x_6)) {
 x_40 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_40 = x_6;
}
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_38);
x_41 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_41, 0, x_31);
lean::cnstr_set(x_41, 1, x_40);
x_42 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_7);
return x_42;
}
}
}
}
}
obj* l_Lean_Parser_Term_structInst_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_19; obj* x_20; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_List_map___main___at_Lean_Parser_Term_structInst_HasView_x_27___elambda__1___spec__1(x_7);
x_13 = l_List_join___main___rarg(x_12);
x_14 = l_Lean_Parser_noKind;
x_15 = l_Lean_Parser_Syntax_mkNode(x_14, x_13);
x_16 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_3) == 0)
{
obj* x_22; 
x_22 = lean::box(3);
x_17 = x_22;
goto lbl_18;
}
else
{
obj* x_23; obj* x_26; 
x_23 = lean::cnstr_get(x_3, 0);
lean::inc(x_23);
lean::dec(x_3);
x_26 = lean::box(3);
x_19 = x_26;
x_20 = x_23;
goto lbl_21;
}
}
else
{
obj* x_27; obj* x_30; 
x_27 = lean::cnstr_get(x_1, 0);
lean::inc(x_27);
lean::dec(x_1);
x_30 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_30, 0, x_27);
if (lean::obj_tag(x_3) == 0)
{
x_17 = x_30;
goto lbl_18;
}
else
{
obj* x_31; 
x_31 = lean::cnstr_get(x_3, 0);
lean::inc(x_31);
lean::dec(x_3);
x_19 = x_30;
x_20 = x_31;
goto lbl_21;
}
}
lbl_18:
{
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; 
x_34 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_35 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_35, 0, x_15);
lean::cnstr_set(x_35, 1, x_34);
x_36 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_37 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_35);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_36);
lean::cnstr_set(x_38, 1, x_37);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_17);
lean::cnstr_set(x_39, 1, x_38);
x_40 = l_Lean_Parser_Term_structInst;
x_41 = l_Lean_Parser_Syntax_mkNode(x_40, x_39);
return x_41;
}
else
{
obj* x_42; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; 
x_42 = lean::cnstr_get(x_9, 0);
lean::inc(x_42);
lean::dec(x_9);
x_45 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_45, 0, x_42);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_16);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_15);
lean::cnstr_set(x_47, 1, x_46);
x_48 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_49 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_49, 0, x_48);
lean::cnstr_set(x_49, 1, x_47);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_48);
lean::cnstr_set(x_50, 1, x_49);
x_51 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_51, 0, x_17);
lean::cnstr_set(x_51, 1, x_50);
x_52 = l_Lean_Parser_Term_structInst;
x_53 = l_Lean_Parser_Syntax_mkNode(x_52, x_51);
return x_53;
}
}
else
{
obj* x_54; obj* x_57; obj* x_58; obj* x_61; obj* x_62; obj* x_63; 
x_54 = lean::cnstr_get(x_5, 0);
lean::inc(x_54);
lean::dec(x_5);
x_57 = l_Lean_Parser_Term_structInstWith_HasView;
x_58 = lean::cnstr_get(x_57, 1);
lean::inc(x_58);
lean::dec(x_57);
x_61 = lean::apply_1(x_58, x_54);
x_62 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_62, 0, x_61);
lean::cnstr_set(x_62, 1, x_16);
x_63 = l_Lean_Parser_Syntax_mkNode(x_14, x_62);
if (lean::obj_tag(x_9) == 0)
{
obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; 
x_64 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_15);
lean::cnstr_set(x_65, 1, x_64);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_63);
lean::cnstr_set(x_66, 1, x_65);
x_67 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_68 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_68, 0, x_67);
lean::cnstr_set(x_68, 1, x_66);
x_69 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_69, 0, x_17);
lean::cnstr_set(x_69, 1, x_68);
x_70 = l_Lean_Parser_Term_structInst;
x_71 = l_Lean_Parser_Syntax_mkNode(x_70, x_69);
return x_71;
}
else
{
obj* x_72; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; 
x_72 = lean::cnstr_get(x_9, 0);
lean::inc(x_72);
lean::dec(x_9);
x_75 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_75, 0, x_72);
x_76 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_76, 0, x_75);
lean::cnstr_set(x_76, 1, x_16);
x_77 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_77, 0, x_15);
lean::cnstr_set(x_77, 1, x_76);
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_63);
lean::cnstr_set(x_78, 1, x_77);
x_79 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_80 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_80, 0, x_79);
lean::cnstr_set(x_80, 1, x_78);
x_81 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_81, 0, x_17);
lean::cnstr_set(x_81, 1, x_80);
x_82 = l_Lean_Parser_Term_structInst;
x_83 = l_Lean_Parser_Syntax_mkNode(x_82, x_81);
return x_83;
}
}
}
lbl_21:
{
obj* x_84; obj* x_85; obj* x_88; obj* x_89; obj* x_90; 
x_84 = l_Lean_Parser_Term_structInstType_HasView;
x_85 = lean::cnstr_get(x_84, 1);
lean::inc(x_85);
lean::dec(x_84);
x_88 = lean::apply_1(x_85, x_20);
x_89 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_89, 0, x_88);
lean::cnstr_set(x_89, 1, x_16);
x_90 = l_Lean_Parser_Syntax_mkNode(x_14, x_89);
if (lean::obj_tag(x_5) == 0)
{
if (lean::obj_tag(x_9) == 0)
{
obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; 
x_91 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_92 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_92, 0, x_15);
lean::cnstr_set(x_92, 1, x_91);
x_93 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_94 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_94, 0, x_93);
lean::cnstr_set(x_94, 1, x_92);
x_95 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_95, 0, x_90);
lean::cnstr_set(x_95, 1, x_94);
x_96 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_96, 0, x_19);
lean::cnstr_set(x_96, 1, x_95);
x_97 = l_Lean_Parser_Term_structInst;
x_98 = l_Lean_Parser_Syntax_mkNode(x_97, x_96);
return x_98;
}
else
{
obj* x_99; obj* x_102; obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; 
x_99 = lean::cnstr_get(x_9, 0);
lean::inc(x_99);
lean::dec(x_9);
x_102 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_102, 0, x_99);
x_103 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_103, 0, x_102);
lean::cnstr_set(x_103, 1, x_16);
x_104 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_104, 0, x_15);
lean::cnstr_set(x_104, 1, x_103);
x_105 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_106 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_106, 0, x_105);
lean::cnstr_set(x_106, 1, x_104);
x_107 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_107, 0, x_90);
lean::cnstr_set(x_107, 1, x_106);
x_108 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_108, 0, x_19);
lean::cnstr_set(x_108, 1, x_107);
x_109 = l_Lean_Parser_Term_structInst;
x_110 = l_Lean_Parser_Syntax_mkNode(x_109, x_108);
return x_110;
}
}
else
{
obj* x_111; obj* x_114; obj* x_115; obj* x_118; obj* x_119; obj* x_120; 
x_111 = lean::cnstr_get(x_5, 0);
lean::inc(x_111);
lean::dec(x_5);
x_114 = l_Lean_Parser_Term_structInstWith_HasView;
x_115 = lean::cnstr_get(x_114, 1);
lean::inc(x_115);
lean::dec(x_114);
x_118 = lean::apply_1(x_115, x_111);
x_119 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_119, 0, x_118);
lean::cnstr_set(x_119, 1, x_16);
x_120 = l_Lean_Parser_Syntax_mkNode(x_14, x_119);
if (lean::obj_tag(x_9) == 0)
{
obj* x_121; obj* x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; 
x_121 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_122 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_122, 0, x_15);
lean::cnstr_set(x_122, 1, x_121);
x_123 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_123, 0, x_120);
lean::cnstr_set(x_123, 1, x_122);
x_124 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_124, 0, x_90);
lean::cnstr_set(x_124, 1, x_123);
x_125 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_125, 0, x_19);
lean::cnstr_set(x_125, 1, x_124);
x_126 = l_Lean_Parser_Term_structInst;
x_127 = l_Lean_Parser_Syntax_mkNode(x_126, x_125);
return x_127;
}
else
{
obj* x_128; obj* x_131; obj* x_132; obj* x_133; obj* x_134; obj* x_135; obj* x_136; obj* x_137; obj* x_138; 
x_128 = lean::cnstr_get(x_9, 0);
lean::inc(x_128);
lean::dec(x_9);
x_131 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_131, 0, x_128);
x_132 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_132, 0, x_131);
lean::cnstr_set(x_132, 1, x_16);
x_133 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_133, 0, x_15);
lean::cnstr_set(x_133, 1, x_132);
x_134 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_134, 0, x_120);
lean::cnstr_set(x_134, 1, x_133);
x_135 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_135, 0, x_90);
lean::cnstr_set(x_135, 1, x_134);
x_136 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_136, 0, x_19);
lean::cnstr_set(x_136, 1, x_135);
x_137 = l_Lean_Parser_Term_structInst;
x_138 = l_Lean_Parser_Syntax_mkNode(x_137, x_136);
return x_138;
}
}
}
}
}
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_structInst_HasView_x_27___spec__1(obj* x_0, obj* x_1, obj* x_2) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; 
x_3 = lean::box(0);
return x_3;
}
else
{
obj* x_4; 
x_4 = lean::cnstr_get(x_2, 1);
lean::inc(x_4);
if (lean::obj_tag(x_4) == 0)
{
obj* x_6; obj* x_8; obj* x_9; obj* x_10; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_6 = lean::cnstr_get(x_2, 0);
if (lean::is_exclusive(x_2)) {
 lean::cnstr_release(x_2, 1);
 x_8 = x_2;
} else {
 lean::inc(x_6);
 lean::dec(x_2);
 x_8 = lean::box(0);
}
x_9 = l_Lean_Parser_Term_structInstItem_HasView;
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
lean::dec(x_9);
x_13 = lean::apply_1(x_10, x_6);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::box(0);
if (lean::is_scalar(x_8)) {
 x_17 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_17 = x_8;
}
lean::cnstr_set(x_17, 0, x_15);
lean::cnstr_set(x_17, 1, x_16);
return x_17;
}
else
{
obj* x_18; obj* x_21; obj* x_23; obj* x_25; obj* x_26; obj* x_27; obj* x_30; obj* x_31; 
x_18 = lean::cnstr_get(x_2, 0);
lean::inc(x_18);
lean::dec(x_2);
x_21 = lean::cnstr_get(x_4, 0);
x_23 = lean::cnstr_get(x_4, 1);
if (lean::is_exclusive(x_4)) {
 lean::cnstr_set(x_4, 0, lean::box(0));
 lean::cnstr_set(x_4, 1, lean::box(0));
 x_25 = x_4;
} else {
 lean::inc(x_21);
 lean::inc(x_23);
 lean::dec(x_4);
 x_25 = lean::box(0);
}
x_26 = l_Lean_Parser_Term_structInstItem_HasView;
x_27 = lean::cnstr_get(x_26, 0);
lean::inc(x_27);
lean::dec(x_26);
x_30 = lean::apply_1(x_27, x_18);
x_31 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_structInst_HasView_x_27___spec__1(x_0, x_1, x_23);
switch (lean::obj_tag(x_21)) {
case 0:
{
obj* x_32; obj* x_35; obj* x_36; obj* x_37; obj* x_38; 
x_32 = lean::cnstr_get(x_21, 0);
lean::inc(x_32);
lean::dec(x_21);
x_35 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_35, 0, x_32);
x_36 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_36, 0, x_35);
x_37 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_37, 0, x_30);
lean::cnstr_set(x_37, 1, x_36);
if (lean::is_scalar(x_25)) {
 x_38 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_38 = x_25;
}
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_31);
return x_38;
}
case 3:
{
obj* x_39; obj* x_40; obj* x_41; 
x_39 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_40 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_40, 0, x_30);
lean::cnstr_set(x_40, 1, x_39);
if (lean::is_scalar(x_25)) {
 x_41 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_41 = x_25;
}
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_31);
return x_41;
}
default:
{
obj* x_43; obj* x_44; obj* x_45; 
lean::dec(x_21);
x_43 = l_Lean_Parser_command_notation_HasView_x_27___lambda__1___closed__1;
x_44 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_44, 0, x_30);
lean::cnstr_set(x_44, 1, x_43);
if (lean::is_scalar(x_25)) {
 x_45 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_45 = x_25;
}
lean::cnstr_set(x_45, 0, x_44);
lean::cnstr_set(x_45, 1, x_31);
return x_45;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_Term_structInstItem_HasView;
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_0);
return x_9;
}
}
obj* _init_l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_20; obj* x_21; uint8 x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; 
x_0 = lean::box(0);
x_1 = lean::mk_nat_obj(0ul);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::mk_string(" := ");
x_4 = l_String_trim(x_3);
lean::dec(x_3);
lean::inc(x_4);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_7, 0, x_4);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_8, 0, x_4);
lean::closure_set(x_8, 1, x_1);
lean::closure_set(x_8, 2, x_7);
lean::inc(x_2);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_2);
lean::cnstr_set(x_10, 1, x_0);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_8);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
x_13 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_11);
x_14 = l_Lean_Parser_Term_structInstField;
x_15 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_15, 0, x_14);
lean::closure_set(x_15, 1, x_13);
x_16 = lean::mk_string("..");
x_17 = l_String_trim(x_16);
lean::dec(x_16);
lean::inc(x_17);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_20, 0, x_17);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_21, 0, x_17);
lean::closure_set(x_21, 1, x_1);
lean::closure_set(x_21, 2, x_20);
x_22 = 0;
x_23 = lean::box(x_22);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_24, 0, x_2);
lean::closure_set(x_24, 1, x_23);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_0);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_21);
lean::cnstr_set(x_26, 1, x_25);
x_27 = l_Lean_Parser_Term_structInstSource;
x_28 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_28, 0, x_27);
lean::closure_set(x_28, 1, x_26);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_28);
lean::cnstr_set(x_29, 1, x_0);
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_15);
lean::cnstr_set(x_30, 1, x_29);
x_31 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_31, 0, x_30);
lean::closure_set(x_31, 1, x_1);
x_32 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_0);
x_33 = l_Lean_Parser_Term_structInstItem;
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_34, 0, x_33);
lean::closure_set(x_34, 1, x_32);
return x_34;
}
}
obj* _init_l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_structInstWith_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; 
x_0 = l_Lean_Parser_Term_structInstType_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
x_6 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_6, 0, x_5);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__5() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_3 = lean::box(3);
x_4 = l_Lean_Parser_Syntax_asNode___main(x_3);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__4;
x_1 = x_5;
goto lbl_2;
}
else
{
obj* x_6; obj* x_8; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
if (lean::is_exclusive(x_4)) {
 lean::cnstr_set(x_4, 0, lean::box(0));
 x_8 = x_4;
} else {
 lean::inc(x_6);
 lean::dec(x_4);
 x_8 = lean::box(0);
}
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
lean::dec(x_8);
x_1 = x_0;
goto lbl_2;
}
else
{
obj* x_13; 
x_13 = lean::cnstr_get(x_9, 1);
lean::inc(x_13);
if (lean::obj_tag(x_13) == 0)
{
obj* x_15; obj* x_18; obj* x_19; obj* x_22; obj* x_23; 
x_15 = lean::cnstr_get(x_9, 0);
lean::inc(x_15);
lean::dec(x_9);
x_18 = l_Lean_Parser_Term_structInstType_HasView;
x_19 = lean::cnstr_get(x_18, 0);
lean::inc(x_19);
lean::dec(x_18);
x_22 = lean::apply_1(x_19, x_15);
if (lean::is_scalar(x_8)) {
 x_23 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_23 = x_8;
}
lean::cnstr_set(x_23, 0, x_22);
x_1 = x_23;
goto lbl_2;
}
else
{
obj* x_27; 
lean::dec(x_13);
lean::dec(x_8);
lean::dec(x_9);
x_27 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__4;
x_1 = x_27;
goto lbl_2;
}
}
}
lbl_2:
{
obj* x_28; obj* x_30; obj* x_31; 
x_30 = lean::box(3);
x_31 = l_Lean_Parser_Syntax_asNode___main(x_30);
if (lean::obj_tag(x_31) == 0)
{
obj* x_32; 
x_32 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__3;
x_28 = x_32;
goto lbl_29;
}
else
{
obj* x_33; obj* x_35; obj* x_36; 
x_33 = lean::cnstr_get(x_31, 0);
if (lean::is_exclusive(x_31)) {
 lean::cnstr_set(x_31, 0, lean::box(0));
 x_35 = x_31;
} else {
 lean::inc(x_33);
 lean::dec(x_31);
 x_35 = lean::box(0);
}
x_36 = lean::cnstr_get(x_33, 1);
lean::inc(x_36);
lean::dec(x_33);
if (lean::obj_tag(x_36) == 0)
{
lean::dec(x_35);
x_28 = x_0;
goto lbl_29;
}
else
{
obj* x_40; 
x_40 = lean::cnstr_get(x_36, 1);
lean::inc(x_40);
if (lean::obj_tag(x_40) == 0)
{
obj* x_42; obj* x_45; obj* x_46; obj* x_49; obj* x_50; 
x_42 = lean::cnstr_get(x_36, 0);
lean::inc(x_42);
lean::dec(x_36);
x_45 = l_Lean_Parser_Term_structInstWith_HasView;
x_46 = lean::cnstr_get(x_45, 0);
lean::inc(x_46);
lean::dec(x_45);
x_49 = lean::apply_1(x_46, x_42);
if (lean::is_scalar(x_35)) {
 x_50 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_50 = x_35;
}
lean::cnstr_set(x_50, 0, x_49);
x_28 = x_50;
goto lbl_29;
}
else
{
obj* x_54; 
lean::dec(x_40);
lean::dec(x_35);
lean::dec(x_36);
x_54 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__3;
x_28 = x_54;
goto lbl_29;
}
}
}
lbl_29:
{
obj* x_55; obj* x_56; 
x_55 = lean::box(3);
x_56 = l_Lean_Parser_Syntax_asNode___main(x_55);
if (lean::obj_tag(x_56) == 0)
{
obj* x_57; obj* x_58; 
x_57 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__1;
x_58 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_58, 0, x_0);
lean::cnstr_set(x_58, 1, x_1);
lean::cnstr_set(x_58, 2, x_28);
lean::cnstr_set(x_58, 3, x_57);
lean::cnstr_set(x_58, 4, x_0);
return x_58;
}
else
{
obj* x_59; obj* x_62; obj* x_65; obj* x_66; obj* x_67; obj* x_68; 
x_59 = lean::cnstr_get(x_56, 0);
lean::inc(x_59);
lean::dec(x_56);
x_62 = lean::cnstr_get(x_59, 1);
lean::inc(x_62);
lean::dec(x_59);
x_65 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__2;
x_66 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__3;
x_67 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_structInst_HasView_x_27___spec__1(x_65, x_66, x_62);
x_68 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_68, 0, x_0);
lean::cnstr_set(x_68, 1, x_1);
lean::cnstr_set(x_68, 2, x_28);
lean::cnstr_set(x_68, 3, x_67);
lean::cnstr_set(x_68, 4, x_0);
return x_68;
}
}
}
}
}
obj* l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__5;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; obj* x_38; 
x_38 = l_Lean_Parser_Syntax_asNode___main(x_28);
if (lean::obj_tag(x_38) == 0)
{
obj* x_39; 
x_39 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__4;
x_36 = x_39;
goto lbl_37;
}
else
{
obj* x_40; obj* x_42; obj* x_43; 
x_40 = lean::cnstr_get(x_38, 0);
if (lean::is_exclusive(x_38)) {
 lean::cnstr_set(x_38, 0, lean::box(0));
 x_42 = x_38;
} else {
 lean::inc(x_40);
 lean::dec(x_38);
 x_42 = lean::box(0);
}
x_43 = lean::cnstr_get(x_40, 1);
lean::inc(x_43);
lean::dec(x_40);
if (lean::obj_tag(x_43) == 0)
{
obj* x_47; 
lean::dec(x_42);
x_47 = lean::box(0);
x_36 = x_47;
goto lbl_37;
}
else
{
obj* x_48; 
x_48 = lean::cnstr_get(x_43, 1);
lean::inc(x_48);
if (lean::obj_tag(x_48) == 0)
{
obj* x_50; obj* x_53; obj* x_54; obj* x_57; obj* x_58; 
x_50 = lean::cnstr_get(x_43, 0);
lean::inc(x_50);
lean::dec(x_43);
x_53 = l_Lean_Parser_Term_structInstType_HasView;
x_54 = lean::cnstr_get(x_53, 0);
lean::inc(x_54);
lean::dec(x_53);
x_57 = lean::apply_1(x_54, x_50);
if (lean::is_scalar(x_42)) {
 x_58 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_58 = x_42;
}
lean::cnstr_set(x_58, 0, x_57);
x_36 = x_58;
goto lbl_37;
}
else
{
obj* x_62; 
lean::dec(x_42);
lean::dec(x_43);
lean::dec(x_48);
x_62 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__4;
x_36 = x_62;
goto lbl_37;
}
}
}
lbl_37:
{
obj* x_63; obj* x_64; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_66; 
x_66 = lean::box(3);
x_63 = x_27;
x_64 = x_66;
goto lbl_65;
}
else
{
obj* x_67; obj* x_69; 
x_67 = lean::cnstr_get(x_27, 0);
lean::inc(x_67);
x_69 = lean::cnstr_get(x_27, 1);
lean::inc(x_69);
lean::dec(x_27);
x_63 = x_69;
x_64 = x_67;
goto lbl_65;
}
lbl_65:
{
obj* x_72; obj* x_74; 
x_74 = l_Lean_Parser_Syntax_asNode___main(x_64);
if (lean::obj_tag(x_74) == 0)
{
obj* x_75; 
x_75 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__3;
x_72 = x_75;
goto lbl_73;
}
else
{
obj* x_76; obj* x_78; obj* x_79; 
x_76 = lean::cnstr_get(x_74, 0);
if (lean::is_exclusive(x_74)) {
 lean::cnstr_set(x_74, 0, lean::box(0));
 x_78 = x_74;
} else {
 lean::inc(x_76);
 lean::dec(x_74);
 x_78 = lean::box(0);
}
x_79 = lean::cnstr_get(x_76, 1);
lean::inc(x_79);
lean::dec(x_76);
if (lean::obj_tag(x_79) == 0)
{
obj* x_83; 
lean::dec(x_78);
x_83 = lean::box(0);
x_72 = x_83;
goto lbl_73;
}
else
{
obj* x_84; 
x_84 = lean::cnstr_get(x_79, 1);
lean::inc(x_84);
if (lean::obj_tag(x_84) == 0)
{
obj* x_86; obj* x_89; obj* x_90; obj* x_93; obj* x_94; 
x_86 = lean::cnstr_get(x_79, 0);
lean::inc(x_86);
lean::dec(x_79);
x_89 = l_Lean_Parser_Term_structInstWith_HasView;
x_90 = lean::cnstr_get(x_89, 0);
lean::inc(x_90);
lean::dec(x_89);
x_93 = lean::apply_1(x_90, x_86);
if (lean::is_scalar(x_78)) {
 x_94 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_94 = x_78;
}
lean::cnstr_set(x_94, 0, x_93);
x_72 = x_94;
goto lbl_73;
}
else
{
obj* x_98; 
lean::dec(x_78);
lean::dec(x_79);
lean::dec(x_84);
x_98 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__3;
x_72 = x_98;
goto lbl_73;
}
}
}
lbl_73:
{
obj* x_99; obj* x_100; 
if (lean::obj_tag(x_63) == 0)
{
obj* x_102; 
x_102 = lean::box(3);
x_99 = x_63;
x_100 = x_102;
goto lbl_101;
}
else
{
obj* x_103; obj* x_105; 
x_103 = lean::cnstr_get(x_63, 0);
lean::inc(x_103);
x_105 = lean::cnstr_get(x_63, 1);
lean::inc(x_105);
lean::dec(x_63);
x_99 = x_105;
x_100 = x_103;
goto lbl_101;
}
lbl_101:
{
obj* x_108; 
x_108 = l_Lean_Parser_Syntax_asNode___main(x_100);
if (lean::obj_tag(x_108) == 0)
{
obj* x_109; 
x_109 = lean::box(0);
if (lean::obj_tag(x_99) == 0)
{
obj* x_110; obj* x_111; 
x_110 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__1;
x_111 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_111, 0, x_18);
lean::cnstr_set(x_111, 1, x_36);
lean::cnstr_set(x_111, 2, x_72);
lean::cnstr_set(x_111, 3, x_110);
lean::cnstr_set(x_111, 4, x_109);
return x_111;
}
else
{
obj* x_112; 
x_112 = lean::cnstr_get(x_99, 0);
lean::inc(x_112);
lean::dec(x_99);
switch (lean::obj_tag(x_112)) {
case 0:
{
obj* x_115; obj* x_118; obj* x_119; obj* x_120; 
x_115 = lean::cnstr_get(x_112, 0);
lean::inc(x_115);
lean::dec(x_112);
x_118 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_118, 0, x_115);
x_119 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__1;
x_120 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_120, 0, x_18);
lean::cnstr_set(x_120, 1, x_36);
lean::cnstr_set(x_120, 2, x_72);
lean::cnstr_set(x_120, 3, x_119);
lean::cnstr_set(x_120, 4, x_118);
return x_120;
}
case 3:
{
obj* x_121; obj* x_122; 
x_121 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__1;
x_122 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_122, 0, x_18);
lean::cnstr_set(x_122, 1, x_36);
lean::cnstr_set(x_122, 2, x_72);
lean::cnstr_set(x_122, 3, x_121);
lean::cnstr_set(x_122, 4, x_109);
return x_122;
}
default:
{
obj* x_124; obj* x_125; 
lean::dec(x_112);
x_124 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__1;
x_125 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_125, 0, x_18);
lean::cnstr_set(x_125, 1, x_36);
lean::cnstr_set(x_125, 2, x_72);
lean::cnstr_set(x_125, 3, x_124);
lean::cnstr_set(x_125, 4, x_109);
return x_125;
}
}
}
}
else
{
obj* x_126; obj* x_128; obj* x_129; obj* x_132; obj* x_133; obj* x_134; 
x_126 = lean::cnstr_get(x_108, 0);
if (lean::is_exclusive(x_108)) {
 lean::cnstr_set(x_108, 0, lean::box(0));
 x_128 = x_108;
} else {
 lean::inc(x_126);
 lean::dec(x_108);
 x_128 = lean::box(0);
}
x_129 = lean::cnstr_get(x_126, 1);
lean::inc(x_129);
lean::dec(x_126);
x_132 = l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__2;
x_133 = l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__3;
x_134 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_structInst_HasView_x_27___spec__1(x_132, x_133, x_129);
if (lean::obj_tag(x_99) == 0)
{
obj* x_136; obj* x_137; 
lean::dec(x_128);
x_136 = lean::box(0);
x_137 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_137, 0, x_18);
lean::cnstr_set(x_137, 1, x_36);
lean::cnstr_set(x_137, 2, x_72);
lean::cnstr_set(x_137, 3, x_134);
lean::cnstr_set(x_137, 4, x_136);
return x_137;
}
else
{
obj* x_138; 
x_138 = lean::cnstr_get(x_99, 0);
lean::inc(x_138);
lean::dec(x_99);
switch (lean::obj_tag(x_138)) {
case 0:
{
obj* x_141; obj* x_144; obj* x_145; 
x_141 = lean::cnstr_get(x_138, 0);
lean::inc(x_141);
lean::dec(x_138);
if (lean::is_scalar(x_128)) {
 x_144 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_144 = x_128;
}
lean::cnstr_set(x_144, 0, x_141);
x_145 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_145, 0, x_18);
lean::cnstr_set(x_145, 1, x_36);
lean::cnstr_set(x_145, 2, x_72);
lean::cnstr_set(x_145, 3, x_134);
lean::cnstr_set(x_145, 4, x_144);
return x_145;
}
case 3:
{
obj* x_147; obj* x_148; 
lean::dec(x_128);
x_147 = lean::box(0);
x_148 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_148, 0, x_18);
lean::cnstr_set(x_148, 1, x_36);
lean::cnstr_set(x_148, 2, x_72);
lean::cnstr_set(x_148, 3, x_134);
lean::cnstr_set(x_148, 4, x_147);
return x_148;
}
default:
{
obj* x_151; obj* x_152; 
lean::dec(x_138);
lean::dec(x_128);
x_151 = lean::box(0);
x_152 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_152, 0, x_18);
lean::cnstr_set(x_152, 1, x_36);
lean::cnstr_set(x_152, 2, x_72);
lean::cnstr_set(x_152, 3, x_134);
lean::cnstr_set(x_152, 4, x_151);
return x_152;
}
}
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_structInst_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInst_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_structInst_HasView_x_27___spec__1___boxed(obj* x_0, obj* x_1, obj* x_2) {
_start:
{
obj* x_3; 
x_3 = l___private_init_lean_parser_combinators_3__sepBy_viewAux___main___at_Lean_Parser_Term_structInst_HasView_x_27___spec__1(x_0, x_1, x_2);
lean::dec(x_0);
lean::dec(x_1);
return x_3;
}
}
obj* _init_l_Lean_Parser_Term_structInst_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_structInst_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_11; obj* x_13; obj* x_15; obj* x_17; obj* x_19; obj* x_20; obj* x_21; obj* x_23; obj* x_25; obj* x_27; obj* x_29; obj* x_31; obj* x_33; obj* x_34; obj* x_36; obj* x_37; obj* x_40; obj* x_42; obj* x_44; obj* x_45; obj* x_47; obj* x_49; obj* x_51; obj* x_54; obj* x_56; obj* x_58; obj* x_61; obj* x_63; obj* x_65; obj* x_67; obj* x_68; obj* x_70; obj* x_73; obj* x_74; obj* x_76; obj* x_78; obj* x_81; obj* x_84; obj* x_87; obj* x_90; 
x_0 = lean::mk_string("{");
x_1 = l_Lean_Parser_maxPrec;
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = lean::box(0);
x_5 = lean::mk_string(" . ");
x_6 = lean::mk_nat_obj(0ul);
x_7 = l_Lean_Parser_symbol_tokens___rarg(x_5, x_6);
lean::dec(x_5);
x_9 = l_Lean_Parser_List_cons_tokens___rarg(x_7, x_4);
lean::dec(x_7);
x_11 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_9);
lean::dec(x_9);
x_13 = l_Lean_Parser_tokens___rarg(x_11);
lean::dec(x_11);
x_15 = l_Lean_Parser_tokens___rarg(x_13);
lean::dec(x_13);
x_17 = l_Lean_Parser_tokens___rarg(x_15);
lean::dec(x_15);
x_19 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_6);
x_20 = lean::mk_string(" with ");
x_21 = l_Lean_Parser_symbol_tokens___rarg(x_20, x_6);
lean::dec(x_20);
x_23 = l_Lean_Parser_List_cons_tokens___rarg(x_21, x_4);
lean::dec(x_21);
x_25 = l_Lean_Parser_List_cons_tokens___rarg(x_19, x_23);
lean::dec(x_23);
x_27 = l_Lean_Parser_tokens___rarg(x_25);
lean::dec(x_25);
x_29 = l_Lean_Parser_tokens___rarg(x_27);
lean::dec(x_27);
x_31 = l_Lean_Parser_tokens___rarg(x_29);
lean::dec(x_29);
x_33 = lean::mk_string(" := ");
x_34 = l_Lean_Parser_symbol_tokens___rarg(x_33, x_6);
lean::dec(x_33);
x_36 = l_Lean_Parser_List_cons_tokens___rarg(x_19, x_4);
x_37 = l_Lean_Parser_List_cons_tokens___rarg(x_34, x_36);
lean::dec(x_36);
lean::dec(x_34);
x_40 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_37);
lean::dec(x_37);
x_42 = l_Lean_Parser_tokens___rarg(x_40);
lean::dec(x_40);
x_44 = lean::mk_string("..");
x_45 = l_Lean_Parser_symbol_tokens___rarg(x_44, x_6);
lean::dec(x_44);
x_47 = l_Lean_Parser_tokens___rarg(x_19);
lean::dec(x_19);
x_49 = l_Lean_Parser_List_cons_tokens___rarg(x_47, x_4);
lean::dec(x_47);
x_51 = l_Lean_Parser_List_cons_tokens___rarg(x_45, x_49);
lean::dec(x_49);
lean::dec(x_45);
x_54 = l_Lean_Parser_tokens___rarg(x_51);
lean::dec(x_51);
x_56 = l_Lean_Parser_List_cons_tokens___rarg(x_54, x_4);
lean::dec(x_54);
x_58 = l_Lean_Parser_List_cons_tokens___rarg(x_42, x_56);
lean::dec(x_56);
lean::dec(x_42);
x_61 = l_Lean_Parser_tokens___rarg(x_58);
lean::dec(x_58);
x_63 = l_Lean_Parser_List_cons_tokens___rarg(x_61, x_4);
lean::dec(x_61);
x_65 = l_Lean_Parser_tokens___rarg(x_63);
lean::dec(x_63);
x_67 = lean::mk_string(", ");
x_68 = l_Lean_Parser_symbol_tokens___rarg(x_67, x_6);
lean::dec(x_67);
x_70 = l_Lean_Parser_Combinators_sepBy_tokens___rarg(x_65, x_68);
lean::dec(x_68);
lean::dec(x_65);
x_73 = lean::mk_string("}");
x_74 = l_Lean_Parser_symbol_tokens___rarg(x_73, x_6);
lean::dec(x_73);
x_76 = l_Lean_Parser_List_cons_tokens___rarg(x_74, x_4);
lean::dec(x_74);
x_78 = l_Lean_Parser_List_cons_tokens___rarg(x_70, x_76);
lean::dec(x_76);
lean::dec(x_70);
x_81 = l_Lean_Parser_List_cons_tokens___rarg(x_31, x_78);
lean::dec(x_78);
lean::dec(x_31);
x_84 = l_Lean_Parser_List_cons_tokens___rarg(x_17, x_81);
lean::dec(x_81);
lean::dec(x_17);
x_87 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_84);
lean::dec(x_84);
lean::dec(x_2);
x_90 = l_Lean_Parser_tokens___rarg(x_87);
lean::dec(x_87);
return x_90;
}
}
obj* l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasView___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_14; 
x_6 = l_Lean_Parser_Term_structInstType;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_6, x_0, x_1, x_2, x_3, x_4, x_5);
x_8 = lean::cnstr_get(x_7, 0);
x_10 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 x_12 = x_7;
} else {
 lean::inc(x_8);
 lean::inc(x_10);
 lean::dec(x_7);
 x_12 = lean::box(0);
}
x_13 = l_Lean_Parser_ParsecT_tryMkRes___rarg(x_8);
if (lean::is_scalar(x_12)) {
 x_14 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_14 = x_12;
}
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_10);
return x_14;
}
}
obj* l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasView___lambda__2(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_12; obj* x_13; obj* x_14; 
x_6 = l_Lean_Parser_Term_structInstWith;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_6, x_0, x_1, x_2, x_3, x_4, x_5);
x_8 = lean::cnstr_get(x_7, 0);
x_10 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 x_12 = x_7;
} else {
 lean::inc(x_8);
 lean::inc(x_10);
 lean::dec(x_7);
 x_12 = lean::box(0);
}
x_13 = l_Lean_Parser_ParsecT_tryMkRes___rarg(x_8);
if (lean::is_scalar(x_12)) {
 x_14 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_14 = x_12;
}
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_10);
return x_14;
}
}
obj* _init_l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_19; uint8 x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_29; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_36; obj* x_37; obj* x_38; obj* x_41; obj* x_42; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_70; obj* x_71; uint8 x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; 
x_0 = lean::mk_string("{");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_string(" . ");
x_8 = l_String_trim(x_7);
lean::dec(x_7);
lean::inc(x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_11, 0, x_8);
x_12 = lean::mk_nat_obj(0ul);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_13, 0, x_8);
lean::closure_set(x_13, 1, x_12);
lean::closure_set(x_13, 2, x_11);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
lean::inc(x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_15);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasView___lambda__1), 6, 1);
lean::closure_set(x_19, 0, x_18);
x_20 = 0;
x_21 = lean::box(x_20);
lean::inc(x_21);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_23, 0, x_19);
lean::closure_set(x_23, 1, x_21);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_24, 0, x_12);
x_25 = lean::mk_string(" with ");
x_26 = l_String_trim(x_25);
lean::dec(x_25);
lean::inc(x_26);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_29, 0, x_26);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_30, 0, x_26);
lean::closure_set(x_30, 1, x_12);
lean::closure_set(x_30, 2, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_14);
lean::inc(x_24);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_24);
lean::cnstr_set(x_33, 1, x_31);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasView___lambda__2), 6, 1);
lean::closure_set(x_34, 0, x_33);
lean::inc(x_21);
x_36 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_36, 0, x_34);
lean::closure_set(x_36, 1, x_21);
x_37 = lean::mk_string(" := ");
x_38 = l_String_trim(x_37);
lean::dec(x_37);
lean::inc(x_38);
x_41 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_41, 0, x_38);
x_42 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_42, 0, x_38);
lean::closure_set(x_42, 1, x_12);
lean::closure_set(x_42, 2, x_41);
lean::inc(x_24);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_24);
lean::cnstr_set(x_44, 1, x_14);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_42);
lean::cnstr_set(x_45, 1, x_44);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_16);
lean::cnstr_set(x_46, 1, x_45);
x_47 = l_Lean_Parser_Term_structInstField;
x_48 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_48, 0, x_47);
lean::closure_set(x_48, 1, x_46);
x_49 = lean::mk_string("..");
x_50 = l_String_trim(x_49);
lean::dec(x_49);
lean::inc(x_50);
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_53, 0, x_50);
x_54 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_54, 0, x_50);
lean::closure_set(x_54, 1, x_12);
lean::closure_set(x_54, 2, x_53);
x_55 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_55, 0, x_24);
lean::closure_set(x_55, 1, x_21);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_55);
lean::cnstr_set(x_56, 1, x_14);
x_57 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_57, 0, x_54);
lean::cnstr_set(x_57, 1, x_56);
x_58 = l_Lean_Parser_Term_structInstSource;
x_59 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_59, 0, x_58);
lean::closure_set(x_59, 1, x_57);
x_60 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_60, 0, x_59);
lean::cnstr_set(x_60, 1, x_14);
x_61 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_61, 0, x_48);
lean::cnstr_set(x_61, 1, x_60);
x_62 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_62, 0, x_61);
lean::closure_set(x_62, 1, x_12);
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_62);
lean::cnstr_set(x_63, 1, x_14);
x_64 = l_Lean_Parser_Term_structInstItem;
x_65 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_65, 0, x_64);
lean::closure_set(x_65, 1, x_63);
x_66 = lean::mk_string(", ");
x_67 = l_String_trim(x_66);
lean::dec(x_66);
lean::inc(x_67);
x_70 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_70, 0, x_67);
x_71 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_71, 0, x_67);
lean::closure_set(x_71, 1, x_12);
lean::closure_set(x_71, 2, x_70);
x_72 = 1;
x_73 = lean::box(x_72);
x_74 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_sepBy___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_74, 0, x_65);
lean::closure_set(x_74, 1, x_71);
lean::closure_set(x_74, 2, x_73);
x_75 = lean::mk_string("}");
x_76 = l_String_trim(x_75);
lean::dec(x_75);
lean::inc(x_76);
x_79 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_79, 0, x_76);
x_80 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_80, 0, x_76);
lean::closure_set(x_80, 1, x_12);
lean::closure_set(x_80, 2, x_79);
x_81 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_81, 0, x_80);
lean::cnstr_set(x_81, 1, x_14);
x_82 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_82, 0, x_74);
lean::cnstr_set(x_82, 1, x_81);
x_83 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_83, 0, x_36);
lean::cnstr_set(x_83, 1, x_82);
x_84 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_84, 0, x_23);
lean::cnstr_set(x_84, 1, x_83);
x_85 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_85, 0, x_6);
lean::cnstr_set(x_85, 1, x_84);
x_86 = l_Lean_Parser_TermParserM_Monad;
x_87 = l_Lean_Parser_TermParserM_MonadExcept;
x_88 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_89 = l_Lean_Parser_TermParserM_Alternative;
x_90 = l_Lean_Parser_Term_structInst;
x_91 = l_Lean_Parser_Term_structInst_HasView;
x_92 = l_Lean_Parser_Combinators_node_view___rarg(x_86, x_87, x_88, x_89, x_90, x_85, x_91);
lean::dec(x_85);
return x_92;
}
}
obj* _init_l_Lean_Parser_Term_structInst_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_19; uint8 x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_29; obj* x_30; obj* x_31; obj* x_33; obj* x_34; obj* x_36; obj* x_37; obj* x_38; obj* x_41; obj* x_42; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_70; obj* x_71; uint8 x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; 
x_0 = lean::mk_string("{");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_string(" . ");
x_8 = l_String_trim(x_7);
lean::dec(x_7);
lean::inc(x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_11, 0, x_8);
x_12 = lean::mk_nat_obj(0ul);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_13, 0, x_8);
lean::closure_set(x_13, 1, x_12);
lean::closure_set(x_13, 2, x_11);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_13);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
lean::inc(x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_16);
lean::cnstr_set(x_18, 1, x_15);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasView___lambda__1), 6, 1);
lean::closure_set(x_19, 0, x_18);
x_20 = 0;
x_21 = lean::box(x_20);
lean::inc(x_21);
x_23 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_23, 0, x_19);
lean::closure_set(x_23, 1, x_21);
x_24 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_24, 0, x_12);
x_25 = lean::mk_string(" with ");
x_26 = l_String_trim(x_25);
lean::dec(x_25);
lean::inc(x_26);
x_29 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_29, 0, x_26);
x_30 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_30, 0, x_26);
lean::closure_set(x_30, 1, x_12);
lean::closure_set(x_30, 2, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_30);
lean::cnstr_set(x_31, 1, x_14);
lean::inc(x_24);
x_33 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_33, 0, x_24);
lean::cnstr_set(x_33, 1, x_31);
x_34 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasView___lambda__2), 6, 1);
lean::closure_set(x_34, 0, x_33);
lean::inc(x_21);
x_36 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_36, 0, x_34);
lean::closure_set(x_36, 1, x_21);
x_37 = lean::mk_string(" := ");
x_38 = l_String_trim(x_37);
lean::dec(x_37);
lean::inc(x_38);
x_41 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_41, 0, x_38);
x_42 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_42, 0, x_38);
lean::closure_set(x_42, 1, x_12);
lean::closure_set(x_42, 2, x_41);
lean::inc(x_24);
x_44 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_44, 0, x_24);
lean::cnstr_set(x_44, 1, x_14);
x_45 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_45, 0, x_42);
lean::cnstr_set(x_45, 1, x_44);
x_46 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_46, 0, x_16);
lean::cnstr_set(x_46, 1, x_45);
x_47 = l_Lean_Parser_Term_structInstField;
x_48 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_48, 0, x_47);
lean::closure_set(x_48, 1, x_46);
x_49 = lean::mk_string("..");
x_50 = l_String_trim(x_49);
lean::dec(x_49);
lean::inc(x_50);
x_53 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_53, 0, x_50);
x_54 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_54, 0, x_50);
lean::closure_set(x_54, 1, x_12);
lean::closure_set(x_54, 2, x_53);
x_55 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_optional___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__7___boxed), 7, 2);
lean::closure_set(x_55, 0, x_24);
lean::closure_set(x_55, 1, x_21);
x_56 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_56, 0, x_55);
lean::cnstr_set(x_56, 1, x_14);
x_57 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_57, 0, x_54);
lean::cnstr_set(x_57, 1, x_56);
x_58 = l_Lean_Parser_Term_structInstSource;
x_59 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_59, 0, x_58);
lean::closure_set(x_59, 1, x_57);
x_60 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_60, 0, x_59);
lean::cnstr_set(x_60, 1, x_14);
x_61 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_61, 0, x_48);
lean::cnstr_set(x_61, 1, x_60);
x_62 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__3), 7, 2);
lean::closure_set(x_62, 0, x_61);
lean::closure_set(x_62, 1, x_12);
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_62);
lean::cnstr_set(x_63, 1, x_14);
x_64 = l_Lean_Parser_Term_structInstItem;
x_65 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1), 7, 2);
lean::closure_set(x_65, 0, x_64);
lean::closure_set(x_65, 1, x_63);
x_66 = lean::mk_string(", ");
x_67 = l_String_trim(x_66);
lean::dec(x_66);
lean::inc(x_67);
x_70 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_70, 0, x_67);
x_71 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_71, 0, x_67);
lean::closure_set(x_71, 1, x_12);
lean::closure_set(x_71, 2, x_70);
x_72 = 1;
x_73 = lean::box(x_72);
x_74 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_sepBy___at_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_74, 0, x_65);
lean::closure_set(x_74, 1, x_71);
lean::closure_set(x_74, 2, x_73);
x_75 = lean::mk_string("}");
x_76 = l_String_trim(x_75);
lean::dec(x_75);
lean::inc(x_76);
x_79 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_79, 0, x_76);
x_80 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_80, 0, x_76);
lean::closure_set(x_80, 1, x_12);
lean::closure_set(x_80, 2, x_79);
x_81 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_81, 0, x_80);
lean::cnstr_set(x_81, 1, x_14);
x_82 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_82, 0, x_74);
lean::cnstr_set(x_82, 1, x_81);
x_83 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_83, 0, x_36);
lean::cnstr_set(x_83, 1, x_82);
x_84 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_84, 0, x_23);
lean::cnstr_set(x_84, 1, x_83);
x_85 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_85, 0, x_6);
lean::cnstr_set(x_85, 1, x_84);
return x_85;
}
}
obj* l_Lean_Parser_Term_structInst_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_structInst;
x_6 = l_Lean_Parser_Term_structInst_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_Subtype() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("Subtype");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_Subtype_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_7; obj* x_9; obj* x_11; obj* x_14; obj* x_15; obj* x_16; obj* x_18; obj* x_19; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 3);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 4);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_0, 5);
lean::inc(x_11);
lean::dec(x_0);
x_14 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_14, 0, x_3);
x_15 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_21; 
x_21 = lean::box(3);
x_16 = x_21;
goto lbl_17;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_5, 0);
lean::inc(x_22);
lean::dec(x_5);
x_25 = lean::box(3);
x_18 = x_25;
x_19 = x_22;
goto lbl_20;
}
}
else
{
obj* x_26; obj* x_29; 
x_26 = lean::cnstr_get(x_1, 0);
lean::inc(x_26);
lean::dec(x_1);
x_29 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_29, 0, x_26);
if (lean::obj_tag(x_5) == 0)
{
x_16 = x_29;
goto lbl_17;
}
else
{
obj* x_30; 
x_30 = lean::cnstr_get(x_5, 0);
lean::inc(x_30);
lean::dec(x_5);
x_18 = x_29;
x_19 = x_30;
goto lbl_20;
}
}
lbl_17:
{
if (lean::obj_tag(x_7) == 0)
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_33; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
x_33 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_34 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_34, 0, x_9);
lean::cnstr_set(x_34, 1, x_33);
x_35 = lean::box(3);
x_36 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_34);
x_37 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_36);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_14);
lean::cnstr_set(x_39, 1, x_38);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_16);
lean::cnstr_set(x_40, 1, x_39);
x_41 = l_Lean_Parser_Term_Subtype;
x_42 = l_Lean_Parser_Syntax_mkNode(x_41, x_40);
return x_42;
}
else
{
obj* x_43; obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; 
x_43 = lean::cnstr_get(x_11, 0);
lean::inc(x_43);
lean::dec(x_11);
x_46 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_46, 0, x_43);
x_47 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_47, 0, x_46);
lean::cnstr_set(x_47, 1, x_15);
x_48 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_48, 0, x_9);
lean::cnstr_set(x_48, 1, x_47);
x_49 = lean::box(3);
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_49);
lean::cnstr_set(x_50, 1, x_48);
x_51 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_52 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_50);
x_53 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_53, 0, x_14);
lean::cnstr_set(x_53, 1, x_52);
x_54 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_54, 0, x_16);
lean::cnstr_set(x_54, 1, x_53);
x_55 = l_Lean_Parser_Term_Subtype;
x_56 = l_Lean_Parser_Syntax_mkNode(x_55, x_54);
return x_56;
}
}
else
{
obj* x_57; obj* x_60; 
x_57 = lean::cnstr_get(x_7, 0);
lean::inc(x_57);
lean::dec(x_7);
x_60 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_60, 0, x_57);
if (lean::obj_tag(x_11) == 0)
{
obj* x_61; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; 
x_61 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_62 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_62, 0, x_9);
lean::cnstr_set(x_62, 1, x_61);
x_63 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_63, 0, x_60);
lean::cnstr_set(x_63, 1, x_62);
x_64 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_65 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_65, 0, x_64);
lean::cnstr_set(x_65, 1, x_63);
x_66 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_66, 0, x_14);
lean::cnstr_set(x_66, 1, x_65);
x_67 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_67, 0, x_16);
lean::cnstr_set(x_67, 1, x_66);
x_68 = l_Lean_Parser_Term_Subtype;
x_69 = l_Lean_Parser_Syntax_mkNode(x_68, x_67);
return x_69;
}
else
{
obj* x_70; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; 
x_70 = lean::cnstr_get(x_11, 0);
lean::inc(x_70);
lean::dec(x_11);
x_73 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_73, 0, x_70);
x_74 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_74, 0, x_73);
lean::cnstr_set(x_74, 1, x_15);
x_75 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_75, 0, x_9);
lean::cnstr_set(x_75, 1, x_74);
x_76 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_76, 0, x_60);
lean::cnstr_set(x_76, 1, x_75);
x_77 = l_Lean_Parser_Combinators_many___rarg___closed__1;
x_78 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_78, 0, x_77);
lean::cnstr_set(x_78, 1, x_76);
x_79 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_79, 0, x_14);
lean::cnstr_set(x_79, 1, x_78);
x_80 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_80, 0, x_16);
lean::cnstr_set(x_80, 1, x_79);
x_81 = l_Lean_Parser_Term_Subtype;
x_82 = l_Lean_Parser_Syntax_mkNode(x_81, x_80);
return x_82;
}
}
}
lbl_20:
{
obj* x_83; obj* x_84; obj* x_87; obj* x_88; obj* x_89; obj* x_90; 
x_83 = l_Lean_Parser_Term_typeSpec_HasView;
x_84 = lean::cnstr_get(x_83, 1);
lean::inc(x_84);
lean::dec(x_83);
x_87 = lean::apply_1(x_84, x_19);
x_88 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_88, 0, x_87);
lean::cnstr_set(x_88, 1, x_15);
x_89 = l_Lean_Parser_noKind;
x_90 = l_Lean_Parser_Syntax_mkNode(x_89, x_88);
if (lean::obj_tag(x_7) == 0)
{
if (lean::obj_tag(x_11) == 0)
{
obj* x_91; obj* x_92; obj* x_93; obj* x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; obj* x_99; 
x_91 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_92 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_92, 0, x_9);
lean::cnstr_set(x_92, 1, x_91);
x_93 = lean::box(3);
x_94 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_94, 0, x_93);
lean::cnstr_set(x_94, 1, x_92);
x_95 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_95, 0, x_90);
lean::cnstr_set(x_95, 1, x_94);
x_96 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_96, 0, x_14);
lean::cnstr_set(x_96, 1, x_95);
x_97 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_97, 0, x_18);
lean::cnstr_set(x_97, 1, x_96);
x_98 = l_Lean_Parser_Term_Subtype;
x_99 = l_Lean_Parser_Syntax_mkNode(x_98, x_97);
return x_99;
}
else
{
obj* x_100; obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; 
x_100 = lean::cnstr_get(x_11, 0);
lean::inc(x_100);
lean::dec(x_11);
x_103 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_103, 0, x_100);
x_104 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_104, 0, x_103);
lean::cnstr_set(x_104, 1, x_15);
x_105 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_105, 0, x_9);
lean::cnstr_set(x_105, 1, x_104);
x_106 = lean::box(3);
x_107 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_107, 0, x_106);
lean::cnstr_set(x_107, 1, x_105);
x_108 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_108, 0, x_90);
lean::cnstr_set(x_108, 1, x_107);
x_109 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_109, 0, x_14);
lean::cnstr_set(x_109, 1, x_108);
x_110 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_110, 0, x_18);
lean::cnstr_set(x_110, 1, x_109);
x_111 = l_Lean_Parser_Term_Subtype;
x_112 = l_Lean_Parser_Syntax_mkNode(x_111, x_110);
return x_112;
}
}
else
{
obj* x_113; obj* x_116; 
x_113 = lean::cnstr_get(x_7, 0);
lean::inc(x_113);
lean::dec(x_7);
x_116 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_116, 0, x_113);
if (lean::obj_tag(x_11) == 0)
{
obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; 
x_117 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_118 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_118, 0, x_9);
lean::cnstr_set(x_118, 1, x_117);
x_119 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_119, 0, x_116);
lean::cnstr_set(x_119, 1, x_118);
x_120 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_120, 0, x_90);
lean::cnstr_set(x_120, 1, x_119);
x_121 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_121, 0, x_14);
lean::cnstr_set(x_121, 1, x_120);
x_122 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_122, 0, x_18);
lean::cnstr_set(x_122, 1, x_121);
x_123 = l_Lean_Parser_Term_Subtype;
x_124 = l_Lean_Parser_Syntax_mkNode(x_123, x_122);
return x_124;
}
else
{
obj* x_125; obj* x_128; obj* x_129; obj* x_130; obj* x_131; obj* x_132; obj* x_133; obj* x_134; obj* x_135; obj* x_136; 
x_125 = lean::cnstr_get(x_11, 0);
lean::inc(x_125);
lean::dec(x_11);
x_128 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_128, 0, x_125);
x_129 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_129, 0, x_128);
lean::cnstr_set(x_129, 1, x_15);
x_130 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_130, 0, x_9);
lean::cnstr_set(x_130, 1, x_129);
x_131 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_131, 0, x_116);
lean::cnstr_set(x_131, 1, x_130);
x_132 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_132, 0, x_90);
lean::cnstr_set(x_132, 1, x_131);
x_133 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_133, 0, x_14);
lean::cnstr_set(x_133, 1, x_132);
x_134 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_134, 0, x_18);
lean::cnstr_set(x_134, 1, x_133);
x_135 = l_Lean_Parser_Term_Subtype;
x_136 = l_Lean_Parser_Syntax_mkNode(x_135, x_134);
return x_136;
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_Subtype_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = l_Lean_Parser_Syntax_asNode___main(x_1);
if (lean::obj_tag(x_2) == 0)
{
obj* x_3; obj* x_4; obj* x_5; 
x_3 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_4 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_5 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_5, 0, x_0);
lean::cnstr_set(x_5, 1, x_3);
lean::cnstr_set(x_5, 2, x_4);
lean::cnstr_set(x_5, 3, x_0);
lean::cnstr_set(x_5, 4, x_1);
lean::cnstr_set(x_5, 5, x_0);
return x_5;
}
else
{
obj* x_6; obj* x_8; obj* x_9; 
x_6 = lean::cnstr_get(x_2, 0);
if (lean::is_exclusive(x_2)) {
 lean::cnstr_set(x_2, 0, lean::box(0));
 x_8 = x_2;
} else {
 lean::inc(x_6);
 lean::dec(x_2);
 x_8 = lean::box(0);
}
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_13; obj* x_14; 
lean::dec(x_8);
x_13 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_14 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_14, 0, x_0);
lean::cnstr_set(x_14, 1, x_13);
lean::cnstr_set(x_14, 2, x_0);
lean::cnstr_set(x_14, 3, x_0);
lean::cnstr_set(x_14, 4, x_1);
lean::cnstr_set(x_14, 5, x_0);
return x_14;
}
else
{
obj* x_15; 
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
if (lean::obj_tag(x_15) == 0)
{
obj* x_17; obj* x_20; obj* x_21; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_17 = lean::cnstr_get(x_9, 0);
lean::inc(x_17);
lean::dec(x_9);
x_20 = l_Lean_Parser_Term_typeSpec_HasView;
x_21 = lean::cnstr_get(x_20, 0);
lean::inc(x_21);
lean::dec(x_20);
x_24 = lean::apply_1(x_21, x_17);
if (lean::is_scalar(x_8)) {
 x_25 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_25 = x_8;
}
lean::cnstr_set(x_25, 0, x_24);
x_26 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_27 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_27, 0, x_0);
lean::cnstr_set(x_27, 1, x_26);
lean::cnstr_set(x_27, 2, x_25);
lean::cnstr_set(x_27, 3, x_0);
lean::cnstr_set(x_27, 4, x_1);
lean::cnstr_set(x_27, 5, x_0);
return x_27;
}
else
{
obj* x_31; obj* x_32; obj* x_33; 
lean::dec(x_9);
lean::dec(x_8);
lean::dec(x_15);
x_31 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_32 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_33 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_33, 0, x_0);
lean::cnstr_set(x_33, 1, x_31);
lean::cnstr_set(x_33, 2, x_32);
lean::cnstr_set(x_33, 3, x_0);
lean::cnstr_set(x_33, 4, x_1);
lean::cnstr_set(x_33, 5, x_0);
return x_33;
}
}
}
}
}
obj* l_Lean_Parser_Term_Subtype_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_Subtype_HasView_x_27___lambda__1___closed__1;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; 
switch (lean::obj_tag(x_2)) {
case 0:
{
obj* x_20; obj* x_23; 
x_20 = lean::cnstr_get(x_2, 0);
lean::inc(x_20);
lean::dec(x_2);
x_23 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_18 = x_23;
goto lbl_19;
}
case 3:
{
obj* x_24; 
x_24 = lean::box(0);
x_18 = x_24;
goto lbl_19;
}
default:
{
obj* x_26; 
lean::dec(x_2);
x_26 = lean::box(0);
x_18 = x_26;
goto lbl_19;
}
}
lbl_19:
{
obj* x_27; obj* x_28; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_30; 
x_30 = lean::box(3);
x_27 = x_1;
x_28 = x_30;
goto lbl_29;
}
else
{
obj* x_31; obj* x_33; 
x_31 = lean::cnstr_get(x_1, 0);
lean::inc(x_31);
x_33 = lean::cnstr_get(x_1, 1);
lean::inc(x_33);
lean::dec(x_1);
x_27 = x_33;
x_28 = x_31;
goto lbl_29;
}
lbl_29:
{
obj* x_36; 
switch (lean::obj_tag(x_28)) {
case 1:
{
obj* x_38; 
x_38 = lean::cnstr_get(x_28, 0);
lean::inc(x_38);
lean::dec(x_28);
x_36 = x_38;
goto lbl_37;
}
case 3:
{
obj* x_41; 
x_41 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_36 = x_41;
goto lbl_37;
}
default:
{
obj* x_43; 
lean::dec(x_28);
x_43 = l_Lean_Parser_ident_Parser_View___rarg___lambda__1___closed__1;
x_36 = x_43;
goto lbl_37;
}
}
lbl_37:
{
obj* x_44; obj* x_45; 
if (lean::obj_tag(x_27) == 0)
{
obj* x_47; 
x_47 = lean::box(3);
x_44 = x_27;
x_45 = x_47;
goto lbl_46;
}
else
{
obj* x_48; obj* x_50; 
x_48 = lean::cnstr_get(x_27, 0);
lean::inc(x_48);
x_50 = lean::cnstr_get(x_27, 1);
lean::inc(x_50);
lean::dec(x_27);
x_44 = x_50;
x_45 = x_48;
goto lbl_46;
}
lbl_46:
{
obj* x_53; obj* x_55; 
x_55 = l_Lean_Parser_Syntax_asNode___main(x_45);
if (lean::obj_tag(x_55) == 0)
{
obj* x_56; 
x_56 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_53 = x_56;
goto lbl_54;
}
else
{
obj* x_57; obj* x_59; obj* x_60; 
x_57 = lean::cnstr_get(x_55, 0);
if (lean::is_exclusive(x_55)) {
 lean::cnstr_set(x_55, 0, lean::box(0));
 x_59 = x_55;
} else {
 lean::inc(x_57);
 lean::dec(x_55);
 x_59 = lean::box(0);
}
x_60 = lean::cnstr_get(x_57, 1);
lean::inc(x_60);
lean::dec(x_57);
if (lean::obj_tag(x_60) == 0)
{
obj* x_64; 
lean::dec(x_59);
x_64 = lean::box(0);
x_53 = x_64;
goto lbl_54;
}
else
{
obj* x_65; 
x_65 = lean::cnstr_get(x_60, 1);
lean::inc(x_65);
if (lean::obj_tag(x_65) == 0)
{
obj* x_67; obj* x_70; obj* x_71; obj* x_74; obj* x_75; 
x_67 = lean::cnstr_get(x_60, 0);
lean::inc(x_67);
lean::dec(x_60);
x_70 = l_Lean_Parser_Term_typeSpec_HasView;
x_71 = lean::cnstr_get(x_70, 0);
lean::inc(x_71);
lean::dec(x_70);
x_74 = lean::apply_1(x_71, x_67);
if (lean::is_scalar(x_59)) {
 x_75 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_75 = x_59;
}
lean::cnstr_set(x_75, 0, x_74);
x_53 = x_75;
goto lbl_54;
}
else
{
obj* x_79; 
lean::dec(x_65);
lean::dec(x_60);
lean::dec(x_59);
x_79 = l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2;
x_53 = x_79;
goto lbl_54;
}
}
}
lbl_54:
{
obj* x_80; obj* x_81; obj* x_82; obj* x_84; obj* x_85; 
if (lean::obj_tag(x_44) == 0)
{
obj* x_87; 
x_87 = lean::box(3);
x_84 = x_44;
x_85 = x_87;
goto lbl_86;
}
else
{
obj* x_88; obj* x_90; 
x_88 = lean::cnstr_get(x_44, 0);
lean::inc(x_88);
x_90 = lean::cnstr_get(x_44, 1);
lean::inc(x_90);
lean::dec(x_44);
x_84 = x_90;
x_85 = x_88;
goto lbl_86;
}
lbl_83:
{
if (lean::obj_tag(x_82) == 0)
{
obj* x_93; obj* x_94; 
x_93 = lean::box(0);
x_94 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_94, 0, x_18);
lean::cnstr_set(x_94, 1, x_36);
lean::cnstr_set(x_94, 2, x_53);
lean::cnstr_set(x_94, 3, x_80);
lean::cnstr_set(x_94, 4, x_81);
lean::cnstr_set(x_94, 5, x_93);
return x_94;
}
else
{
obj* x_95; 
x_95 = lean::cnstr_get(x_82, 0);
lean::inc(x_95);
lean::dec(x_82);
switch (lean::obj_tag(x_95)) {
case 0:
{
obj* x_98; obj* x_101; obj* x_102; 
x_98 = lean::cnstr_get(x_95, 0);
lean::inc(x_98);
lean::dec(x_95);
x_101 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_101, 0, x_98);
x_102 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_102, 0, x_18);
lean::cnstr_set(x_102, 1, x_36);
lean::cnstr_set(x_102, 2, x_53);
lean::cnstr_set(x_102, 3, x_80);
lean::cnstr_set(x_102, 4, x_81);
lean::cnstr_set(x_102, 5, x_101);
return x_102;
}
case 3:
{
obj* x_103; obj* x_104; 
x_103 = lean::box(0);
x_104 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_104, 0, x_18);
lean::cnstr_set(x_104, 1, x_36);
lean::cnstr_set(x_104, 2, x_53);
lean::cnstr_set(x_104, 3, x_80);
lean::cnstr_set(x_104, 4, x_81);
lean::cnstr_set(x_104, 5, x_103);
return x_104;
}
default:
{
obj* x_106; obj* x_107; 
lean::dec(x_95);
x_106 = lean::box(0);
x_107 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_107, 0, x_18);
lean::cnstr_set(x_107, 1, x_36);
lean::cnstr_set(x_107, 2, x_53);
lean::cnstr_set(x_107, 3, x_80);
lean::cnstr_set(x_107, 4, x_81);
lean::cnstr_set(x_107, 5, x_106);
return x_107;
}
}
}
}
lbl_86:
{
switch (lean::obj_tag(x_85)) {
case 0:
{
obj* x_108; obj* x_111; 
x_108 = lean::cnstr_get(x_85, 0);
lean::inc(x_108);
lean::dec(x_85);
x_111 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_111, 0, x_108);
if (lean::obj_tag(x_84) == 0)
{
obj* x_112; obj* x_113; obj* x_114; 
x_112 = lean::box(0);
x_113 = lean::box(3);
x_114 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_114, 0, x_18);
lean::cnstr_set(x_114, 1, x_36);
lean::cnstr_set(x_114, 2, x_53);
lean::cnstr_set(x_114, 3, x_111);
lean::cnstr_set(x_114, 4, x_113);
lean::cnstr_set(x_114, 5, x_112);
return x_114;
}
else
{
obj* x_115; obj* x_117; 
x_115 = lean::cnstr_get(x_84, 0);
lean::inc(x_115);
x_117 = lean::cnstr_get(x_84, 1);
lean::inc(x_117);
lean::dec(x_84);
x_80 = x_111;
x_81 = x_115;
x_82 = x_117;
goto lbl_83;
}
}
case 3:
{
obj* x_120; 
x_120 = lean::box(0);
if (lean::obj_tag(x_84) == 0)
{
obj* x_121; obj* x_122; 
x_121 = lean::box(3);
x_122 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_122, 0, x_18);
lean::cnstr_set(x_122, 1, x_36);
lean::cnstr_set(x_122, 2, x_53);
lean::cnstr_set(x_122, 3, x_120);
lean::cnstr_set(x_122, 4, x_121);
lean::cnstr_set(x_122, 5, x_120);
return x_122;
}
else
{
obj* x_123; obj* x_125; 
x_123 = lean::cnstr_get(x_84, 0);
lean::inc(x_123);
x_125 = lean::cnstr_get(x_84, 1);
lean::inc(x_125);
lean::dec(x_84);
x_80 = x_120;
x_81 = x_123;
x_82 = x_125;
goto lbl_83;
}
}
default:
{
obj* x_129; 
lean::dec(x_85);
x_129 = lean::box(0);
if (lean::obj_tag(x_84) == 0)
{
obj* x_130; obj* x_131; 
x_130 = lean::box(3);
x_131 = lean::alloc_cnstr(0, 6, 0);
lean::cnstr_set(x_131, 0, x_18);
lean::cnstr_set(x_131, 1, x_36);
lean::cnstr_set(x_131, 2, x_53);
lean::cnstr_set(x_131, 3, x_129);
lean::cnstr_set(x_131, 4, x_130);
lean::cnstr_set(x_131, 5, x_129);
return x_131;
}
else
{
obj* x_132; obj* x_134; 
x_132 = lean::cnstr_get(x_84, 0);
lean::inc(x_132);
x_134 = lean::cnstr_get(x_84, 1);
lean::inc(x_134);
lean::dec(x_84);
x_80 = x_129;
x_81 = x_132;
x_82 = x_134;
goto lbl_83;
}
}
}
}
}
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_Subtype_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Subtype_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Subtype_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_Subtype_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_Subtype_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_Subtype_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_15; obj* x_18; obj* x_21; obj* x_22; obj* x_24; obj* x_26; obj* x_29; 
x_0 = lean::mk_string("{");
x_1 = l_Lean_Parser_maxPrec;
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = lean::box(0);
x_5 = lean::mk_string("//");
x_6 = lean::mk_nat_obj(0ul);
x_7 = l_Lean_Parser_symbol_tokens___rarg(x_5, x_6);
lean::dec(x_5);
x_9 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_6);
x_10 = lean::mk_string("}");
x_11 = l_Lean_Parser_symbol_tokens___rarg(x_10, x_6);
lean::dec(x_10);
x_13 = l_Lean_Parser_List_cons_tokens___rarg(x_11, x_4);
lean::dec(x_11);
x_15 = l_Lean_Parser_List_cons_tokens___rarg(x_9, x_13);
lean::dec(x_13);
lean::dec(x_9);
x_18 = l_Lean_Parser_List_cons_tokens___rarg(x_7, x_15);
lean::dec(x_15);
lean::dec(x_7);
x_21 = l_Lean_Parser_Term_optType_Parser_Lean_Parser_HasTokens;
x_22 = l_Lean_Parser_List_cons_tokens___rarg(x_21, x_18);
lean::dec(x_18);
x_24 = l_Lean_Parser_List_cons_tokens___rarg(x_4, x_22);
lean::dec(x_22);
x_26 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_24);
lean::dec(x_24);
lean::dec(x_2);
x_29 = l_Lean_Parser_tokens___rarg(x_26);
lean::dec(x_26);
return x_29;
}
}
obj* _init_l_Lean_Parser_Term_Subtype_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; 
x_0 = lean::mk_string("{");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_string("//");
x_8 = l_String_trim(x_7);
lean::dec(x_7);
lean::inc(x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_11, 0, x_8);
x_12 = lean::mk_nat_obj(0ul);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_13, 0, x_8);
lean::closure_set(x_13, 1, x_12);
lean::closure_set(x_13, 2, x_11);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_14, 0, x_12);
x_15 = lean::mk_string("}");
x_16 = l_String_trim(x_15);
lean::dec(x_15);
lean::inc(x_16);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_19, 0, x_16);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_20, 0, x_16);
lean::closure_set(x_20, 1, x_12);
lean::closure_set(x_20, 2, x_19);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_14);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_13);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_optType_Parser), 5, 0);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_24);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_26);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_6);
lean::cnstr_set(x_29, 1, x_28);
x_30 = l_Lean_Parser_TermParserM_Monad;
x_31 = l_Lean_Parser_TermParserM_MonadExcept;
x_32 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_33 = l_Lean_Parser_TermParserM_Alternative;
x_34 = l_Lean_Parser_Term_Subtype;
x_35 = l_Lean_Parser_Term_Subtype_HasView;
x_36 = l_Lean_Parser_Combinators_node_view___rarg(x_30, x_31, x_32, x_33, x_34, x_29, x_35);
lean::dec(x_29);
return x_36;
}
}
obj* _init_l_Lean_Parser_Term_Subtype_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; 
x_0 = lean::mk_string("{");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_string("//");
x_8 = l_String_trim(x_7);
lean::dec(x_7);
lean::inc(x_8);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_11, 0, x_8);
x_12 = lean::mk_nat_obj(0ul);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_13, 0, x_8);
lean::closure_set(x_13, 1, x_12);
lean::closure_set(x_13, 2, x_11);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_14, 0, x_12);
x_15 = lean::mk_string("}");
x_16 = l_String_trim(x_15);
lean::dec(x_15);
lean::inc(x_16);
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_19, 0, x_16);
x_20 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_20, 0, x_16);
lean::closure_set(x_20, 1, x_12);
lean::closure_set(x_20, 2, x_19);
x_21 = lean::box(0);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_14);
lean::cnstr_set(x_23, 1, x_22);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_13);
lean::cnstr_set(x_24, 1, x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_optType_Parser), 5, 0);
x_26 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_24);
x_27 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___boxed), 1, 0);
x_28 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_26);
x_29 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_29, 0, x_6);
lean::cnstr_set(x_29, 1, x_28);
return x_29;
}
}
obj* l_Lean_Parser_Term_Subtype_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_Subtype;
x_6 = l_Lean_Parser_Term_Subtype_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_inaccessible() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("inaccessible");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_inaccessible_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = lean::box(0);
if (lean::obj_tag(x_1) == 0)
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; 
x_9 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_3);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::box(3);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_10);
x_13 = l_Lean_Parser_Term_inaccessible;
x_14 = l_Lean_Parser_Syntax_mkNode(x_13, x_12);
return x_14;
}
else
{
obj* x_15; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; 
x_15 = lean::cnstr_get(x_5, 0);
lean::inc(x_15);
lean::dec(x_5);
x_18 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_18, 0, x_15);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_8);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_3);
lean::cnstr_set(x_20, 1, x_19);
x_21 = lean::box(3);
x_22 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_20);
x_23 = l_Lean_Parser_Term_inaccessible;
x_24 = l_Lean_Parser_Syntax_mkNode(x_23, x_22);
return x_24;
}
}
else
{
obj* x_25; obj* x_28; 
x_25 = lean::cnstr_get(x_1, 0);
lean::inc(x_25);
lean::dec(x_1);
x_28 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_28, 0, x_25);
if (lean::obj_tag(x_5) == 0)
{
obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
x_29 = l_Lean_Parser_detailIdentPartEscaped_HasView_x_27___elambda__1___closed__2;
x_30 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_30, 0, x_3);
lean::cnstr_set(x_30, 1, x_29);
x_31 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_31, 0, x_28);
lean::cnstr_set(x_31, 1, x_30);
x_32 = l_Lean_Parser_Term_inaccessible;
x_33 = l_Lean_Parser_Syntax_mkNode(x_32, x_31);
return x_33;
}
else
{
obj* x_34; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
x_34 = lean::cnstr_get(x_5, 0);
lean::inc(x_34);
lean::dec(x_5);
x_37 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_37, 0, x_34);
x_38 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_8);
x_39 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_39, 0, x_3);
lean::cnstr_set(x_39, 1, x_38);
x_40 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_40, 0, x_28);
lean::cnstr_set(x_40, 1, x_39);
x_41 = l_Lean_Parser_Term_inaccessible;
x_42 = l_Lean_Parser_Syntax_mkNode(x_41, x_40);
return x_42;
}
}
}
}
obj* _init_l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
lean::cnstr_set(x_2, 2, x_0);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1___closed__1;
return x_0;
}
}
obj* l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; 
x_8 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_8) == 0)
{
obj* x_9; 
x_9 = l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1___closed__2;
return x_9;
}
else
{
obj* x_10; obj* x_13; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
lean::dec(x_8);
x_13 = lean::cnstr_get(x_10, 1);
lean::inc(x_13);
lean::dec(x_10);
if (lean::obj_tag(x_13) == 0)
{
obj* x_16; 
x_16 = lean::box(3);
x_5 = x_13;
x_6 = x_16;
goto lbl_7;
}
else
{
obj* x_17; obj* x_19; 
x_17 = lean::cnstr_get(x_13, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_13, 1);
lean::inc(x_19);
lean::dec(x_13);
x_5 = x_19;
x_6 = x_17;
goto lbl_7;
}
}
lbl_4:
{
if (lean::obj_tag(x_3) == 0)
{
obj* x_22; obj* x_23; 
x_22 = lean::box(0);
x_23 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_23, 0, x_1);
lean::cnstr_set(x_23, 1, x_2);
lean::cnstr_set(x_23, 2, x_22);
return x_23;
}
else
{
obj* x_24; 
x_24 = lean::cnstr_get(x_3, 0);
lean::inc(x_24);
lean::dec(x_3);
switch (lean::obj_tag(x_24)) {
case 0:
{
obj* x_27; obj* x_30; obj* x_31; 
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
lean::dec(x_24);
x_30 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_30, 0, x_27);
x_31 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_31, 0, x_1);
lean::cnstr_set(x_31, 1, x_2);
lean::cnstr_set(x_31, 2, x_30);
return x_31;
}
case 3:
{
obj* x_32; obj* x_33; 
x_32 = lean::box(0);
x_33 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_33, 0, x_1);
lean::cnstr_set(x_33, 1, x_2);
lean::cnstr_set(x_33, 2, x_32);
return x_33;
}
default:
{
obj* x_35; obj* x_36; 
lean::dec(x_24);
x_35 = lean::box(0);
x_36 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_36, 0, x_1);
lean::cnstr_set(x_36, 1, x_2);
lean::cnstr_set(x_36, 2, x_35);
return x_36;
}
}
}
}
lbl_7:
{
switch (lean::obj_tag(x_6)) {
case 0:
{
obj* x_37; obj* x_40; 
x_37 = lean::cnstr_get(x_6, 0);
lean::inc(x_37);
lean::dec(x_6);
x_40 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_40, 0, x_37);
if (lean::obj_tag(x_5) == 0)
{
obj* x_41; obj* x_42; obj* x_43; 
x_41 = lean::box(0);
x_42 = lean::box(3);
x_43 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_43, 0, x_40);
lean::cnstr_set(x_43, 1, x_42);
lean::cnstr_set(x_43, 2, x_41);
return x_43;
}
else
{
obj* x_44; obj* x_46; 
x_44 = lean::cnstr_get(x_5, 0);
lean::inc(x_44);
x_46 = lean::cnstr_get(x_5, 1);
lean::inc(x_46);
lean::dec(x_5);
x_1 = x_40;
x_2 = x_44;
x_3 = x_46;
goto lbl_4;
}
}
case 3:
{
if (lean::obj_tag(x_5) == 0)
{
obj* x_49; 
x_49 = l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1___closed__1;
return x_49;
}
else
{
obj* x_50; obj* x_52; obj* x_55; 
x_50 = lean::cnstr_get(x_5, 0);
lean::inc(x_50);
x_52 = lean::cnstr_get(x_5, 1);
lean::inc(x_52);
lean::dec(x_5);
x_55 = lean::box(0);
x_1 = x_55;
x_2 = x_50;
x_3 = x_52;
goto lbl_4;
}
}
default:
{
lean::dec(x_6);
if (lean::obj_tag(x_5) == 0)
{
obj* x_57; 
x_57 = l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1___closed__1;
return x_57;
}
else
{
obj* x_58; obj* x_60; obj* x_63; 
x_58 = lean::cnstr_get(x_5, 0);
lean::inc(x_58);
x_60 = lean::cnstr_get(x_5, 1);
lean::inc(x_60);
lean::dec(x_5);
x_63 = lean::box(0);
x_1 = x_63;
x_2 = x_58;
x_3 = x_60;
goto lbl_4;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_inaccessible_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_inaccessible_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_inaccessible_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_inaccessible_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_inaccessible_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_12; obj* x_15; obj* x_18; 
x_0 = lean::mk_string(".(");
x_1 = l_Lean_Parser_maxPrec;
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = lean::mk_nat_obj(0ul);
x_5 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_4);
x_6 = lean::mk_string(")");
x_7 = l_Lean_Parser_symbol_tokens___rarg(x_6, x_4);
lean::dec(x_6);
x_9 = lean::box(0);
x_10 = l_Lean_Parser_List_cons_tokens___rarg(x_7, x_9);
lean::dec(x_7);
x_12 = l_Lean_Parser_List_cons_tokens___rarg(x_5, x_10);
lean::dec(x_10);
lean::dec(x_5);
x_15 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_12);
lean::dec(x_12);
lean::dec(x_2);
x_18 = l_Lean_Parser_tokens___rarg(x_15);
lean::dec(x_15);
return x_18;
}
}
obj* _init_l_Lean_Parser_Term_inaccessible_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_0 = lean::mk_string(".(");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_nat_obj(0ul);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::mk_string(")");
x_10 = l_String_trim(x_9);
lean::dec(x_9);
lean::inc(x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_13, 0, x_10);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_14, 0, x_10);
lean::closure_set(x_14, 1, x_7);
lean::closure_set(x_14, 2, x_13);
x_15 = lean::box(0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_14);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_8);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_6);
lean::cnstr_set(x_18, 1, x_17);
x_19 = l_Lean_Parser_TermParserM_Monad;
x_20 = l_Lean_Parser_TermParserM_MonadExcept;
x_21 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_22 = l_Lean_Parser_TermParserM_Alternative;
x_23 = l_Lean_Parser_Term_inaccessible;
x_24 = l_Lean_Parser_Term_inaccessible_HasView;
x_25 = l_Lean_Parser_Combinators_node_view___rarg(x_19, x_20, x_21, x_22, x_23, x_18, x_24);
lean::dec(x_18);
return x_25;
}
}
obj* _init_l_Lean_Parser_Term_inaccessible_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_0 = lean::mk_string(".(");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::mk_nat_obj(0ul);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::mk_string(")");
x_10 = l_String_trim(x_9);
lean::dec(x_9);
lean::inc(x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_13, 0, x_10);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_14, 0, x_10);
lean::closure_set(x_14, 1, x_7);
lean::closure_set(x_14, 2, x_13);
x_15 = lean::box(0);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_14);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_8);
lean::cnstr_set(x_17, 1, x_16);
x_18 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_18, 0, x_6);
lean::cnstr_set(x_18, 1, x_17);
return x_18;
}
}
obj* l_Lean_Parser_Term_inaccessible_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_inaccessible;
x_6 = l_Lean_Parser_Term_inaccessible_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_anonymousInaccessible() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("anonymousInaccessible");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27___elambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = l_Lean_Parser_Term_anonymousInaccessible;
x_4 = l_Lean_Parser_Syntax_mkNode(x_3, x_2);
return x_4;
}
}
obj* l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27___elambda__1___closed__1;
return x_1;
}
else
{
obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_2);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = l_Lean_Parser_Term_anonymousInaccessible;
x_9 = l_Lean_Parser_Syntax_mkNode(x_8, x_7);
return x_9;
}
}
}
obj* l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = lean::box(0);
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
lean::dec(x_6);
switch (lean::obj_tag(x_11)) {
case 0:
{
obj* x_14; obj* x_17; 
x_14 = lean::cnstr_get(x_11, 0);
lean::inc(x_14);
lean::dec(x_11);
if (lean::is_scalar(x_5)) {
 x_17 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_17 = x_5;
}
lean::cnstr_set(x_17, 0, x_14);
return x_17;
}
case 3:
{
obj* x_19; 
lean::dec(x_5);
x_19 = lean::box(0);
return x_19;
}
default:
{
obj* x_22; 
lean::dec(x_11);
lean::dec(x_5);
x_22 = lean::box(0);
return x_22;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_anonymousInaccessible_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_anonymousInaccessible_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; 
x_0 = lean::mk_string("._");
x_1 = l_Lean_Parser_maxPrec;
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = lean::box(0);
x_5 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_4);
lean::dec(x_2);
x_7 = l_Lean_Parser_tokens___rarg(x_5);
lean::dec(x_5);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_anonymousInaccessible_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_0 = lean::mk_string("._");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_Lean_Parser_TermParserM_Monad;
x_10 = l_Lean_Parser_TermParserM_MonadExcept;
x_11 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_12 = l_Lean_Parser_TermParserM_Alternative;
x_13 = l_Lean_Parser_Term_anonymousInaccessible;
x_14 = l_Lean_Parser_Term_anonymousInaccessible_HasView;
x_15 = l_Lean_Parser_Combinators_node_view___rarg(x_9, x_10, x_11, x_12, x_13, x_8, x_14);
lean::dec(x_8);
return x_15;
}
}
obj* _init_l_Lean_Parser_Term_anonymousInaccessible_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::mk_string("._");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_anonymousInaccessible_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_anonymousInaccessible;
x_6 = l_Lean_Parser_Term_anonymousInaccessible_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_sorry() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("sorry");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_sorry_HasView_x_27___elambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = l_Lean_Parser_Term_sorry;
x_4 = l_Lean_Parser_Syntax_mkNode(x_3, x_2);
return x_4;
}
}
obj* l_Lean_Parser_Term_sorry_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_1; 
x_1 = l_Lean_Parser_Term_sorry_HasView_x_27___elambda__1___closed__1;
return x_1;
}
else
{
obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_6, 0, x_2);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
x_8 = l_Lean_Parser_Term_sorry;
x_9 = l_Lean_Parser_Syntax_mkNode(x_8, x_7);
return x_9;
}
}
}
obj* l_Lean_Parser_Term_sorry_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = lean::box(0);
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
lean::dec(x_6);
switch (lean::obj_tag(x_11)) {
case 0:
{
obj* x_14; obj* x_17; 
x_14 = lean::cnstr_get(x_11, 0);
lean::inc(x_14);
lean::dec(x_11);
if (lean::is_scalar(x_5)) {
 x_17 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_17 = x_5;
}
lean::cnstr_set(x_17, 0, x_14);
return x_17;
}
case 3:
{
obj* x_19; 
lean::dec(x_5);
x_19 = lean::box(0);
return x_19;
}
default:
{
obj* x_22; 
lean::dec(x_11);
lean::dec(x_5);
x_22 = lean::box(0);
return x_22;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_sorry_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_sorry_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_sorry_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_sorry_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_sorry_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_sorry_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; 
x_0 = lean::mk_string("sorry");
x_1 = l_Lean_Parser_maxPrec;
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = lean::box(0);
x_5 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_4);
lean::dec(x_2);
x_7 = l_Lean_Parser_tokens___rarg(x_5);
lean::dec(x_5);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_sorry_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; 
x_0 = lean::mk_string("sorry");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_Lean_Parser_TermParserM_Monad;
x_10 = l_Lean_Parser_TermParserM_MonadExcept;
x_11 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_12 = l_Lean_Parser_TermParserM_Alternative;
x_13 = l_Lean_Parser_Term_sorry;
x_14 = l_Lean_Parser_Term_sorry_HasView;
x_15 = l_Lean_Parser_Combinators_node_view___rarg(x_9, x_10, x_11, x_12, x_13, x_8, x_14);
lean::dec(x_8);
return x_15;
}
}
obj* _init_l_Lean_Parser_Term_sorry_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::mk_string("sorry");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = lean::box(0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_sorry_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_sorry;
x_6 = l_Lean_Parser_Term_sorry_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_borrowPrec() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = l_Lean_Parser_maxPrec;
x_1 = lean::mk_nat_obj(1ul);
x_2 = lean::nat_sub(x_0, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_borrowed() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("borrowed");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
if (lean::obj_tag(x_1) == 0)
{
obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_8 = lean::box(3);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_Lean_Parser_Term_borrowed;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
return x_11;
}
else
{
obj* x_12; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_12 = lean::cnstr_get(x_1, 0);
lean::inc(x_12);
lean::dec(x_1);
x_15 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_15, 0, x_12);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_7);
x_17 = l_Lean_Parser_Term_borrowed;
x_18 = l_Lean_Parser_Syntax_mkNode(x_17, x_16);
return x_18;
}
}
}
obj* _init_l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
if (lean::is_exclusive(x_1)) {
 lean::cnstr_set(x_1, 0, lean::box(0));
 x_5 = x_1;
} else {
 lean::inc(x_3);
 lean::dec(x_1);
 x_5 = lean::box(0);
}
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_10; 
lean::dec(x_5);
x_10 = l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__2___closed__1;
return x_10;
}
else
{
obj* x_11; 
x_11 = lean::cnstr_get(x_6, 0);
lean::inc(x_11);
switch (lean::obj_tag(x_11)) {
case 0:
{
obj* x_13; obj* x_16; obj* x_19; 
x_13 = lean::cnstr_get(x_6, 1);
lean::inc(x_13);
lean::dec(x_6);
x_16 = lean::cnstr_get(x_11, 0);
lean::inc(x_16);
lean::dec(x_11);
if (lean::is_scalar(x_5)) {
 x_19 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_19 = x_5;
}
lean::cnstr_set(x_19, 0, x_16);
if (lean::obj_tag(x_13) == 0)
{
obj* x_20; obj* x_21; 
x_20 = lean::box(3);
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set(x_21, 1, x_20);
return x_21;
}
else
{
obj* x_22; obj* x_25; 
x_22 = lean::cnstr_get(x_13, 0);
lean::inc(x_22);
lean::dec(x_13);
x_25 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_25, 0, x_19);
lean::cnstr_set(x_25, 1, x_22);
return x_25;
}
}
case 3:
{
obj* x_27; 
lean::dec(x_5);
x_27 = lean::cnstr_get(x_6, 1);
lean::inc(x_27);
lean::dec(x_6);
if (lean::obj_tag(x_27) == 0)
{
obj* x_30; 
x_30 = l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__2___closed__1;
return x_30;
}
else
{
obj* x_31; obj* x_34; obj* x_35; 
x_31 = lean::cnstr_get(x_27, 0);
lean::inc(x_31);
lean::dec(x_27);
x_34 = lean::box(0);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_31);
return x_35;
}
}
default:
{
obj* x_38; 
lean::dec(x_11);
lean::dec(x_5);
x_38 = lean::cnstr_get(x_6, 1);
lean::inc(x_38);
lean::dec(x_6);
if (lean::obj_tag(x_38) == 0)
{
obj* x_41; 
x_41 = l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__2___closed__1;
return x_41;
}
else
{
obj* x_42; obj* x_45; obj* x_46; 
x_42 = lean::cnstr_get(x_38, 0);
lean::inc(x_42);
lean::dec(x_38);
x_45 = lean::box(0);
x_46 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_46, 0, x_45);
lean::cnstr_set(x_46, 1, x_42);
return x_46;
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_borrowed_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_borrowed_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_borrowed_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_borrowed_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_9; obj* x_12; 
x_0 = lean::mk_string("@&");
x_1 = l_Lean_Parser_maxPrec;
x_2 = l_Lean_Parser_symbol_tokens___rarg(x_0, x_1);
lean::dec(x_0);
x_4 = l_Lean_Parser_Term_borrowPrec;
x_5 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_4);
x_6 = lean::box(0);
x_7 = l_Lean_Parser_List_cons_tokens___rarg(x_5, x_6);
lean::dec(x_5);
x_9 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_7);
lean::dec(x_7);
lean::dec(x_2);
x_12 = l_Lean_Parser_tokens___rarg(x_9);
lean::dec(x_9);
return x_12;
}
}
obj* _init_l_Lean_Parser_Term_borrowed_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; 
x_0 = lean::mk_string("@&");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = l_Lean_Parser_Term_borrowPrec;
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::box(0);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_6);
lean::cnstr_set(x_11, 1, x_10);
x_12 = l_Lean_Parser_TermParserM_Monad;
x_13 = l_Lean_Parser_TermParserM_MonadExcept;
x_14 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_15 = l_Lean_Parser_TermParserM_Alternative;
x_16 = l_Lean_Parser_Term_borrowed;
x_17 = l_Lean_Parser_Term_borrowed_HasView;
x_18 = l_Lean_Parser_Combinators_node_view___rarg(x_12, x_13, x_14, x_15, x_16, x_11, x_17);
lean::dec(x_11);
return x_18;
}
}
obj* _init_l_Lean_Parser_Term_borrowed_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_0 = lean::mk_string("@&");
x_1 = l_String_trim(x_0);
lean::dec(x_0);
lean::inc(x_1);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_4, 0, x_1);
x_5 = l_Lean_Parser_maxPrec;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_command_NotationSpec_precedenceTerm_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_1);
lean::closure_set(x_6, 1, x_5);
lean::closure_set(x_6, 2, x_4);
x_7 = l_Lean_Parser_Term_borrowPrec;
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::box(0);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_6);
lean::cnstr_set(x_11, 1, x_10);
return x_11;
}
}
obj* l_Lean_Parser_Term_borrowed_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_borrowed;
x_6 = l_Lean_Parser_Term_borrowed_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_depArrow() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("depArrow");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_depArrow_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; uint8 x_8; obj* x_9; obj* x_10; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = 0;
x_9 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_8);
x_10 = lean::cnstr_get(x_9, 1);
lean::inc(x_10);
lean::dec(x_9);
x_13 = lean::apply_1(x_10, x_1);
x_14 = lean::box(0);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_5);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_3);
lean::cnstr_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_13);
lean::cnstr_set(x_17, 1, x_16);
x_18 = l_Lean_Parser_Term_depArrow;
x_19 = l_Lean_Parser_Syntax_mkNode(x_18, x_17);
return x_19;
}
}
obj* _init_l_Lean_Parser_Term_depArrow_HasView_x_27___elambda__2___closed__1() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_5; obj* x_6; obj* x_7; 
x_0 = 0;
x_1 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_0);
x_2 = lean::cnstr_get(x_1, 0);
lean::inc(x_2);
lean::dec(x_1);
x_5 = lean::box(3);
x_6 = lean::apply_1(x_2, x_5);
x_7 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_7, 0, x_6);
lean::cnstr_set(x_7, 1, x_5);
lean::cnstr_set(x_7, 2, x_5);
return x_7;
}
}
obj* l_Lean_Parser_Term_depArrow_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_depArrow_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_9; 
x_9 = l_Lean_Parser_Term_depArrow_HasView_x_27___elambda__2___closed__1;
return x_9;
}
else
{
obj* x_10; obj* x_12; uint8 x_15; obj* x_16; obj* x_17; obj* x_20; 
x_10 = lean::cnstr_get(x_6, 0);
lean::inc(x_10);
x_12 = lean::cnstr_get(x_6, 1);
lean::inc(x_12);
lean::dec(x_6);
x_15 = 0;
x_16 = l_Lean_Parser_Term_bracketedBinder_HasView_x_27(x_15);
x_17 = lean::cnstr_get(x_16, 0);
lean::inc(x_17);
lean::dec(x_16);
x_20 = lean::apply_1(x_17, x_10);
if (lean::obj_tag(x_12) == 0)
{
obj* x_21; obj* x_22; 
x_21 = lean::box(3);
x_22 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
lean::cnstr_set(x_22, 2, x_21);
return x_22;
}
else
{
obj* x_23; 
x_23 = lean::cnstr_get(x_12, 1);
lean::inc(x_23);
if (lean::obj_tag(x_23) == 0)
{
obj* x_25; obj* x_28; obj* x_29; 
x_25 = lean::cnstr_get(x_12, 0);
lean::inc(x_25);
lean::dec(x_12);
x_28 = lean::box(3);
x_29 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_29, 0, x_20);
lean::cnstr_set(x_29, 1, x_25);
lean::cnstr_set(x_29, 2, x_28);
return x_29;
}
else
{
obj* x_30; obj* x_33; obj* x_36; 
x_30 = lean::cnstr_get(x_12, 0);
lean::inc(x_30);
lean::dec(x_12);
x_33 = lean::cnstr_get(x_23, 0);
lean::inc(x_33);
lean::dec(x_23);
x_36 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_36, 0, x_20);
lean::cnstr_set(x_36, 1, x_30);
lean::cnstr_set(x_36, 2, x_33);
return x_36;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_depArrow_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_depArrow_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_depArrow_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_depArrow_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_depArrow_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_depArrow_Parser_Lean_Parser_HasTokens() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_13; obj* x_16; obj* x_19; 
x_0 = 1;
x_1 = l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens(x_0);
x_2 = lean::mk_string("\xe2\x86\x92");
x_3 = lean::mk_string("->");
x_4 = lean::mk_nat_obj(25ul);
x_5 = l_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___rarg(x_2, x_3, x_4);
lean::dec(x_3);
lean::dec(x_2);
x_8 = lean::mk_nat_obj(24ul);
x_9 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_8);
x_10 = lean::box(0);
x_11 = l_Lean_Parser_List_cons_tokens___rarg(x_9, x_10);
lean::dec(x_9);
x_13 = l_Lean_Parser_List_cons_tokens___rarg(x_5, x_11);
lean::dec(x_11);
lean::dec(x_5);
x_16 = l_Lean_Parser_List_cons_tokens___rarg(x_1, x_13);
lean::dec(x_13);
lean::dec(x_1);
x_19 = l_Lean_Parser_tokens___rarg(x_16);
lean::dec(x_16);
return x_19;
}
}
obj* _init_l_Lean_Parser_Term_depArrow_Parser_Lean_Parser_HasView() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_0 = 1;
x_1 = lean::box(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bracketedBinder_Parser___boxed), 6, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::mk_string("\xe2\x86\x92");
x_4 = lean::mk_string("->");
x_5 = lean::mk_nat_obj(25ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_3);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_5);
x_7 = lean::mk_nat_obj(24ul);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::box(0);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_6);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_2);
lean::cnstr_set(x_12, 1, x_11);
x_13 = l_Lean_Parser_TermParserM_Monad;
x_14 = l_Lean_Parser_TermParserM_MonadExcept;
x_15 = l_Lean_Parser_TermParserM_Lean_Parser_MonadParsec;
x_16 = l_Lean_Parser_TermParserM_Alternative;
x_17 = l_Lean_Parser_Term_depArrow;
x_18 = l_Lean_Parser_Term_depArrow_HasView;
x_19 = l_Lean_Parser_Combinators_node_view___rarg(x_13, x_14, x_15, x_16, x_17, x_12, x_18);
lean::dec(x_12);
return x_19;
}
}
obj* _init_l_Lean_Parser_Term_depArrow_Parser___closed__1() {
_start:
{
uint8 x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
x_0 = 1;
x_1 = lean::box(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_bracketedBinder_Parser___boxed), 6, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::mk_string("\xe2\x86\x92");
x_4 = lean::mk_string("->");
x_5 = lean::mk_nat_obj(25ul);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens___spec__1___boxed), 8, 3);
lean::closure_set(x_6, 0, x_3);
lean::closure_set(x_6, 1, x_4);
lean::closure_set(x_6, 2, x_5);
x_7 = lean::mk_nat_obj(24ul);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Parser), 6, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::box(0);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_6);
lean::cnstr_set(x_11, 1, x_10);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_2);
lean::cnstr_set(x_12, 1, x_11);
return x_12;
}
}
obj* l_Lean_Parser_Term_depArrow_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_Term_depArrow;
x_6 = l_Lean_Parser_Term_depArrow_Parser___closed__1;
x_7 = l_Lean_Parser_Combinators_node___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser___spec__1(x_5, x_6, x_0, x_1, x_2, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___rarg___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::mk_string("String");
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_1, 0, x_0);
return x_1;
}
}
obj* l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_6; obj* x_7; 
lean::inc(x_2);
lean::inc(x_0);
x_6 = l_Lean_Parser_token(x_0, x_2, x_3);
x_7 = lean::cnstr_get(x_6, 0);
lean::inc(x_7);
if (lean::obj_tag(x_7) == 0)
{
obj* x_9; obj* x_11; obj* x_12; obj* x_14; obj* x_16; obj* x_18; obj* x_19; obj* x_21; 
x_9 = lean::cnstr_get(x_6, 1);
if (lean::is_exclusive(x_6)) {
 lean::cnstr_release(x_6, 0);
 lean::cnstr_set(x_6, 1, lean::box(0));
 x_11 = x_6;
} else {
 lean::inc(x_9);
 lean::dec(x_6);
 x_11 = lean::box(0);
}
x_12 = lean::cnstr_get(x_7, 0);
x_14 = lean::cnstr_get(x_7, 1);
x_16 = lean::cnstr_get(x_7, 2);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_set(x_7, 0, lean::box(0));
 lean::cnstr_set(x_7, 1, lean::box(0));
 lean::cnstr_set(x_7, 2, lean::box(0));
 x_18 = x_7;
} else {
 lean::inc(x_12);
 lean::inc(x_14);
 lean::inc(x_16);
 lean::dec(x_7);
 x_18 = lean::box(0);
}
x_19 = l_Lean_Parser_stringLit;
lean::inc(x_12);
x_21 = l_Lean_Parser_tryView___at_Lean_Parser_stringLit_Parser___spec__1(x_19, x_12);
if (lean::obj_tag(x_21) == 0)
{
obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_31; obj* x_33; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
lean::dec(x_11);
lean::dec(x_12);
lean::dec(x_18);
x_25 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_25, 0, x_2);
x_26 = lean::box(0);
x_27 = l_String_splitAux___main___closed__1;
x_28 = l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___rarg___closed__1;
x_29 = l_Lean_Parser_MonadParsec_error___at___private_init_lean_parser_token_1__finishCommentBlockAux___main___spec__1___rarg(x_27, x_28, x_25, x_26, x_0, x_14, x_9);
lean::dec(x_0);
x_31 = lean::cnstr_get(x_29, 0);
x_33 = lean::cnstr_get(x_29, 1);
if (lean::is_exclusive(x_29)) {
 x_35 = x_29;
} else {
 lean::inc(x_31);
 lean::inc(x_33);
 lean::dec(x_29);
 x_35 = lean::box(0);
}
x_36 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_37 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_36, x_31);
x_38 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_16, x_37);
x_39 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_36, x_38);
x_40 = l_Lean_Parser_ParsecT_labelsMkRes___rarg(x_39, x_28);
x_41 = l_Lean_Parser_ParsecT_tryMkRes___rarg(x_40);
if (lean::is_scalar(x_35)) {
 x_42 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_42 = x_35;
}
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_33);
return x_42;
}
else
{
obj* x_46; obj* x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; 
lean::dec(x_0);
lean::dec(x_2);
lean::dec(x_21);
x_46 = l_Lean_Parser_finishCommentBlock___closed__2;
if (lean::is_scalar(x_18)) {
 x_47 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_47 = x_18;
}
lean::cnstr_set(x_47, 0, x_12);
lean::cnstr_set(x_47, 1, x_14);
lean::cnstr_set(x_47, 2, x_46);
x_48 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_16, x_47);
x_49 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_50 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_49, x_48);
x_51 = l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___rarg___closed__1;
x_52 = l_Lean_Parser_ParsecT_labelsMkRes___rarg(x_50, x_51);
x_53 = l_Lean_Parser_ParsecT_tryMkRes___rarg(x_52);
if (lean::is_scalar(x_11)) {
 x_54 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_54 = x_11;
}
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_9);
return x_54;
}
}
else
{
obj* x_57; obj* x_59; obj* x_60; uint8 x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; 
lean::dec(x_0);
lean::dec(x_2);
x_57 = lean::cnstr_get(x_6, 1);
if (lean::is_exclusive(x_6)) {
 lean::cnstr_release(x_6, 0);
 x_59 = x_6;
} else {
 lean::inc(x_57);
 lean::dec(x_6);
 x_59 = lean::box(0);
}
x_60 = lean::cnstr_get(x_7, 0);
x_62 = lean::cnstr_get_scalar<uint8>(x_7, sizeof(void*)*1);
if (lean::is_exclusive(x_7)) {
 x_63 = x_7;
} else {
 lean::inc(x_60);
 lean::dec(x_7);
 x_63 = lean::box(0);
}
if (lean::is_scalar(x_63)) {
 x_64 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_64 = x_63;
}
lean::cnstr_set(x_64, 0, x_60);
lean::cnstr_set_scalar(x_64, sizeof(void*)*1, x_62);
x_65 = x_64;
x_66 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_67 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_66, x_65);
x_68 = l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___rarg___closed__1;
x_69 = l_Lean_Parser_ParsecT_labelsMkRes___rarg(x_67, x_68);
x_70 = l_Lean_Parser_ParsecT_tryMkRes___rarg(x_69);
if (lean::is_scalar(x_59)) {
 x_71 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_71 = x_59;
}
lean::cnstr_set(x_71, 0, x_70);
lean::cnstr_set(x_71, 1, x_57);
return x_71;
}
}
}
obj* l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___rarg___boxed), 4, 0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_6; obj* x_7; obj* x_9; obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_17; obj* x_18; obj* x_20; obj* x_21; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_29; obj* x_30; obj* x_32; obj* x_33; obj* x_35; obj* x_36; obj* x_38; obj* x_39; obj* x_41; obj* x_42; obj* x_44; obj* x_46; obj* x_47; obj* x_49; obj* x_50; obj* x_52; obj* x_54; obj* x_56; obj* x_58; obj* x_59; obj* x_61; obj* x_63; obj* x_64; obj* x_66; obj* x_68; obj* x_69; obj* x_71; obj* x_73; obj* x_74; obj* x_76; obj* x_78; obj* x_80; obj* x_81; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_Term_borrowed_Parser_Lean_Parser_HasTokens;
x_2 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_1, x_0);
x_3 = l_Lean_Parser_Term_sorry_Parser_Lean_Parser_HasTokens;
x_4 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_3, x_2);
lean::dec(x_2);
x_6 = l_Lean_Parser_Term_anonymousInaccessible_Parser_Lean_Parser_HasTokens;
x_7 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_6, x_4);
lean::dec(x_4);
x_9 = l_Lean_Parser_Term_inaccessible_Parser_Lean_Parser_HasTokens;
x_10 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_9, x_7);
lean::dec(x_7);
x_12 = l_Lean_Parser_Term_depArrow_Parser_Lean_Parser_HasTokens;
x_13 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_12, x_10);
lean::dec(x_10);
x_15 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_12, x_13);
lean::dec(x_13);
x_17 = l_Lean_Parser_Term_Subtype_Parser_Lean_Parser_HasTokens;
x_18 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_17, x_15);
lean::dec(x_15);
x_20 = l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasTokens;
x_21 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_20, x_18);
lean::dec(x_18);
x_23 = l_Lean_Parser_Term_if_Parser_Lean_Parser_HasTokens;
x_24 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_23, x_21);
lean::dec(x_21);
x_26 = l_Lean_Parser_Term_match_Parser_Lean_Parser_HasTokens;
x_27 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_26, x_24);
lean::dec(x_24);
x_29 = l_Lean_Parser_Term_assume_Parser_Lean_Parser_HasTokens;
x_30 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_29, x_27);
lean::dec(x_27);
x_32 = l_Lean_Parser_Term_show_Parser_Lean_Parser_HasTokens;
x_33 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_32, x_30);
lean::dec(x_30);
x_35 = l_Lean_Parser_Term_have_Parser_Lean_Parser_HasTokens;
x_36 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_35, x_33);
lean::dec(x_33);
x_38 = l_Lean_Parser_Term_let_Parser_Lean_Parser_HasTokens;
x_39 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_38, x_36);
lean::dec(x_36);
x_41 = l_Lean_Parser_Term_explicit_Parser_Lean_Parser_HasTokens;
x_42 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_41, x_39);
lean::dec(x_39);
x_44 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_41, x_42);
lean::dec(x_42);
x_46 = l_Lean_Parser_Term_anonymousConstructor_Parser_Lean_Parser_HasTokens;
x_47 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_46, x_44);
lean::dec(x_44);
x_49 = l_Lean_Parser_Term_pi_Parser_Lean_Parser_HasTokens;
x_50 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_49, x_47);
lean::dec(x_47);
x_52 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_49, x_50);
lean::dec(x_50);
x_54 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_49, x_52);
lean::dec(x_52);
x_56 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_49, x_54);
lean::dec(x_54);
x_58 = l_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens;
x_59 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_58, x_56);
lean::dec(x_56);
x_61 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_58, x_59);
lean::dec(x_59);
x_63 = l_Lean_Parser_Term_sort_Parser_Lean_Parser_HasTokens;
x_64 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_63, x_61);
lean::dec(x_61);
x_66 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_63, x_64);
lean::dec(x_64);
x_68 = l_Lean_Parser_Term_hole_Parser_Lean_Parser_HasTokens;
x_69 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_68, x_66);
lean::dec(x_66);
x_71 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_12, x_69);
lean::dec(x_69);
x_73 = l_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens;
x_74 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_73, x_71);
lean::dec(x_71);
x_76 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_0, x_74);
lean::dec(x_74);
x_78 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_0, x_76);
lean::dec(x_76);
x_80 = l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasTokens;
x_81 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_80, x_78);
lean::dec(x_78);
return x_81;
}
}
obj* l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___rarg___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___rarg(x_0, x_1, x_2, x_3);
lean::dec(x_1);
return x_4;
}
}
obj* l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* _init_l_Lean_Parser_Term_builtinLeadingParsers() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_15; obj* x_16; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_33; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_43; obj* x_44; obj* x_45; obj* x_47; obj* x_48; obj* x_49; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_73; obj* x_74; obj* x_75; obj* x_76; obj* x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; obj* x_95; obj* x_96; obj* x_98; obj* x_100; obj* x_101; obj* x_102; obj* x_103; obj* x_104; obj* x_105; obj* x_106; obj* x_107; obj* x_108; obj* x_109; obj* x_110; obj* x_111; obj* x_112; obj* x_113; obj* x_114; obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; obj* x_120; obj* x_121; obj* x_122; obj* x_123; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; obj* x_129; obj* x_130; obj* x_131; obj* x_132; obj* x_133; obj* x_134; obj* x_135; obj* x_136; obj* x_137; obj* x_138; obj* x_139; obj* x_140; obj* x_141; obj* x_142; obj* x_143; obj* x_144; obj* x_145; obj* x_146; obj* x_147; obj* x_148; obj* x_149; obj* x_150; obj* x_151; obj* x_152; 
x_0 = lean::box(0);
x_1 = lean::mk_string("ident");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_identUnivs_Parser), 5, 0);
x_4 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_4, 0, x_2);
lean::cnstr_set(x_4, 1, x_3);
x_5 = l_Lean_Parser_number;
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_number_Parser___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__1___boxed), 1, 0);
x_7 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
x_8 = l_Lean_Parser_stringLit;
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___boxed), 1, 0);
x_10 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::mk_string("(");
x_12 = lean_name_mk_string(x_0, x_11);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_paren_Parser), 5, 0);
lean::inc(x_12);
x_15 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_15, 0, x_12);
lean::cnstr_set(x_15, 1, x_13);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_depArrow_Parser), 5, 0);
lean::inc(x_16);
x_18 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_18, 0, x_12);
lean::cnstr_set(x_18, 1, x_16);
x_19 = lean::mk_string("_");
x_20 = lean_name_mk_string(x_0, x_19);
x_21 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_hole_Parser), 5, 0);
x_22 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_22, 0, x_20);
lean::cnstr_set(x_22, 1, x_21);
x_23 = lean::mk_string("Sort");
x_24 = lean_name_mk_string(x_0, x_23);
x_25 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_sort_Parser), 5, 0);
lean::inc(x_25);
x_27 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_27, 0, x_24);
lean::cnstr_set(x_27, 1, x_25);
x_28 = lean::mk_string("Type");
x_29 = lean_name_mk_string(x_0, x_28);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_25);
x_31 = lean::mk_string("\xce\xbb");
x_32 = lean_name_mk_string(x_0, x_31);
x_33 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_lambda_Parser), 5, 0);
lean::inc(x_33);
x_35 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_35, 0, x_32);
lean::cnstr_set(x_35, 1, x_33);
x_36 = lean::mk_string("fun");
x_37 = lean_name_mk_string(x_0, x_36);
x_38 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_33);
x_39 = lean::mk_string("\xce\xa0");
x_40 = lean_name_mk_string(x_0, x_39);
x_41 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_pi_Parser), 5, 0);
lean::inc(x_41);
x_43 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_43, 0, x_40);
lean::cnstr_set(x_43, 1, x_41);
x_44 = lean::mk_string("Pi");
x_45 = lean_name_mk_string(x_0, x_44);
lean::inc(x_41);
x_47 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_47, 0, x_45);
lean::cnstr_set(x_47, 1, x_41);
x_48 = lean::mk_string("\xe2\x88\x80");
x_49 = lean_name_mk_string(x_0, x_48);
lean::inc(x_41);
x_51 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_51, 0, x_49);
lean::cnstr_set(x_51, 1, x_41);
x_52 = lean::mk_string("forall");
x_53 = lean_name_mk_string(x_0, x_52);
x_54 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_54, 0, x_53);
lean::cnstr_set(x_54, 1, x_41);
x_55 = lean::mk_string("\xe2\x9f\xa8");
x_56 = lean_name_mk_string(x_0, x_55);
x_57 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_anonymousConstructor_Parser), 5, 0);
x_58 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_58, 0, x_56);
lean::cnstr_set(x_58, 1, x_57);
x_59 = lean::mk_string("@");
x_60 = lean_name_mk_string(x_0, x_59);
x_61 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_explicit_Parser), 5, 0);
lean::inc(x_61);
x_63 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_63, 0, x_60);
lean::cnstr_set(x_63, 1, x_61);
x_64 = lean::mk_string("@@");
x_65 = lean_name_mk_string(x_0, x_64);
x_66 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_66, 0, x_65);
lean::cnstr_set(x_66, 1, x_61);
x_67 = lean::mk_string("let");
x_68 = lean_name_mk_string(x_0, x_67);
x_69 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_let_Parser), 5, 0);
x_70 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_70, 0, x_68);
lean::cnstr_set(x_70, 1, x_69);
x_71 = lean::mk_string("have");
x_72 = lean_name_mk_string(x_0, x_71);
x_73 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_have_Parser), 5, 0);
x_74 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_74, 0, x_72);
lean::cnstr_set(x_74, 1, x_73);
x_75 = lean::mk_string("show");
x_76 = lean_name_mk_string(x_0, x_75);
x_77 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_show_Parser), 5, 0);
x_78 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_78, 0, x_76);
lean::cnstr_set(x_78, 1, x_77);
x_79 = lean::mk_string("assume");
x_80 = lean_name_mk_string(x_0, x_79);
x_81 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_assume_Parser), 5, 0);
x_82 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_82, 0, x_80);
lean::cnstr_set(x_82, 1, x_81);
x_83 = lean::mk_string("match");
x_84 = lean_name_mk_string(x_0, x_83);
x_85 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_match_Parser), 5, 0);
x_86 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_86, 0, x_84);
lean::cnstr_set(x_86, 1, x_85);
x_87 = lean::mk_string("if");
x_88 = lean_name_mk_string(x_0, x_87);
x_89 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_if_Parser), 5, 0);
x_90 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_90, 0, x_88);
lean::cnstr_set(x_90, 1, x_89);
x_91 = lean::mk_string("{");
x_92 = lean_name_mk_string(x_0, x_91);
x_93 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_structInst_Parser), 5, 0);
lean::inc(x_92);
x_95 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_95, 0, x_92);
lean::cnstr_set(x_95, 1, x_93);
x_96 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_Subtype_Parser), 5, 0);
lean::inc(x_92);
x_98 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_98, 0, x_92);
lean::cnstr_set(x_98, 1, x_96);
lean::inc(x_16);
x_100 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_100, 0, x_92);
lean::cnstr_set(x_100, 1, x_16);
x_101 = lean::mk_string("[");
x_102 = lean_name_mk_string(x_0, x_101);
x_103 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_103, 0, x_102);
lean::cnstr_set(x_103, 1, x_16);
x_104 = lean::mk_string(".(");
x_105 = lean_name_mk_string(x_0, x_104);
x_106 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_inaccessible_Parser), 5, 0);
x_107 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_107, 0, x_105);
lean::cnstr_set(x_107, 1, x_106);
x_108 = lean::mk_string("._");
x_109 = lean_name_mk_string(x_0, x_108);
x_110 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_anonymousInaccessible_Parser), 5, 0);
x_111 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_111, 0, x_109);
lean::cnstr_set(x_111, 1, x_110);
x_112 = lean::mk_string("sorry");
x_113 = lean_name_mk_string(x_0, x_112);
x_114 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_sorry_Parser), 5, 0);
x_115 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_115, 0, x_113);
lean::cnstr_set(x_115, 1, x_114);
x_116 = lean::mk_string("@&");
x_117 = lean_name_mk_string(x_0, x_116);
x_118 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_borrowed_Parser), 5, 0);
x_119 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_119, 0, x_117);
lean::cnstr_set(x_119, 1, x_118);
x_120 = lean::box(0);
x_121 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_121, 0, x_119);
lean::cnstr_set(x_121, 1, x_120);
x_122 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_122, 0, x_115);
lean::cnstr_set(x_122, 1, x_121);
x_123 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_123, 0, x_111);
lean::cnstr_set(x_123, 1, x_122);
x_124 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_124, 0, x_107);
lean::cnstr_set(x_124, 1, x_123);
x_125 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_125, 0, x_103);
lean::cnstr_set(x_125, 1, x_124);
x_126 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_126, 0, x_100);
lean::cnstr_set(x_126, 1, x_125);
x_127 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_127, 0, x_98);
lean::cnstr_set(x_127, 1, x_126);
x_128 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_128, 0, x_95);
lean::cnstr_set(x_128, 1, x_127);
x_129 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_129, 0, x_90);
lean::cnstr_set(x_129, 1, x_128);
x_130 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_130, 0, x_86);
lean::cnstr_set(x_130, 1, x_129);
x_131 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_131, 0, x_82);
lean::cnstr_set(x_131, 1, x_130);
x_132 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_132, 0, x_78);
lean::cnstr_set(x_132, 1, x_131);
x_133 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_133, 0, x_74);
lean::cnstr_set(x_133, 1, x_132);
x_134 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_134, 0, x_70);
lean::cnstr_set(x_134, 1, x_133);
x_135 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_135, 0, x_66);
lean::cnstr_set(x_135, 1, x_134);
x_136 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_136, 0, x_63);
lean::cnstr_set(x_136, 1, x_135);
x_137 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_137, 0, x_58);
lean::cnstr_set(x_137, 1, x_136);
x_138 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_138, 0, x_54);
lean::cnstr_set(x_138, 1, x_137);
x_139 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_139, 0, x_51);
lean::cnstr_set(x_139, 1, x_138);
x_140 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_140, 0, x_47);
lean::cnstr_set(x_140, 1, x_139);
x_141 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_141, 0, x_43);
lean::cnstr_set(x_141, 1, x_140);
x_142 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_142, 0, x_38);
lean::cnstr_set(x_142, 1, x_141);
x_143 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_143, 0, x_35);
lean::cnstr_set(x_143, 1, x_142);
x_144 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_144, 0, x_30);
lean::cnstr_set(x_144, 1, x_143);
x_145 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_145, 0, x_27);
lean::cnstr_set(x_145, 1, x_144);
x_146 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_146, 0, x_22);
lean::cnstr_set(x_146, 1, x_145);
x_147 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_147, 0, x_18);
lean::cnstr_set(x_147, 1, x_146);
x_148 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_148, 0, x_15);
lean::cnstr_set(x_148, 1, x_147);
x_149 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_149, 0, x_10);
lean::cnstr_set(x_149, 1, x_148);
x_150 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_150, 0, x_7);
lean::cnstr_set(x_150, 1, x_149);
x_151 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_151, 0, x_4);
lean::cnstr_set(x_151, 1, x_150);
x_152 = l_Lean_Parser_TokenMap_ofList___main___rarg(x_151);
return x_152;
}
}
obj* _init_l_Lean_Parser_Term_sortApp() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("sortApp");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_sortApp_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_1);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_Lean_Parser_Term_sortApp;
x_10 = l_Lean_Parser_Syntax_mkNode(x_9, x_8);
return x_10;
}
}
obj* _init_l_Lean_Parser_Term_sortApp_HasView_x_27___elambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1, 0, x_0);
lean::cnstr_set(x_1, 1, x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_sortApp_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_sortApp_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_9; 
x_9 = l_Lean_Parser_Term_sortApp_HasView_x_27___elambda__2___closed__1;
return x_9;
}
else
{
obj* x_10; 
x_10 = lean::cnstr_get(x_6, 1);
lean::inc(x_10);
if (lean::obj_tag(x_10) == 0)
{
obj* x_12; obj* x_15; obj* x_16; 
x_12 = lean::cnstr_get(x_6, 0);
lean::inc(x_12);
lean::dec(x_6);
x_15 = lean::box(3);
x_16 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_16, 0, x_12);
lean::cnstr_set(x_16, 1, x_15);
return x_16;
}
else
{
obj* x_17; obj* x_20; obj* x_23; 
x_17 = lean::cnstr_get(x_6, 0);
lean::inc(x_17);
lean::dec(x_6);
x_20 = lean::cnstr_get(x_10, 0);
lean::inc(x_20);
lean::dec(x_10);
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_17);
lean::cnstr_set(x_23, 1, x_20);
return x_23;
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_sortApp_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_sortApp_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_sortApp_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_sortApp_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_sortApp_HasView_x_27;
return x_0;
}
}
obj* l_ReaderT_bind___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__1___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_12; obj* x_13; 
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
x_12 = lean::apply_6(x_0, x_2, x_3, x_4, x_5, x_6, x_7);
x_13 = lean::cnstr_get(x_12, 0);
lean::inc(x_13);
if (lean::obj_tag(x_13) == 0)
{
obj* x_15; obj* x_18; obj* x_20; obj* x_22; obj* x_25; obj* x_26; obj* x_28; obj* x_30; obj* x_31; obj* x_32; 
x_15 = lean::cnstr_get(x_12, 1);
lean::inc(x_15);
lean::dec(x_12);
x_18 = lean::cnstr_get(x_13, 0);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_13, 1);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_13, 2);
lean::inc(x_22);
lean::dec(x_13);
x_25 = lean::apply_7(x_1, x_18, x_2, x_3, x_4, x_5, x_20, x_15);
x_26 = lean::cnstr_get(x_25, 0);
x_28 = lean::cnstr_get(x_25, 1);
if (lean::is_exclusive(x_25)) {
 x_30 = x_25;
} else {
 lean::inc(x_26);
 lean::inc(x_28);
 lean::dec(x_25);
 x_30 = lean::box(0);
}
x_31 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_22, x_26);
if (lean::is_scalar(x_30)) {
 x_32 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_32 = x_30;
}
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_28);
return x_32;
}
else
{
obj* x_38; obj* x_40; obj* x_41; uint8 x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_38 = lean::cnstr_get(x_12, 1);
if (lean::is_exclusive(x_12)) {
 lean::cnstr_release(x_12, 0);
 x_40 = x_12;
} else {
 lean::inc(x_38);
 lean::dec(x_12);
 x_40 = lean::box(0);
}
x_41 = lean::cnstr_get(x_13, 0);
x_43 = lean::cnstr_get_scalar<uint8>(x_13, sizeof(void*)*1);
if (lean::is_exclusive(x_13)) {
 x_44 = x_13;
} else {
 lean::inc(x_41);
 lean::dec(x_13);
 x_44 = lean::box(0);
}
if (lean::is_scalar(x_44)) {
 x_45 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_45 = x_44;
}
lean::cnstr_set(x_45, 0, x_41);
lean::cnstr_set_scalar(x_45, sizeof(void*)*1, x_43);
x_46 = x_45;
if (lean::is_scalar(x_40)) {
 x_47 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_47 = x_40;
}
lean::cnstr_set(x_47, 0, x_46);
lean::cnstr_set(x_47, 1, x_38);
return x_47;
}
}
}
obj* l_ReaderT_bind___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__1(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_bind___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__1___rarg), 8, 0);
return x_2;
}
}
obj* l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; 
x_7 = lean::apply_5(x_0, x_2, x_3, x_4, x_5, x_6);
return x_7;
}
}
obj* l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2___rarg___boxed), 7, 0);
return x_1;
}
}
obj* l_List_mfoldl___main___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__4(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_14; obj* x_15; obj* x_16; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_0);
x_14 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_15 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_15, 0, x_1);
lean::cnstr_set(x_15, 1, x_7);
lean::cnstr_set(x_15, 2, x_14);
x_16 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_8);
return x_16;
}
else
{
obj* x_17; obj* x_19; obj* x_21; obj* x_22; obj* x_23; obj* x_29; obj* x_30; 
x_17 = lean::cnstr_get(x_2, 0);
x_19 = lean::cnstr_get(x_2, 1);
if (lean::is_exclusive(x_2)) {
 lean::cnstr_set(x_2, 0, lean::box(0));
 lean::cnstr_set(x_2, 1, lean::box(0));
 x_21 = x_2;
} else {
 lean::inc(x_17);
 lean::inc(x_19);
 lean::dec(x_2);
 x_21 = lean::box(0);
}
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
x_29 = lean::apply_6(x_17, x_3, x_4, x_5, x_6, x_7, x_8);
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
if (lean::obj_tag(x_30) == 0)
{
obj* x_32; 
x_32 = lean::cnstr_get(x_29, 1);
lean::inc(x_32);
lean::dec(x_29);
x_22 = x_30;
x_23 = x_32;
goto lbl_24;
}
else
{
uint8 x_35; 
x_35 = lean::cnstr_get_scalar<uint8>(x_30, sizeof(void*)*1);
if (lean::obj_tag(x_1) == 0)
{
if (x_35 == 0)
{
obj* x_36; obj* x_39; obj* x_41; uint8 x_42; obj* x_43; obj* x_44; 
x_36 = lean::cnstr_get(x_29, 1);
lean::inc(x_36);
lean::dec(x_29);
x_39 = lean::cnstr_get(x_30, 0);
if (lean::is_exclusive(x_30)) {
 x_41 = x_30;
} else {
 lean::inc(x_39);
 lean::dec(x_30);
 x_41 = lean::box(0);
}
x_42 = 0;
if (lean::is_scalar(x_41)) {
 x_43 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_43 = x_41;
}
lean::cnstr_set(x_43, 0, x_39);
lean::cnstr_set_scalar(x_43, sizeof(void*)*1, x_42);
x_44 = x_43;
x_22 = x_44;
x_23 = x_36;
goto lbl_24;
}
else
{
obj* x_45; obj* x_48; obj* x_50; uint8 x_51; obj* x_52; obj* x_53; 
x_45 = lean::cnstr_get(x_29, 1);
lean::inc(x_45);
lean::dec(x_29);
x_48 = lean::cnstr_get(x_30, 0);
if (lean::is_exclusive(x_30)) {
 x_50 = x_30;
} else {
 lean::inc(x_48);
 lean::dec(x_30);
 x_50 = lean::box(0);
}
x_51 = 1;
if (lean::is_scalar(x_50)) {
 x_52 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_52 = x_50;
}
lean::cnstr_set(x_52, 0, x_48);
lean::cnstr_set_scalar(x_52, sizeof(void*)*1, x_51);
x_53 = x_52;
x_22 = x_53;
x_23 = x_45;
goto lbl_24;
}
}
else
{
obj* x_54; obj* x_56; obj* x_57; 
x_54 = lean::cnstr_get(x_30, 0);
if (lean::is_exclusive(x_30)) {
 lean::cnstr_set(x_30, 0, lean::box(0));
 x_56 = x_30;
} else {
 lean::inc(x_54);
 lean::dec(x_30);
 x_56 = lean::box(0);
}
x_57 = lean::cnstr_get(x_54, 3);
lean::inc(x_57);
if (lean::obj_tag(x_57) == 0)
{
obj* x_59; obj* x_62; obj* x_64; obj* x_66; obj* x_68; obj* x_69; obj* x_71; obj* x_72; obj* x_74; obj* x_75; obj* x_76; 
x_59 = lean::cnstr_get(x_29, 1);
lean::inc(x_59);
lean::dec(x_29);
x_62 = lean::cnstr_get(x_54, 0);
x_64 = lean::cnstr_get(x_54, 1);
x_66 = lean::cnstr_get(x_54, 2);
if (lean::is_exclusive(x_54)) {
 lean::cnstr_release(x_54, 3);
 x_68 = x_54;
} else {
 lean::inc(x_62);
 lean::inc(x_64);
 lean::inc(x_66);
 lean::dec(x_54);
 x_68 = lean::box(0);
}
x_69 = lean::box(3);
lean::inc(x_1);
x_71 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_71, 0, x_69);
lean::cnstr_set(x_71, 1, x_1);
x_72 = l_List_reverse___rarg(x_71);
lean::inc(x_0);
x_74 = l_Lean_Parser_Syntax_mkNode(x_0, x_72);
x_75 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_75, 0, x_74);
if (lean::is_scalar(x_68)) {
 x_76 = lean::alloc_cnstr(0, 4, 0);
} else {
 x_76 = x_68;
}
lean::cnstr_set(x_76, 0, x_62);
lean::cnstr_set(x_76, 1, x_64);
lean::cnstr_set(x_76, 2, x_66);
lean::cnstr_set(x_76, 3, x_75);
if (x_35 == 0)
{
uint8 x_77; obj* x_78; obj* x_79; 
x_77 = 0;
if (lean::is_scalar(x_56)) {
 x_78 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_78 = x_56;
}
lean::cnstr_set(x_78, 0, x_76);
lean::cnstr_set_scalar(x_78, sizeof(void*)*1, x_77);
x_79 = x_78;
x_22 = x_79;
x_23 = x_59;
goto lbl_24;
}
else
{
uint8 x_80; obj* x_81; obj* x_82; 
x_80 = 1;
if (lean::is_scalar(x_56)) {
 x_81 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_81 = x_56;
}
lean::cnstr_set(x_81, 0, x_76);
lean::cnstr_set_scalar(x_81, sizeof(void*)*1, x_80);
x_82 = x_81;
x_22 = x_82;
x_23 = x_59;
goto lbl_24;
}
}
else
{
obj* x_83; obj* x_86; obj* x_88; obj* x_90; obj* x_92; obj* x_93; obj* x_95; obj* x_97; obj* x_98; obj* x_100; obj* x_101; obj* x_102; 
x_83 = lean::cnstr_get(x_29, 1);
lean::inc(x_83);
lean::dec(x_29);
x_86 = lean::cnstr_get(x_54, 0);
x_88 = lean::cnstr_get(x_54, 1);
x_90 = lean::cnstr_get(x_54, 2);
if (lean::is_exclusive(x_54)) {
 lean::cnstr_release(x_54, 3);
 x_92 = x_54;
} else {
 lean::inc(x_86);
 lean::inc(x_88);
 lean::inc(x_90);
 lean::dec(x_54);
 x_92 = lean::box(0);
}
x_93 = lean::cnstr_get(x_57, 0);
if (lean::is_exclusive(x_57)) {
 x_95 = x_57;
} else {
 lean::inc(x_93);
 lean::dec(x_57);
 x_95 = lean::box(0);
}
lean::inc(x_1);
x_97 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_97, 0, x_93);
lean::cnstr_set(x_97, 1, x_1);
x_98 = l_List_reverse___rarg(x_97);
lean::inc(x_0);
x_100 = l_Lean_Parser_Syntax_mkNode(x_0, x_98);
if (lean::is_scalar(x_95)) {
 x_101 = lean::alloc_cnstr(1, 1, 0);
} else {
 x_101 = x_95;
}
lean::cnstr_set(x_101, 0, x_100);
if (lean::is_scalar(x_92)) {
 x_102 = lean::alloc_cnstr(0, 4, 0);
} else {
 x_102 = x_92;
}
lean::cnstr_set(x_102, 0, x_86);
lean::cnstr_set(x_102, 1, x_88);
lean::cnstr_set(x_102, 2, x_90);
lean::cnstr_set(x_102, 3, x_101);
if (x_35 == 0)
{
uint8 x_103; obj* x_104; obj* x_105; 
x_103 = 0;
if (lean::is_scalar(x_56)) {
 x_104 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_104 = x_56;
}
lean::cnstr_set(x_104, 0, x_102);
lean::cnstr_set_scalar(x_104, sizeof(void*)*1, x_103);
x_105 = x_104;
x_22 = x_105;
x_23 = x_83;
goto lbl_24;
}
else
{
uint8 x_106; obj* x_107; obj* x_108; 
x_106 = 1;
if (lean::is_scalar(x_56)) {
 x_107 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_107 = x_56;
}
lean::cnstr_set(x_107, 0, x_102);
lean::cnstr_set_scalar(x_107, sizeof(void*)*1, x_106);
x_108 = x_107;
x_22 = x_108;
x_23 = x_83;
goto lbl_24;
}
}
}
}
lbl_24:
{
if (lean::obj_tag(x_22) == 0)
{
obj* x_109; obj* x_111; obj* x_113; obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_119; 
x_109 = lean::cnstr_get(x_22, 0);
x_111 = lean::cnstr_get(x_22, 1);
x_113 = lean::cnstr_get(x_22, 2);
if (lean::is_exclusive(x_22)) {
 x_115 = x_22;
} else {
 lean::inc(x_109);
 lean::inc(x_111);
 lean::inc(x_113);
 lean::dec(x_22);
 x_115 = lean::box(0);
}
if (lean::is_scalar(x_21)) {
 x_116 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_116 = x_21;
}
lean::cnstr_set(x_116, 0, x_109);
lean::cnstr_set(x_116, 1, x_1);
x_117 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_115)) {
 x_118 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_118 = x_115;
}
lean::cnstr_set(x_118, 0, x_116);
lean::cnstr_set(x_118, 1, x_111);
lean::cnstr_set(x_118, 2, x_117);
x_119 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_113, x_118);
if (lean::obj_tag(x_119) == 0)
{
obj* x_120; obj* x_122; obj* x_124; obj* x_127; obj* x_128; obj* x_130; obj* x_132; obj* x_133; obj* x_134; 
x_120 = lean::cnstr_get(x_119, 0);
lean::inc(x_120);
x_122 = lean::cnstr_get(x_119, 1);
lean::inc(x_122);
x_124 = lean::cnstr_get(x_119, 2);
lean::inc(x_124);
lean::dec(x_119);
x_127 = l_List_mfoldl___main___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__4(x_0, x_120, x_19, x_3, x_4, x_5, x_6, x_122, x_23);
x_128 = lean::cnstr_get(x_127, 0);
x_130 = lean::cnstr_get(x_127, 1);
if (lean::is_exclusive(x_127)) {
 x_132 = x_127;
} else {
 lean::inc(x_128);
 lean::inc(x_130);
 lean::dec(x_127);
 x_132 = lean::box(0);
}
x_133 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_124, x_128);
if (lean::is_scalar(x_132)) {
 x_134 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_134 = x_132;
}
lean::cnstr_set(x_134, 0, x_133);
lean::cnstr_set(x_134, 1, x_130);
return x_134;
}
else
{
obj* x_141; uint8 x_143; obj* x_144; obj* x_145; obj* x_146; obj* x_147; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_19);
x_141 = lean::cnstr_get(x_119, 0);
x_143 = lean::cnstr_get_scalar<uint8>(x_119, sizeof(void*)*1);
if (lean::is_exclusive(x_119)) {
 x_144 = x_119;
} else {
 lean::inc(x_141);
 lean::dec(x_119);
 x_144 = lean::box(0);
}
if (lean::is_scalar(x_144)) {
 x_145 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_145 = x_144;
}
lean::cnstr_set(x_145, 0, x_141);
lean::cnstr_set_scalar(x_145, sizeof(void*)*1, x_143);
x_146 = x_145;
x_147 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_147, 0, x_146);
lean::cnstr_set(x_147, 1, x_23);
return x_147;
}
}
else
{
obj* x_156; uint8 x_158; obj* x_159; obj* x_160; obj* x_161; obj* x_162; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_19);
lean::dec(x_21);
x_156 = lean::cnstr_get(x_22, 0);
x_158 = lean::cnstr_get_scalar<uint8>(x_22, sizeof(void*)*1);
if (lean::is_exclusive(x_22)) {
 x_159 = x_22;
} else {
 lean::inc(x_156);
 lean::dec(x_22);
 x_159 = lean::box(0);
}
if (lean::is_scalar(x_159)) {
 x_160 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_160 = x_159;
}
lean::cnstr_set(x_160, 0, x_156);
lean::cnstr_set_scalar(x_160, sizeof(void*)*1, x_158);
x_161 = x_160;
x_162 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_162, 0, x_161);
lean::cnstr_set(x_162, 1, x_23);
return x_162;
}
}
}
}
}
obj* l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_10; obj* x_11; 
x_8 = lean::box(0);
lean::inc(x_0);
x_10 = l_List_mfoldl___main___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__4(x_0, x_8, x_1, x_2, x_3, x_4, x_5, x_6, x_7);
x_11 = lean::cnstr_get(x_10, 0);
lean::inc(x_11);
if (lean::obj_tag(x_11) == 0)
{
obj* x_13; obj* x_15; obj* x_16; obj* x_18; obj* x_20; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; 
x_13 = lean::cnstr_get(x_10, 1);
if (lean::is_exclusive(x_10)) {
 lean::cnstr_release(x_10, 0);
 x_15 = x_10;
} else {
 lean::inc(x_13);
 lean::dec(x_10);
 x_15 = lean::box(0);
}
x_16 = lean::cnstr_get(x_11, 0);
x_18 = lean::cnstr_get(x_11, 1);
x_20 = lean::cnstr_get(x_11, 2);
if (lean::is_exclusive(x_11)) {
 x_22 = x_11;
} else {
 lean::inc(x_16);
 lean::inc(x_18);
 lean::inc(x_20);
 lean::dec(x_11);
 x_22 = lean::box(0);
}
x_23 = l_List_reverse___rarg(x_16);
x_24 = l_Lean_Parser_Syntax_mkNode(x_0, x_23);
x_25 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_22)) {
 x_26 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_26 = x_22;
}
lean::cnstr_set(x_26, 0, x_24);
lean::cnstr_set(x_26, 1, x_18);
lean::cnstr_set(x_26, 2, x_25);
x_27 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_20, x_26);
if (lean::is_scalar(x_15)) {
 x_28 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_28 = x_15;
}
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_13);
return x_28;
}
else
{
obj* x_30; obj* x_32; obj* x_33; uint8 x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
lean::dec(x_0);
x_30 = lean::cnstr_get(x_10, 1);
if (lean::is_exclusive(x_10)) {
 lean::cnstr_release(x_10, 0);
 x_32 = x_10;
} else {
 lean::inc(x_30);
 lean::dec(x_10);
 x_32 = lean::box(0);
}
x_33 = lean::cnstr_get(x_11, 0);
x_35 = lean::cnstr_get_scalar<uint8>(x_11, sizeof(void*)*1);
if (lean::is_exclusive(x_11)) {
 x_36 = x_11;
} else {
 lean::inc(x_33);
 lean::dec(x_11);
 x_36 = lean::box(0);
}
if (lean::is_scalar(x_36)) {
 x_37 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_37 = x_36;
}
lean::cnstr_set(x_37, 0, x_33);
lean::cnstr_set_scalar(x_37, sizeof(void*)*1, x_35);
x_38 = x_37;
if (lean::is_scalar(x_32)) {
 x_39 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_39 = x_32;
}
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_30);
return x_39;
}
}
}
obj* _init_l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_8; obj* x_9; obj* x_11; obj* x_13; 
x_0 = l_Lean_Parser_Level_leading_Parser_Lean_Parser_HasTokens;
x_1 = l_Lean_Parser_Level_trailing_Parser_Lean_Parser_HasTokens;
x_2 = l_List_append___rarg(x_0, x_1);
x_3 = l_Lean_Parser_tokens___rarg(x_2);
lean::dec(x_2);
x_5 = lean::box(0);
x_6 = l_Lean_Parser_List_cons_tokens___rarg(x_3, x_5);
lean::dec(x_3);
x_8 = l_Lean_Parser_Term_Lean_Parser_HasTokens;
x_9 = l_Lean_Parser_List_cons_tokens___rarg(x_8, x_6);
lean::dec(x_6);
x_11 = l_Lean_Parser_tokens___rarg(x_9);
lean::dec(x_9);
x_13 = l_Lean_Parser_tokens___rarg(x_11);
lean::dec(x_11);
return x_13;
}
}
obj* l_ReaderT_bind___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__1___boxed(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_ReaderT_bind___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__1(x_0, x_1);
lean::dec(x_0);
lean::dec(x_1);
return x_2;
}
}
obj* l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2___rarg___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; 
x_7 = l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2___rarg(x_0, x_1, x_2, x_3, x_4, x_5, x_6);
lean::dec(x_1);
return x_7;
}
}
obj* l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; uint8 x_8; 
x_7 = l_Lean_Parser_Term_sort;
x_8 = l_Lean_Parser_Syntax_isOfKind___main(x_7, x_0);
if (x_8 == 0)
{
obj* x_9; 
x_9 = l_Lean_Parser_ParsecT_failure___at_Lean_Parser_token___spec__4___rarg(x_5, x_6);
return x_9;
}
else
{
obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_10 = lean::box(0);
x_11 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_12 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_5);
lean::cnstr_set(x_12, 2, x_11);
x_13 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_6);
return x_13;
}
}
}
obj* l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView___lambda__2(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; 
x_5 = l_Lean_Parser_levelParser_run_Lean_Parser_HasView___closed__2;
x_6 = l_Lean_Parser_levelParser_run_Lean_Parser_HasView___closed__3;
x_7 = l_Lean_Parser_prattParser___at_Lean_Parser_levelParser_run___spec__1(x_5, x_6, x_0, x_1, x_3, x_4);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_22; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_getLeading___boxed), 6, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView___lambda__1___boxed), 7, 0);
lean::inc(x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_bind___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__1___rarg), 8, 2);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
x_4 = l_Lean_Parser_maxPrec;
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Level_Parser), 5, 1);
lean::closure_set(x_5, 0, x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView___lambda__2___boxed), 5, 1);
lean::closure_set(x_6, 0, x_5);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__3___rarg___boxed), 6, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2___rarg___boxed), 7, 1);
lean::closure_set(x_8, 0, x_7);
x_9 = lean::box(0);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_0);
lean::cnstr_set(x_11, 1, x_10);
x_12 = l_Lean_Parser_Term_sortApp;
lean::inc(x_11);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3), 8, 2);
lean::closure_set(x_14, 0, x_12);
lean::closure_set(x_14, 1, x_11);
x_15 = l_Lean_Parser_TrailingTermParserM_Monad;
x_16 = l_Lean_Parser_TrailingTermParserM_MonadExcept;
x_17 = l_Lean_Parser_TrailingTermParserM_Lean_Parser_MonadParsec;
x_18 = l_Lean_Parser_TrailingTermParserM_Alternative;
x_19 = l_Lean_Parser_Term_sortApp_HasView;
x_20 = l_Lean_Parser_Combinators_node_view___rarg(x_15, x_16, x_17, x_18, x_12, x_11, x_19);
lean::dec(x_11);
x_22 = l_Lean_Parser_Combinators_seqRight_view___rarg(x_18, lean::box(0), lean::box(0), x_3, x_14, x_20);
lean::dec(x_14);
lean::dec(x_3);
return x_22;
}
}
obj* l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView___lambda__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; 
x_7 = l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView___lambda__1(x_0, x_1, x_2, x_3, x_4, x_5, x_6);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_3);
lean::dec(x_4);
return x_7;
}
}
obj* l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView___lambda__2___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView___lambda__2(x_0, x_1, x_2, x_3, x_4);
lean::dec(x_2);
return x_5;
}
}
obj* _init_l_Lean_Parser_Term_sortApp_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = l_Lean_Parser_maxPrec;
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Level_Parser), 5, 1);
lean::closure_set(x_1, 0, x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView___lambda__2___boxed), 5, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__3___rarg___boxed), 6, 1);
lean::closure_set(x_3, 0, x_2);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2___rarg___boxed), 7, 1);
lean::closure_set(x_4, 0, x_3);
x_5 = lean::box(0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_4);
lean::cnstr_set(x_6, 1, x_5);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_getLeading___boxed), 6, 0);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_6);
return x_8;
}
}
obj* l_Lean_Parser_Term_sortApp_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_7; obj* x_8; 
lean::inc(x_0);
x_7 = l_Lean_Parser_Term_getLeading(x_0, x_1, x_2, x_3, x_4, x_5);
x_8 = lean::cnstr_get(x_7, 0);
lean::inc(x_8);
if (lean::obj_tag(x_8) == 0)
{
obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_17; obj* x_19; obj* x_20; uint8 x_21; 
x_10 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_release(x_7, 0);
 lean::cnstr_set(x_7, 1, lean::box(0));
 x_12 = x_7;
} else {
 lean::inc(x_10);
 lean::dec(x_7);
 x_12 = lean::box(0);
}
x_13 = lean::cnstr_get(x_8, 0);
x_15 = lean::cnstr_get(x_8, 1);
x_17 = lean::cnstr_get(x_8, 2);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_set(x_8, 0, lean::box(0));
 lean::cnstr_set(x_8, 1, lean::box(0));
 lean::cnstr_set(x_8, 2, lean::box(0));
 x_19 = x_8;
} else {
 lean::inc(x_13);
 lean::inc(x_15);
 lean::inc(x_17);
 lean::dec(x_8);
 x_19 = lean::box(0);
}
x_20 = l_Lean_Parser_Term_sort;
x_21 = l_Lean_Parser_Syntax_isOfKind___main(x_20, x_13);
lean::dec(x_13);
if (x_21 == 0)
{
obj* x_25; obj* x_26; obj* x_28; obj* x_30; obj* x_31; 
lean::dec(x_12);
lean::dec(x_19);
x_25 = l_Lean_Parser_ParsecT_failure___at_Lean_Parser_token___spec__4___rarg(x_15, x_10);
x_26 = lean::cnstr_get(x_25, 0);
x_28 = lean::cnstr_get(x_25, 1);
if (lean::is_exclusive(x_25)) {
 lean::cnstr_set(x_25, 0, lean::box(0));
 lean::cnstr_set(x_25, 1, lean::box(0));
 x_30 = x_25;
} else {
 lean::inc(x_26);
 lean::inc(x_28);
 lean::dec(x_25);
 x_30 = lean::box(0);
}
x_31 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_17, x_26);
if (lean::obj_tag(x_31) == 0)
{
obj* x_33; obj* x_35; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_43; obj* x_45; obj* x_46; obj* x_47; 
lean::dec(x_30);
x_33 = lean::cnstr_get(x_31, 1);
lean::inc(x_33);
x_35 = lean::cnstr_get(x_31, 2);
lean::inc(x_35);
lean::dec(x_31);
x_38 = l_Lean_Parser_Term_sortApp;
x_39 = l_Lean_Parser_Term_sortApp_Parser___closed__1;
x_40 = l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3(x_38, x_39, x_0, x_1, x_2, x_3, x_33, x_28);
x_41 = lean::cnstr_get(x_40, 0);
x_43 = lean::cnstr_get(x_40, 1);
if (lean::is_exclusive(x_40)) {
 x_45 = x_40;
} else {
 lean::inc(x_41);
 lean::inc(x_43);
 lean::dec(x_40);
 x_45 = lean::box(0);
}
x_46 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_35, x_41);
if (lean::is_scalar(x_45)) {
 x_47 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_47 = x_45;
}
lean::cnstr_set(x_47, 0, x_46);
lean::cnstr_set(x_47, 1, x_43);
return x_47;
}
else
{
obj* x_52; uint8 x_54; obj* x_55; obj* x_56; obj* x_57; obj* x_58; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_2);
x_52 = lean::cnstr_get(x_31, 0);
x_54 = lean::cnstr_get_scalar<uint8>(x_31, sizeof(void*)*1);
if (lean::is_exclusive(x_31)) {
 x_55 = x_31;
} else {
 lean::inc(x_52);
 lean::dec(x_31);
 x_55 = lean::box(0);
}
if (lean::is_scalar(x_55)) {
 x_56 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_56 = x_55;
}
lean::cnstr_set(x_56, 0, x_52);
lean::cnstr_set_scalar(x_56, sizeof(void*)*1, x_54);
x_57 = x_56;
if (lean::is_scalar(x_30)) {
 x_58 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_58 = x_30;
}
lean::cnstr_set(x_58, 0, x_57);
lean::cnstr_set(x_58, 1, x_28);
return x_58;
}
}
else
{
obj* x_59; obj* x_60; obj* x_61; obj* x_62; 
x_59 = lean::box(0);
x_60 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_19)) {
 x_61 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_61 = x_19;
}
lean::cnstr_set(x_61, 0, x_59);
lean::cnstr_set(x_61, 1, x_15);
lean::cnstr_set(x_61, 2, x_60);
x_62 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_17, x_61);
if (lean::obj_tag(x_62) == 0)
{
obj* x_64; obj* x_66; obj* x_69; obj* x_70; obj* x_71; obj* x_72; obj* x_74; obj* x_76; obj* x_77; obj* x_78; 
lean::dec(x_12);
x_64 = lean::cnstr_get(x_62, 1);
lean::inc(x_64);
x_66 = lean::cnstr_get(x_62, 2);
lean::inc(x_66);
lean::dec(x_62);
x_69 = l_Lean_Parser_Term_sortApp;
x_70 = l_Lean_Parser_Term_sortApp_Parser___closed__1;
x_71 = l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3(x_69, x_70, x_0, x_1, x_2, x_3, x_64, x_10);
x_72 = lean::cnstr_get(x_71, 0);
x_74 = lean::cnstr_get(x_71, 1);
if (lean::is_exclusive(x_71)) {
 x_76 = x_71;
} else {
 lean::inc(x_72);
 lean::inc(x_74);
 lean::dec(x_71);
 x_76 = lean::box(0);
}
x_77 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_66, x_72);
if (lean::is_scalar(x_76)) {
 x_78 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_78 = x_76;
}
lean::cnstr_set(x_78, 0, x_77);
lean::cnstr_set(x_78, 1, x_74);
return x_78;
}
else
{
obj* x_83; uint8 x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_2);
x_83 = lean::cnstr_get(x_62, 0);
x_85 = lean::cnstr_get_scalar<uint8>(x_62, sizeof(void*)*1);
if (lean::is_exclusive(x_62)) {
 x_86 = x_62;
} else {
 lean::inc(x_83);
 lean::dec(x_62);
 x_86 = lean::box(0);
}
if (lean::is_scalar(x_86)) {
 x_87 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_87 = x_86;
}
lean::cnstr_set(x_87, 0, x_83);
lean::cnstr_set_scalar(x_87, sizeof(void*)*1, x_85);
x_88 = x_87;
if (lean::is_scalar(x_12)) {
 x_89 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_89 = x_12;
}
lean::cnstr_set(x_89, 0, x_88);
lean::cnstr_set(x_89, 1, x_10);
return x_89;
}
}
}
else
{
obj* x_94; obj* x_96; obj* x_97; uint8 x_99; obj* x_100; obj* x_101; obj* x_102; obj* x_103; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_0);
lean::dec(x_2);
x_94 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_release(x_7, 0);
 x_96 = x_7;
} else {
 lean::inc(x_94);
 lean::dec(x_7);
 x_96 = lean::box(0);
}
x_97 = lean::cnstr_get(x_8, 0);
x_99 = lean::cnstr_get_scalar<uint8>(x_8, sizeof(void*)*1);
if (lean::is_exclusive(x_8)) {
 x_100 = x_8;
} else {
 lean::inc(x_97);
 lean::dec(x_8);
 x_100 = lean::box(0);
}
if (lean::is_scalar(x_100)) {
 x_101 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_101 = x_100;
}
lean::cnstr_set(x_101, 0, x_97);
lean::cnstr_set_scalar(x_101, sizeof(void*)*1, x_99);
x_102 = x_101;
if (lean::is_scalar(x_96)) {
 x_103 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_103 = x_96;
}
lean::cnstr_set(x_103, 0, x_102);
lean::cnstr_set(x_103, 1, x_94);
return x_103;
}
}
}
obj* _init_l_Lean_Parser_Term_app() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("app");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_app_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
lean::dec(x_0);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_8, 0, x_1);
lean::cnstr_set(x_8, 1, x_7);
x_9 = l_Lean_Parser_Term_app;
x_10 = l_Lean_Parser_Syntax_mkNode(x_9, x_8);
return x_10;
}
}
obj* _init_l_Lean_Parser_Term_app_HasView_x_27___elambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_1, 0, x_0);
lean::cnstr_set(x_1, 1, x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_app_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_app_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_9; 
x_9 = l_Lean_Parser_Term_app_HasView_x_27___elambda__2___closed__1;
return x_9;
}
else
{
obj* x_10; 
x_10 = lean::cnstr_get(x_6, 1);
lean::inc(x_10);
if (lean::obj_tag(x_10) == 0)
{
obj* x_12; obj* x_15; obj* x_16; 
x_12 = lean::cnstr_get(x_6, 0);
lean::inc(x_12);
lean::dec(x_6);
x_15 = lean::box(3);
x_16 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_16, 0, x_12);
lean::cnstr_set(x_16, 1, x_15);
return x_16;
}
else
{
obj* x_17; obj* x_20; obj* x_23; 
x_17 = lean::cnstr_get(x_6, 0);
lean::inc(x_17);
lean::dec(x_6);
x_20 = lean::cnstr_get(x_10, 0);
lean::inc(x_20);
lean::dec(x_10);
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_17);
lean::cnstr_set(x_23, 1, x_20);
return x_23;
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_app_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_app_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_app_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_app_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_app_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_app_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_4; obj* x_5; obj* x_7; obj* x_8; obj* x_10; 
x_0 = l_Lean_Parser_maxPrec;
x_1 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_0);
x_2 = l_Lean_Parser_tokens___rarg(x_1);
lean::dec(x_1);
x_4 = lean::box(0);
x_5 = l_Lean_Parser_List_cons_tokens___rarg(x_2, x_4);
lean::dec(x_2);
x_7 = l_Lean_Parser_Term_Lean_Parser_HasTokens;
x_8 = l_Lean_Parser_List_cons_tokens___rarg(x_7, x_5);
lean::dec(x_5);
x_10 = l_Lean_Parser_tokens___rarg(x_8);
lean::dec(x_8);
return x_10;
}
}
obj* l_Lean_Parser_Term_app_Parser_Lean_Parser_HasView___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; 
x_6 = l_Lean_Parser_maxPrec;
x_7 = l_Lean_Parser_Term_Parser(x_6, x_1, x_2, x_3, x_4, x_5);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_app_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_app_Parser_Lean_Parser_HasView___lambda__1___boxed), 6, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_getLeading___boxed), 6, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
x_5 = l_Lean_Parser_TrailingTermParserM_Monad;
x_6 = l_Lean_Parser_TrailingTermParserM_MonadExcept;
x_7 = l_Lean_Parser_TrailingTermParserM_Lean_Parser_MonadParsec;
x_8 = l_Lean_Parser_TrailingTermParserM_Alternative;
x_9 = l_Lean_Parser_Term_app;
x_10 = l_Lean_Parser_Term_app_HasView;
x_11 = l_Lean_Parser_Combinators_node_view___rarg(x_5, x_6, x_7, x_8, x_9, x_4, x_10);
lean::dec(x_4);
return x_11;
}
}
obj* l_Lean_Parser_Term_app_Parser_Lean_Parser_HasView___lambda__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_Lean_Parser_Term_app_Parser_Lean_Parser_HasView___lambda__1(x_0, x_1, x_2, x_3, x_4, x_5);
lean::dec(x_0);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_app_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_app_Parser_Lean_Parser_HasView___lambda__1___boxed), 6, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_getLeading___boxed), 6, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
return x_4;
}
}
obj* l_Lean_Parser_Term_app_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; 
x_6 = l_Lean_Parser_Term_app;
x_7 = l_Lean_Parser_Term_app_Parser___closed__1;
x_8 = l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3(x_6, x_7, x_0, x_1, x_2, x_3, x_4, x_5);
return x_8;
}
}
obj* l_List_foldl___main___at_Lean_Parser_Term_mkApp___spec__1(obj* x_0, obj* x_1) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
return x_0;
}
else
{
obj* x_2; obj* x_4; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_2 = lean::cnstr_get(x_1, 0);
x_4 = lean::cnstr_get(x_1, 1);
if (lean::is_exclusive(x_1)) {
 x_6 = x_1;
} else {
 lean::inc(x_2);
 lean::inc(x_4);
 lean::dec(x_1);
 x_6 = lean::box(0);
}
x_7 = lean::box(0);
if (lean::is_scalar(x_6)) {
 x_8 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_8 = x_6;
}
lean::cnstr_set(x_8, 0, x_2);
lean::cnstr_set(x_8, 1, x_7);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_0);
lean::cnstr_set(x_9, 1, x_8);
x_10 = l_Lean_Parser_Term_app;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
x_0 = x_11;
x_1 = x_4;
goto _start;
}
}
}
obj* l_Lean_Parser_Term_mkApp(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_List_foldl___main___at_Lean_Parser_Term_mkApp___spec__1(x_0, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_arrow() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("arrow");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_arrow_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = lean::box(0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_5);
lean::cnstr_set(x_9, 1, x_8);
x_10 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_10, 0, x_3);
lean::cnstr_set(x_10, 1, x_9);
x_11 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_11, 0, x_1);
lean::cnstr_set(x_11, 1, x_10);
x_12 = l_Lean_Parser_Term_arrow;
x_13 = l_Lean_Parser_Syntax_mkNode(x_12, x_11);
return x_13;
}
}
obj* _init_l_Lean_Parser_Term_arrow_HasView_x_27___elambda__2___closed__1() {
_start:
{
obj* x_0; obj* x_1; 
x_0 = lean::box(3);
x_1 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_1, 0, x_0);
lean::cnstr_set(x_1, 1, x_0);
lean::cnstr_set(x_1, 2, x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_arrow_HasView_x_27___elambda__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_arrow_HasView_x_27___elambda__2___closed__1;
return x_2;
}
else
{
obj* x_3; obj* x_6; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 1);
lean::inc(x_6);
lean::dec(x_3);
if (lean::obj_tag(x_6) == 0)
{
obj* x_9; 
x_9 = l_Lean_Parser_Term_arrow_HasView_x_27___elambda__2___closed__1;
return x_9;
}
else
{
obj* x_10; 
x_10 = lean::cnstr_get(x_6, 1);
lean::inc(x_10);
if (lean::obj_tag(x_10) == 0)
{
obj* x_12; obj* x_15; obj* x_16; 
x_12 = lean::cnstr_get(x_6, 0);
lean::inc(x_12);
lean::dec(x_6);
x_15 = lean::box(3);
x_16 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_16, 0, x_12);
lean::cnstr_set(x_16, 1, x_15);
lean::cnstr_set(x_16, 2, x_15);
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_10, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; obj* x_25; obj* x_26; 
x_19 = lean::cnstr_get(x_6, 0);
lean::inc(x_19);
lean::dec(x_6);
x_22 = lean::cnstr_get(x_10, 0);
lean::inc(x_22);
lean::dec(x_10);
x_25 = lean::box(3);
x_26 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_26, 0, x_19);
lean::cnstr_set(x_26, 1, x_22);
lean::cnstr_set(x_26, 2, x_25);
return x_26;
}
else
{
obj* x_27; obj* x_30; obj* x_33; obj* x_36; 
x_27 = lean::cnstr_get(x_6, 0);
lean::inc(x_27);
lean::dec(x_6);
x_30 = lean::cnstr_get(x_10, 0);
lean::inc(x_30);
lean::dec(x_10);
x_33 = lean::cnstr_get(x_17, 0);
lean::inc(x_33);
lean::dec(x_17);
x_36 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_36, 0, x_27);
lean::cnstr_set(x_36, 1, x_30);
lean::cnstr_set(x_36, 2, x_33);
return x_36;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_arrow_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_arrow_HasView_x_27___elambda__2), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_arrow_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_arrow_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_arrow_HasView_x_27;
return x_0;
}
}
obj* l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasTokens___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
obj* x_9; obj* x_11; obj* x_13; obj* x_14; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; 
x_9 = l_String_trim(x_0);
lean::inc(x_9);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_11, 0, x_9);
lean::inc(x_2);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___spec__1___boxed), 6, 3);
lean::closure_set(x_13, 0, x_9);
lean::closure_set(x_13, 1, x_2);
lean::closure_set(x_13, 2, x_11);
x_14 = l_String_trim(x_1);
lean::inc(x_14);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_16, 0, x_14);
x_17 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_symbolCore___at_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___spec__1___boxed), 6, 3);
lean::closure_set(x_17, 0, x_14);
lean::closure_set(x_17, 1, x_2);
lean::closure_set(x_17, 2, x_16);
x_18 = lean::box(0);
x_19 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set(x_19, 1, x_18);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_13);
lean::cnstr_set(x_20, 1, x_19);
x_21 = l_Lean_Parser_Combinators_anyOf___at_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___spec__2(x_20, x_5, x_7, x_8);
return x_21;
}
}
obj* _init_l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_6; obj* x_7; obj* x_8; obj* x_10; obj* x_11; obj* x_13; obj* x_16; obj* x_17; obj* x_19; 
x_0 = lean::mk_string("\xe2\x86\x92");
x_1 = lean::mk_string("->");
x_2 = lean::mk_nat_obj(25ul);
x_3 = l_Lean_Parser_unicodeSymbol_Lean_Parser_HasTokens___rarg(x_0, x_1, x_2);
lean::dec(x_1);
lean::dec(x_0);
x_6 = lean::mk_nat_obj(24ul);
x_7 = l_Lean_Parser_Term_Parser_Lean_Parser_HasTokens(x_6);
x_8 = l_Lean_Parser_tokens___rarg(x_7);
lean::dec(x_7);
x_10 = lean::box(0);
x_11 = l_Lean_Parser_List_cons_tokens___rarg(x_8, x_10);
lean::dec(x_8);
x_13 = l_Lean_Parser_List_cons_tokens___rarg(x_3, x_11);
lean::dec(x_11);
lean::dec(x_3);
x_16 = l_Lean_Parser_Term_Lean_Parser_HasTokens;
x_17 = l_Lean_Parser_List_cons_tokens___rarg(x_16, x_13);
lean::dec(x_13);
x_19 = l_Lean_Parser_tokens___rarg(x_17);
lean::dec(x_17);
return x_19;
}
}
obj* l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasTokens___spec__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
obj* x_9; 
x_9 = l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasTokens___spec__1(x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_4);
lean::dec(x_6);
return x_9;
}
}
obj* l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasView___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; 
x_6 = lean::mk_nat_obj(24ul);
x_7 = l_Lean_Parser_Term_Parser(x_6, x_1, x_2, x_3, x_4, x_5);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; 
x_0 = lean::mk_string("\xe2\x86\x92");
x_1 = lean::mk_string("->");
x_2 = lean::mk_nat_obj(25ul);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasTokens___spec__1___boxed), 9, 3);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
lean::closure_set(x_3, 2, x_2);
x_4 = lean::box(0);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasView___lambda__1___boxed), 6, 0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_getLeading___boxed), 6, 0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
x_10 = l_Lean_Parser_TrailingTermParserM_Monad;
x_11 = l_Lean_Parser_TrailingTermParserM_MonadExcept;
x_12 = l_Lean_Parser_TrailingTermParserM_Lean_Parser_MonadParsec;
x_13 = l_Lean_Parser_TrailingTermParserM_Alternative;
x_14 = l_Lean_Parser_Term_arrow;
x_15 = l_Lean_Parser_Term_arrow_HasView;
x_16 = l_Lean_Parser_Combinators_node_view___rarg(x_10, x_11, x_12, x_13, x_14, x_9, x_15);
lean::dec(x_9);
return x_16;
}
}
obj* l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasView___lambda__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasView___lambda__1(x_0, x_1, x_2, x_3, x_4, x_5);
lean::dec(x_0);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_arrow_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; 
x_0 = lean::mk_string("\xe2\x86\x92");
x_1 = lean::mk_string("->");
x_2 = lean::mk_nat_obj(25ul);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_unicodeSymbol___at_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasTokens___spec__1___boxed), 9, 3);
lean::closure_set(x_3, 0, x_0);
lean::closure_set(x_3, 1, x_1);
lean::closure_set(x_3, 2, x_2);
x_4 = lean::box(0);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasView___lambda__1___boxed), 6, 0);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_4);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_3);
lean::cnstr_set(x_7, 1, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_getLeading___boxed), 6, 0);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_7);
return x_9;
}
}
obj* l_Lean_Parser_Term_arrow_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; 
x_6 = l_Lean_Parser_Term_arrow;
x_7 = l_Lean_Parser_Term_arrow_Parser___closed__1;
x_8 = l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3(x_6, x_7, x_0, x_1, x_2, x_3, x_4, x_5);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_projectionSpec() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("projectionSpec");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_projectionSpec_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::box(0);
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; 
x_2 = lean::cnstr_get(x_0, 0);
lean::inc(x_2);
lean::dec(x_0);
x_5 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_5, 0, x_2);
x_6 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_6, 0, x_5);
lean::cnstr_set(x_6, 1, x_1);
x_7 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__1;
x_8 = l_Lean_Parser_Syntax_mkNode(x_7, x_6);
x_9 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_9, 0, x_8);
lean::cnstr_set(x_9, 1, x_1);
x_10 = l_Lean_Parser_Term_projectionSpec;
x_11 = l_Lean_Parser_Syntax_mkNode(x_10, x_9);
return x_11;
}
else
{
obj* x_12; obj* x_15; obj* x_16; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_12 = lean::cnstr_get(x_0, 0);
lean::inc(x_12);
lean::dec(x_0);
x_15 = l_Lean_Parser_number_HasView;
x_16 = lean::cnstr_get(x_15, 1);
lean::inc(x_16);
lean::dec(x_15);
x_19 = lean::apply_1(x_16, x_12);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_1);
x_21 = l_Lean_Parser_detailIdentPart_HasView_x_27___elambda__1___closed__3;
x_22 = l_Lean_Parser_Syntax_mkNode(x_21, x_20);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_1);
x_24 = l_Lean_Parser_Term_projectionSpec;
x_25 = l_Lean_Parser_Syntax_mkNode(x_24, x_23);
return x_25;
}
}
}
obj* _init_l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("NOTAnIdent");
lean::inc(x_1);
x_3 = l_Lean_Parser_Substring_ofString(x_1);
x_4 = lean::box(0);
x_5 = lean_name_mk_string(x_4, x_1);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(0, 5, 0);
lean::cnstr_set(x_7, 0, x_0);
lean::cnstr_set(x_7, 1, x_3);
lean::cnstr_set(x_7, 2, x_5);
lean::cnstr_set(x_7, 3, x_6);
lean::cnstr_set(x_7, 4, x_6);
x_8 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_8, 0, x_7);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__1;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__2;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__4() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("projectionSpec");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_1) == 0)
{
obj* x_2; 
x_2 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3;
return x_2;
}
else
{
obj* x_3; obj* x_6; obj* x_8; obj* x_11; uint8 x_12; 
x_3 = lean::cnstr_get(x_1, 0);
lean::inc(x_3);
lean::dec(x_1);
x_6 = lean::cnstr_get(x_3, 0);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_3, 1);
lean::inc(x_8);
lean::dec(x_3);
x_11 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__4;
x_12 = lean_name_dec_eq(x_6, x_11);
lean::dec(x_6);
if (x_12 == 0)
{
obj* x_15; 
lean::dec(x_8);
x_15 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3;
return x_15;
}
else
{
if (lean::obj_tag(x_8) == 0)
{
obj* x_16; 
x_16 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3;
return x_16;
}
else
{
obj* x_17; 
x_17 = lean::cnstr_get(x_8, 1);
lean::inc(x_17);
if (lean::obj_tag(x_17) == 0)
{
obj* x_19; obj* x_22; 
x_19 = lean::cnstr_get(x_8, 0);
lean::inc(x_19);
lean::dec(x_8);
x_22 = l_Lean_Parser_Syntax_asNode___main(x_19);
if (lean::obj_tag(x_22) == 0)
{
obj* x_23; 
x_23 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3;
return x_23;
}
else
{
obj* x_24; obj* x_27; 
x_24 = lean::cnstr_get(x_22, 0);
lean::inc(x_24);
lean::dec(x_22);
x_27 = lean::cnstr_get(x_24, 0);
lean::inc(x_27);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; 
lean::dec(x_24);
x_30 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3;
return x_30;
}
case 1:
{
obj* x_33; 
lean::dec(x_27);
lean::dec(x_24);
x_33 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3;
return x_33;
}
default:
{
obj* x_34; obj* x_37; obj* x_39; obj* x_42; uint8 x_43; 
x_34 = lean::cnstr_get(x_24, 1);
lean::inc(x_34);
lean::dec(x_24);
x_37 = lean::cnstr_get(x_27, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_27, 1);
lean::inc(x_39);
lean::dec(x_27);
x_42 = lean::box(0);
x_43 = lean_name_dec_eq(x_37, x_42);
lean::dec(x_37);
if (x_43 == 0)
{
obj* x_47; 
lean::dec(x_34);
lean::dec(x_39);
x_47 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3;
return x_47;
}
else
{
if (lean::obj_tag(x_34) == 0)
{
obj* x_49; 
lean::dec(x_39);
x_49 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3;
return x_49;
}
else
{
obj* x_50; 
x_50 = lean::cnstr_get(x_34, 1);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; uint8 x_56; 
x_52 = lean::cnstr_get(x_34, 0);
lean::inc(x_52);
lean::dec(x_34);
x_55 = lean::mk_nat_obj(0ul);
x_56 = lean::nat_dec_eq(x_39, x_55);
lean::dec(x_39);
if (x_56 == 0)
{
obj* x_58; obj* x_59; obj* x_62; obj* x_63; 
x_58 = l_Lean_Parser_number_HasView;
x_59 = lean::cnstr_get(x_58, 0);
lean::inc(x_59);
lean::dec(x_58);
x_62 = lean::apply_1(x_59, x_52);
x_63 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_63, 0, x_62);
return x_63;
}
else
{
switch (lean::obj_tag(x_52)) {
case 1:
{
obj* x_64; obj* x_67; 
x_64 = lean::cnstr_get(x_52, 0);
lean::inc(x_64);
lean::dec(x_52);
x_67 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_67, 0, x_64);
return x_67;
}
case 3:
{
obj* x_68; 
x_68 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__2;
return x_68;
}
default:
{
obj* x_70; 
lean::dec(x_52);
x_70 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__2;
return x_70;
}
}
}
}
else
{
obj* x_74; 
lean::dec(x_50);
lean::dec(x_34);
lean::dec(x_39);
x_74 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3;
return x_74;
}
}
}
}
}
}
}
else
{
obj* x_77; 
lean::dec(x_8);
lean::dec(x_17);
x_77 = l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3;
return x_77;
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_projectionSpec_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_projectionSpec_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_projectionSpec_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_projectionSpec_HasView_x_27;
return x_0;
}
}
obj* _init_l_Lean_Parser_Term_projection() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_0 = lean::box(0);
x_1 = lean::mk_string("Lean");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::mk_string("Parser");
x_4 = lean_name_mk_string(x_2, x_3);
x_5 = lean::mk_string("Term");
x_6 = lean_name_mk_string(x_4, x_5);
x_7 = lean::mk_string("projection");
x_8 = lean_name_mk_string(x_6, x_7);
return x_8;
}
}
obj* l_Lean_Parser_Term_projection_HasView_x_27___elambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_3; obj* x_5; obj* x_8; obj* x_9; obj* x_12; obj* x_13; obj* x_14; 
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
x_3 = lean::cnstr_get(x_0, 1);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 2);
lean::inc(x_5);
lean::dec(x_0);
x_8 = l_Lean_Parser_Term_projectionSpec_HasView;
x_9 = lean::cnstr_get(x_8, 1);
lean::inc(x_9);
lean::dec(x_8);
x_12 = lean::apply_1(x_9, x_5);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
if (lean::obj_tag(x_3) == 0)
{
obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; 
x_15 = lean::box(3);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_15);
lean::cnstr_set(x_16, 1, x_14);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_1);
lean::cnstr_set(x_17, 1, x_16);
x_18 = l_Lean_Parser_Term_projection;
x_19 = l_Lean_Parser_Syntax_mkNode(x_18, x_17);
return x_19;
}
else
{
obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; 
x_20 = lean::cnstr_get(x_3, 0);
lean::inc(x_20);
lean::dec(x_3);
x_23 = lean::alloc_cnstr(0, 1, 0);
lean::cnstr_set(x_23, 0, x_20);
x_24 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_24, 0, x_23);
lean::cnstr_set(x_24, 1, x_14);
x_25 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_25, 0, x_1);
lean::cnstr_set(x_25, 1, x_24);
x_26 = l_Lean_Parser_Term_projection;
x_27 = l_Lean_Parser_Syntax_mkNode(x_26, x_25);
return x_27;
}
}
}
obj* _init_l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_4; obj* x_5; 
x_0 = l_Lean_Parser_Term_projectionSpec_HasView;
x_1 = lean::cnstr_get(x_0, 0);
lean::inc(x_1);
lean::dec(x_0);
x_4 = lean::box(3);
x_5 = lean::apply_1(x_1, x_4);
return x_5;
}
}
obj* _init_l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; 
x_0 = lean::box(0);
x_1 = lean::box(3);
x_2 = l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__1;
x_3 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_3, 0, x_1);
lean::cnstr_set(x_3, 1, x_0);
lean::cnstr_set(x_3, 2, x_2);
return x_3;
}
}
obj* l_Lean_Parser_Term_projection_HasView_x_27___lambda__1(obj* x_0) {
_start:
{
obj* x_1; obj* x_2; obj* x_4; 
x_4 = l_Lean_Parser_Syntax_asNode___main(x_0);
if (lean::obj_tag(x_4) == 0)
{
obj* x_5; 
x_5 = l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__2;
return x_5;
}
else
{
obj* x_6; obj* x_9; 
x_6 = lean::cnstr_get(x_4, 0);
lean::inc(x_6);
lean::dec(x_4);
x_9 = lean::cnstr_get(x_6, 1);
lean::inc(x_9);
lean::dec(x_6);
if (lean::obj_tag(x_9) == 0)
{
obj* x_12; 
x_12 = lean::box(3);
x_1 = x_9;
x_2 = x_12;
goto lbl_3;
}
else
{
obj* x_13; obj* x_15; 
x_13 = lean::cnstr_get(x_9, 0);
lean::inc(x_13);
x_15 = lean::cnstr_get(x_9, 1);
lean::inc(x_15);
lean::dec(x_9);
x_1 = x_15;
x_2 = x_13;
goto lbl_3;
}
}
lbl_3:
{
obj* x_18; obj* x_19; 
if (lean::obj_tag(x_1) == 0)
{
obj* x_21; 
x_21 = lean::box(3);
x_18 = x_1;
x_19 = x_21;
goto lbl_20;
}
else
{
obj* x_22; obj* x_24; 
x_22 = lean::cnstr_get(x_1, 0);
lean::inc(x_22);
x_24 = lean::cnstr_get(x_1, 1);
lean::inc(x_24);
lean::dec(x_1);
x_18 = x_24;
x_19 = x_22;
goto lbl_20;
}
lbl_20:
{
switch (lean::obj_tag(x_19)) {
case 0:
{
obj* x_27; obj* x_30; 
x_27 = lean::cnstr_get(x_19, 0);
lean::inc(x_27);
lean::dec(x_19);
x_30 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_30, 0, x_27);
if (lean::obj_tag(x_18) == 0)
{
obj* x_31; obj* x_32; 
x_31 = l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__1;
x_32 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_32, 0, x_2);
lean::cnstr_set(x_32, 1, x_30);
lean::cnstr_set(x_32, 2, x_31);
return x_32;
}
else
{
obj* x_33; obj* x_36; obj* x_37; obj* x_40; obj* x_41; 
x_33 = lean::cnstr_get(x_18, 0);
lean::inc(x_33);
lean::dec(x_18);
x_36 = l_Lean_Parser_Term_projectionSpec_HasView;
x_37 = lean::cnstr_get(x_36, 0);
lean::inc(x_37);
lean::dec(x_36);
x_40 = lean::apply_1(x_37, x_33);
x_41 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_41, 0, x_2);
lean::cnstr_set(x_41, 1, x_30);
lean::cnstr_set(x_41, 2, x_40);
return x_41;
}
}
case 3:
{
obj* x_42; 
x_42 = lean::box(0);
if (lean::obj_tag(x_18) == 0)
{
obj* x_43; obj* x_44; 
x_43 = l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__1;
x_44 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_44, 0, x_2);
lean::cnstr_set(x_44, 1, x_42);
lean::cnstr_set(x_44, 2, x_43);
return x_44;
}
else
{
obj* x_45; obj* x_48; obj* x_49; obj* x_52; obj* x_53; 
x_45 = lean::cnstr_get(x_18, 0);
lean::inc(x_45);
lean::dec(x_18);
x_48 = l_Lean_Parser_Term_projectionSpec_HasView;
x_49 = lean::cnstr_get(x_48, 0);
lean::inc(x_49);
lean::dec(x_48);
x_52 = lean::apply_1(x_49, x_45);
x_53 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_53, 0, x_2);
lean::cnstr_set(x_53, 1, x_42);
lean::cnstr_set(x_53, 2, x_52);
return x_53;
}
}
default:
{
obj* x_55; 
lean::dec(x_19);
x_55 = lean::box(0);
if (lean::obj_tag(x_18) == 0)
{
obj* x_56; obj* x_57; 
x_56 = l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__1;
x_57 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_57, 0, x_2);
lean::cnstr_set(x_57, 1, x_55);
lean::cnstr_set(x_57, 2, x_56);
return x_57;
}
else
{
obj* x_58; obj* x_61; obj* x_62; obj* x_65; obj* x_66; 
x_58 = lean::cnstr_get(x_18, 0);
lean::inc(x_58);
lean::dec(x_18);
x_61 = l_Lean_Parser_Term_projectionSpec_HasView;
x_62 = lean::cnstr_get(x_61, 0);
lean::inc(x_62);
lean::dec(x_61);
x_65 = lean::apply_1(x_62, x_58);
x_66 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_66, 0, x_2);
lean::cnstr_set(x_66, 1, x_55);
lean::cnstr_set(x_66, 2, x_65);
return x_66;
}
}
}
}
}
}
}
obj* _init_l_Lean_Parser_Term_projection_HasView_x_27() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_projection_HasView_x_27___lambda__1), 1, 0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_projection_HasView_x_27___elambda__1), 1, 0);
x_2 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_2, 0, x_0);
lean::cnstr_set(x_2, 1, x_1);
return x_2;
}
}
obj* _init_l_Lean_Parser_Term_projection_HasView() {
_start:
{
obj* x_0; 
x_0 = l_Lean_Parser_Term_projection_HasView_x_27;
return x_0;
}
}
obj* l_Lean_Parser_MonadParsec_strCore___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
uint8 x_8; 
x_8 = l_String_isEmpty(x_0);
if (x_8 == 0)
{
obj* x_9; obj* x_10; obj* x_12; obj* x_14; 
x_9 = lean::string_length(x_0);
x_10 = lean::mk_nat_obj(0ul);
lean::inc(x_0);
x_12 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_12, 0, x_0);
lean::cnstr_set(x_12, 1, x_10);
lean::cnstr_set(x_12, 2, x_10);
lean::inc(x_6);
x_14 = l___private_init_lean_parser_parsec_2__strAux___main(x_9, x_12, x_6);
if (lean::obj_tag(x_14) == 0)
{
obj* x_16; obj* x_17; obj* x_18; uint8 x_19; obj* x_20; obj* x_21; obj* x_22; 
lean::dec(x_0);
x_16 = lean::box(0);
x_17 = l_String_splitAux___main___closed__1;
x_18 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_18, 0, x_6);
lean::cnstr_set(x_18, 1, x_17);
lean::cnstr_set(x_18, 2, x_1);
lean::cnstr_set(x_18, 3, x_16);
x_19 = 0;
x_20 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_20, 0, x_18);
lean::cnstr_set_scalar(x_20, sizeof(void*)*1, x_19);
x_21 = x_20;
x_22 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_7);
return x_22;
}
else
{
obj* x_25; obj* x_28; obj* x_29; obj* x_30; 
lean::dec(x_1);
lean::dec(x_6);
x_25 = lean::cnstr_get(x_14, 0);
lean::inc(x_25);
lean::dec(x_14);
x_28 = lean::box(0);
x_29 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_29, 0, x_0);
lean::cnstr_set(x_29, 1, x_25);
lean::cnstr_set(x_29, 2, x_28);
x_30 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_7);
return x_30;
}
}
else
{
obj* x_33; obj* x_34; obj* x_35; obj* x_36; 
lean::dec(x_1);
lean::dec(x_0);
x_33 = l_String_splitAux___main___closed__1;
x_34 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_35 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_35, 0, x_33);
lean::cnstr_set(x_35, 1, x_6);
lean::cnstr_set(x_35, 2, x_34);
x_36 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_7);
return x_36;
}
}
}
obj* l_Lean_Parser_ident_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__2___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_6; obj* x_7; 
lean::inc(x_2);
lean::inc(x_0);
x_6 = l_Lean_Parser_token(x_0, x_2, x_3);
x_7 = lean::cnstr_get(x_6, 0);
lean::inc(x_7);
if (lean::obj_tag(x_7) == 0)
{
obj* x_9; obj* x_11; obj* x_12; obj* x_14; obj* x_16; obj* x_18; obj* x_19; 
x_9 = lean::cnstr_get(x_6, 1);
if (lean::is_exclusive(x_6)) {
 lean::cnstr_release(x_6, 0);
 lean::cnstr_set(x_6, 1, lean::box(0));
 x_11 = x_6;
} else {
 lean::inc(x_9);
 lean::dec(x_6);
 x_11 = lean::box(0);
}
x_12 = lean::cnstr_get(x_7, 0);
x_14 = lean::cnstr_get(x_7, 1);
x_16 = lean::cnstr_get(x_7, 2);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_set(x_7, 0, lean::box(0));
 lean::cnstr_set(x_7, 1, lean::box(0));
 lean::cnstr_set(x_7, 2, lean::box(0));
 x_18 = x_7;
} else {
 lean::inc(x_12);
 lean::inc(x_14);
 lean::inc(x_16);
 lean::dec(x_7);
 x_18 = lean::box(0);
}
switch (lean::obj_tag(x_12)) {
case 1:
{
obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; 
lean::dec(x_0);
lean::dec(x_2);
x_23 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_18)) {
 x_24 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_24 = x_18;
}
lean::cnstr_set(x_24, 0, x_12);
lean::cnstr_set(x_24, 1, x_14);
lean::cnstr_set(x_24, 2, x_23);
x_25 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_16, x_24);
x_26 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_23, x_25);
x_27 = l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___rarg___closed__1;
x_28 = l_Lean_Parser_ParsecT_labelsMkRes___rarg(x_26, x_27);
x_29 = l_Lean_Parser_ParsecT_tryMkRes___rarg(x_28);
if (lean::is_scalar(x_11)) {
 x_30 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_30 = x_11;
}
lean::cnstr_set(x_30, 0, x_29);
lean::cnstr_set(x_30, 1, x_9);
return x_30;
}
case 3:
{
obj* x_33; 
lean::dec(x_11);
lean::dec(x_18);
x_33 = lean::box(0);
x_19 = x_33;
goto lbl_20;
}
default:
{
obj* x_37; 
lean::dec(x_11);
lean::dec(x_12);
lean::dec(x_18);
x_37 = lean::box(0);
x_19 = x_37;
goto lbl_20;
}
}
lbl_20:
{
obj* x_39; obj* x_40; obj* x_41; obj* x_42; obj* x_43; obj* x_45; obj* x_47; obj* x_49; obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_54; obj* x_55; 
lean::dec(x_19);
x_39 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_39, 0, x_2);
x_40 = lean::box(0);
x_41 = l_String_splitAux___main___closed__1;
x_42 = l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___rarg___closed__1;
x_43 = l_Lean_Parser_MonadParsec_error___at___private_init_lean_parser_token_1__finishCommentBlockAux___main___spec__1___rarg(x_41, x_42, x_39, x_40, x_0, x_14, x_9);
lean::dec(x_0);
x_45 = lean::cnstr_get(x_43, 0);
x_47 = lean::cnstr_get(x_43, 1);
if (lean::is_exclusive(x_43)) {
 x_49 = x_43;
} else {
 lean::inc(x_45);
 lean::inc(x_47);
 lean::dec(x_43);
 x_49 = lean::box(0);
}
x_50 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_16, x_45);
x_51 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_52 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_51, x_50);
x_53 = l_Lean_Parser_ParsecT_labelsMkRes___rarg(x_52, x_42);
x_54 = l_Lean_Parser_ParsecT_tryMkRes___rarg(x_53);
if (lean::is_scalar(x_49)) {
 x_55 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_55 = x_49;
}
lean::cnstr_set(x_55, 0, x_54);
lean::cnstr_set(x_55, 1, x_47);
return x_55;
}
}
else
{
obj* x_58; obj* x_60; obj* x_61; uint8 x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; obj* x_69; obj* x_70; obj* x_71; obj* x_72; 
lean::dec(x_0);
lean::dec(x_2);
x_58 = lean::cnstr_get(x_6, 1);
if (lean::is_exclusive(x_6)) {
 lean::cnstr_release(x_6, 0);
 x_60 = x_6;
} else {
 lean::inc(x_58);
 lean::dec(x_6);
 x_60 = lean::box(0);
}
x_61 = lean::cnstr_get(x_7, 0);
x_63 = lean::cnstr_get_scalar<uint8>(x_7, sizeof(void*)*1);
if (lean::is_exclusive(x_7)) {
 x_64 = x_7;
} else {
 lean::inc(x_61);
 lean::dec(x_7);
 x_64 = lean::box(0);
}
if (lean::is_scalar(x_64)) {
 x_65 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_65 = x_64;
}
lean::cnstr_set(x_65, 0, x_61);
lean::cnstr_set_scalar(x_65, sizeof(void*)*1, x_63);
x_66 = x_65;
x_67 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_68 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_67, x_66);
x_69 = l_Lean_Parser_ident_Parser___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__4___rarg___closed__1;
x_70 = l_Lean_Parser_ParsecT_labelsMkRes___rarg(x_68, x_69);
x_71 = l_Lean_Parser_ParsecT_tryMkRes___rarg(x_70);
if (lean::is_scalar(x_60)) {
 x_72 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_72 = x_60;
}
lean::cnstr_set(x_72, 0, x_71);
lean::cnstr_set(x_72, 1, x_58);
return x_72;
}
}
}
obj* l_Lean_Parser_ident_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__2(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__2___rarg___boxed), 4, 0);
return x_2;
}
}
obj* l_Lean_Parser_number_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__3___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_6; obj* x_7; 
lean::inc(x_2);
lean::inc(x_0);
x_6 = l_Lean_Parser_token(x_0, x_2, x_3);
x_7 = lean::cnstr_get(x_6, 0);
lean::inc(x_7);
if (lean::obj_tag(x_7) == 0)
{
obj* x_9; obj* x_11; obj* x_12; obj* x_14; obj* x_16; obj* x_18; obj* x_19; uint8 x_20; 
x_9 = lean::cnstr_get(x_6, 1);
if (lean::is_exclusive(x_6)) {
 lean::cnstr_release(x_6, 0);
 lean::cnstr_set(x_6, 1, lean::box(0));
 x_11 = x_6;
} else {
 lean::inc(x_9);
 lean::dec(x_6);
 x_11 = lean::box(0);
}
x_12 = lean::cnstr_get(x_7, 0);
x_14 = lean::cnstr_get(x_7, 1);
x_16 = lean::cnstr_get(x_7, 2);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_set(x_7, 0, lean::box(0));
 lean::cnstr_set(x_7, 1, lean::box(0));
 lean::cnstr_set(x_7, 2, lean::box(0));
 x_18 = x_7;
} else {
 lean::inc(x_12);
 lean::inc(x_14);
 lean::inc(x_16);
 lean::dec(x_7);
 x_18 = lean::box(0);
}
x_19 = l_Lean_Parser_number;
x_20 = l_Lean_Parser_Syntax_isOfKind___main(x_19, x_12);
if (x_20 == 0)
{
obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_28; obj* x_30; obj* x_32; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
lean::dec(x_11);
lean::dec(x_12);
lean::dec(x_18);
x_24 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_24, 0, x_2);
x_25 = lean::box(0);
x_26 = l_String_splitAux___main___closed__1;
x_27 = l_Lean_Parser_number_Parser___rarg___lambda__1___closed__1;
x_28 = l_Lean_Parser_MonadParsec_error___at___private_init_lean_parser_token_1__finishCommentBlockAux___main___spec__1___rarg(x_26, x_27, x_24, x_25, x_0, x_14, x_9);
lean::dec(x_0);
x_30 = lean::cnstr_get(x_28, 0);
x_32 = lean::cnstr_get(x_28, 1);
if (lean::is_exclusive(x_28)) {
 x_34 = x_28;
} else {
 lean::inc(x_30);
 lean::inc(x_32);
 lean::dec(x_28);
 x_34 = lean::box(0);
}
x_35 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_16, x_30);
x_36 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_37 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_36, x_35);
x_38 = l_Lean_Parser_ParsecT_tryMkRes___rarg(x_37);
if (lean::is_scalar(x_34)) {
 x_39 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_39 = x_34;
}
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_32);
return x_39;
}
else
{
obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; 
lean::dec(x_0);
lean::dec(x_2);
x_42 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_18)) {
 x_43 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_43 = x_18;
}
lean::cnstr_set(x_43, 0, x_12);
lean::cnstr_set(x_43, 1, x_14);
lean::cnstr_set(x_43, 2, x_42);
x_44 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_16, x_43);
x_45 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_42, x_44);
x_46 = l_Lean_Parser_ParsecT_tryMkRes___rarg(x_45);
if (lean::is_scalar(x_11)) {
 x_47 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_47 = x_11;
}
lean::cnstr_set(x_47, 0, x_46);
lean::cnstr_set(x_47, 1, x_9);
return x_47;
}
}
else
{
obj* x_50; obj* x_52; obj* x_53; uint8 x_55; obj* x_56; obj* x_57; obj* x_58; obj* x_59; obj* x_60; obj* x_61; obj* x_62; 
lean::dec(x_0);
lean::dec(x_2);
x_50 = lean::cnstr_get(x_6, 1);
if (lean::is_exclusive(x_6)) {
 lean::cnstr_release(x_6, 0);
 x_52 = x_6;
} else {
 lean::inc(x_50);
 lean::dec(x_6);
 x_52 = lean::box(0);
}
x_53 = lean::cnstr_get(x_7, 0);
x_55 = lean::cnstr_get_scalar<uint8>(x_7, sizeof(void*)*1);
if (lean::is_exclusive(x_7)) {
 x_56 = x_7;
} else {
 lean::inc(x_53);
 lean::dec(x_7);
 x_56 = lean::box(0);
}
if (lean::is_scalar(x_56)) {
 x_57 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_57 = x_56;
}
lean::cnstr_set(x_57, 0, x_53);
lean::cnstr_set_scalar(x_57, sizeof(void*)*1, x_55);
x_58 = x_57;
x_59 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_60 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_59, x_58);
x_61 = l_Lean_Parser_ParsecT_tryMkRes___rarg(x_60);
if (lean::is_scalar(x_52)) {
 x_62 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_62 = x_52;
}
lean::cnstr_set(x_62, 0, x_61);
lean::cnstr_set(x_62, 1, x_50);
return x_62;
}
}
}
obj* l_Lean_Parser_number_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__3(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_number_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__3___rarg___boxed), 4, 0);
return x_2;
}
}
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__5___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_10; uint8 x_11; obj* x_12; obj* x_13; obj* x_14; 
x_10 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set(x_10, 1, x_0);
lean::cnstr_set(x_10, 2, x_1);
lean::cnstr_set(x_10, 3, x_3);
x_11 = 0;
x_12 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set_scalar(x_12, sizeof(void*)*1, x_11);
x_13 = x_12;
x_14 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_9);
return x_14;
}
else
{
obj* x_16; obj* x_19; uint8 x_20; obj* x_21; obj* x_22; obj* x_23; 
lean::dec(x_8);
x_16 = lean::cnstr_get(x_2, 0);
lean::inc(x_16);
lean::dec(x_2);
x_19 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_19, 0, x_16);
lean::cnstr_set(x_19, 1, x_0);
lean::cnstr_set(x_19, 2, x_1);
lean::cnstr_set(x_19, 3, x_3);
x_20 = 0;
x_21 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_21, 0, x_19);
lean::cnstr_set_scalar(x_21, sizeof(void*)*1, x_20);
x_22 = x_21;
x_23 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_9);
return x_23;
}
}
}
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__5(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_MonadParsec_error___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__5___rarg___boxed), 10, 0);
return x_1;
}
}
obj* l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__4(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_9; obj* x_10; obj* x_11; obj* x_12; 
lean::dec(x_1);
x_9 = lean::box(0);
x_10 = l_Lean_Parser_Combinators_choiceAux___main___rarg___closed__1;
x_11 = l_mjoin___rarg___closed__1;
x_12 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__5___rarg(x_10, x_11, x_9, x_9, x_2, x_3, x_4, x_5, x_6, x_7);
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
return x_12;
}
else
{
obj* x_17; obj* x_19; obj* x_21; obj* x_22; obj* x_23; obj* x_29; obj* x_30; 
x_17 = lean::cnstr_get(x_0, 0);
x_19 = lean::cnstr_get(x_0, 1);
if (lean::is_exclusive(x_0)) {
 lean::cnstr_set(x_0, 0, lean::box(0));
 lean::cnstr_set(x_0, 1, lean::box(0));
 x_21 = x_0;
} else {
 lean::inc(x_17);
 lean::inc(x_19);
 lean::dec(x_0);
 x_21 = lean::box(0);
}
x_22 = lean::mk_nat_obj(1ul);
x_23 = lean::nat_add(x_1, x_22);
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
x_29 = lean::apply_6(x_17, x_2, x_3, x_4, x_5, x_6, x_7);
x_30 = lean::cnstr_get(x_29, 0);
lean::inc(x_30);
if (lean::obj_tag(x_30) == 0)
{
obj* x_32; obj* x_34; obj* x_35; obj* x_37; obj* x_39; obj* x_41; obj* x_42; obj* x_43; obj* x_44; obj* x_45; obj* x_46; obj* x_47; obj* x_48; obj* x_49; 
x_32 = lean::cnstr_get(x_29, 1);
if (lean::is_exclusive(x_29)) {
 lean::cnstr_release(x_29, 0);
 lean::cnstr_set(x_29, 1, lean::box(0));
 x_34 = x_29;
} else {
 lean::inc(x_32);
 lean::dec(x_29);
 x_34 = lean::box(0);
}
x_35 = lean::cnstr_get(x_30, 0);
x_37 = lean::cnstr_get(x_30, 1);
x_39 = lean::cnstr_get(x_30, 2);
if (lean::is_exclusive(x_30)) {
 x_41 = x_30;
} else {
 lean::inc(x_35);
 lean::inc(x_37);
 lean::inc(x_39);
 lean::dec(x_30);
 x_41 = lean::box(0);
}
x_42 = lean::box(0);
x_43 = lean_name_mk_numeral(x_42, x_1);
x_44 = lean::box(0);
if (lean::is_scalar(x_21)) {
 x_45 = lean::alloc_cnstr(1, 2, 0);
} else {
 x_45 = x_21;
}
lean::cnstr_set(x_45, 0, x_35);
lean::cnstr_set(x_45, 1, x_44);
x_46 = l_Lean_Parser_Syntax_mkNode(x_43, x_45);
x_47 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_41)) {
 x_48 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_48 = x_41;
}
lean::cnstr_set(x_48, 0, x_46);
lean::cnstr_set(x_48, 1, x_37);
lean::cnstr_set(x_48, 2, x_47);
x_49 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_39, x_48);
if (lean::obj_tag(x_49) == 0)
{
obj* x_57; 
lean::dec(x_5);
lean::dec(x_19);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_23);
if (lean::is_scalar(x_34)) {
 x_57 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_57 = x_34;
}
lean::cnstr_set(x_57, 0, x_49);
lean::cnstr_set(x_57, 1, x_32);
return x_57;
}
else
{
uint8 x_58; 
x_58 = lean::cnstr_get_scalar<uint8>(x_49, sizeof(void*)*1);
if (x_58 == 0)
{
obj* x_60; obj* x_63; obj* x_64; obj* x_66; obj* x_68; obj* x_69; obj* x_70; 
lean::dec(x_34);
x_60 = lean::cnstr_get(x_49, 0);
lean::inc(x_60);
lean::dec(x_49);
x_63 = l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__4(x_19, x_23, x_2, x_3, x_4, x_5, x_6, x_32);
x_64 = lean::cnstr_get(x_63, 0);
x_66 = lean::cnstr_get(x_63, 1);
if (lean::is_exclusive(x_63)) {
 x_68 = x_63;
} else {
 lean::inc(x_64);
 lean::inc(x_66);
 lean::dec(x_63);
 x_68 = lean::box(0);
}
x_69 = l_Lean_Parser_ParsecT_orelseMkRes___rarg(x_60, x_64);
if (lean::is_scalar(x_68)) {
 x_70 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_70 = x_68;
}
lean::cnstr_set(x_70, 0, x_69);
lean::cnstr_set(x_70, 1, x_66);
return x_70;
}
else
{
obj* x_78; 
lean::dec(x_5);
lean::dec(x_19);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_23);
if (lean::is_scalar(x_34)) {
 x_78 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_78 = x_34;
}
lean::cnstr_set(x_78, 0, x_49);
lean::cnstr_set(x_78, 1, x_32);
return x_78;
}
}
}
else
{
uint8 x_81; 
lean::dec(x_1);
lean::dec(x_21);
x_81 = lean::cnstr_get_scalar<uint8>(x_30, sizeof(void*)*1);
if (x_81 == 0)
{
obj* x_82; obj* x_85; obj* x_88; obj* x_89; obj* x_91; obj* x_93; obj* x_94; obj* x_95; 
x_82 = lean::cnstr_get(x_29, 1);
lean::inc(x_82);
lean::dec(x_29);
x_85 = lean::cnstr_get(x_30, 0);
lean::inc(x_85);
lean::dec(x_30);
x_88 = l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__4(x_19, x_23, x_2, x_3, x_4, x_5, x_6, x_82);
x_89 = lean::cnstr_get(x_88, 0);
x_91 = lean::cnstr_get(x_88, 1);
if (lean::is_exclusive(x_88)) {
 x_93 = x_88;
} else {
 lean::inc(x_89);
 lean::inc(x_91);
 lean::dec(x_88);
 x_93 = lean::box(0);
}
x_94 = l_Lean_Parser_ParsecT_orelseMkRes___rarg(x_85, x_89);
if (lean::is_scalar(x_93)) {
 x_95 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_95 = x_93;
}
lean::cnstr_set(x_95, 0, x_94);
lean::cnstr_set(x_95, 1, x_91);
return x_95;
}
else
{
obj* x_103; obj* x_105; obj* x_106; obj* x_108; obj* x_109; obj* x_110; obj* x_111; 
lean::dec(x_5);
lean::dec(x_19);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_23);
x_103 = lean::cnstr_get(x_29, 1);
if (lean::is_exclusive(x_29)) {
 lean::cnstr_release(x_29, 0);
 x_105 = x_29;
} else {
 lean::inc(x_103);
 lean::dec(x_29);
 x_105 = lean::box(0);
}
x_106 = lean::cnstr_get(x_30, 0);
if (lean::is_exclusive(x_30)) {
 x_108 = x_30;
} else {
 lean::inc(x_106);
 lean::dec(x_30);
 x_108 = lean::box(0);
}
if (lean::is_scalar(x_108)) {
 x_109 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_109 = x_108;
}
lean::cnstr_set(x_109, 0, x_106);
lean::cnstr_set_scalar(x_109, sizeof(void*)*1, x_81);
x_110 = x_109;
if (lean::is_scalar(x_105)) {
 x_111 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_111 = x_105;
}
lean::cnstr_set(x_111, 0, x_110);
lean::cnstr_set(x_111, 1, x_103);
return x_111;
}
}
}
}
}
obj* l_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; obj* x_9; obj* x_10; 
x_8 = l_Lean_Name_toString___closed__1;
x_9 = l_Lean_Parser_MonadParsec_strCore___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__1(x_8, x_0, x_2, x_3, x_4, x_5, x_6, x_7);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
if (lean::obj_tag(x_10) == 0)
{
obj* x_12; obj* x_14; obj* x_15; obj* x_17; obj* x_19; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; 
x_12 = lean::cnstr_get(x_9, 1);
if (lean::is_exclusive(x_9)) {
 lean::cnstr_release(x_9, 0);
 x_14 = x_9;
} else {
 lean::inc(x_12);
 lean::dec(x_9);
 x_14 = lean::box(0);
}
x_15 = lean::cnstr_get(x_10, 1);
x_17 = lean::cnstr_get(x_10, 2);
if (lean::is_exclusive(x_10)) {
 lean::cnstr_release(x_10, 0);
 x_19 = x_10;
} else {
 lean::inc(x_15);
 lean::inc(x_17);
 lean::dec(x_10);
 x_19 = lean::box(0);
}
lean::inc(x_15);
x_21 = l_Lean_Parser_mkRawRes(x_1, x_15);
x_22 = l_Lean_Parser_finishCommentBlock___closed__2;
if (lean::is_scalar(x_19)) {
 x_23 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_23 = x_19;
}
lean::cnstr_set(x_23, 0, x_21);
lean::cnstr_set(x_23, 1, x_15);
lean::cnstr_set(x_23, 2, x_22);
x_24 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_17, x_23);
if (lean::is_scalar(x_14)) {
 x_25 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_25 = x_14;
}
lean::cnstr_set(x_25, 0, x_24);
lean::cnstr_set(x_25, 1, x_12);
return x_25;
}
else
{
obj* x_27; obj* x_29; obj* x_30; uint8 x_32; obj* x_33; obj* x_34; obj* x_35; obj* x_36; 
lean::dec(x_1);
x_27 = lean::cnstr_get(x_9, 1);
if (lean::is_exclusive(x_9)) {
 lean::cnstr_release(x_9, 0);
 x_29 = x_9;
} else {
 lean::inc(x_27);
 lean::dec(x_9);
 x_29 = lean::box(0);
}
x_30 = lean::cnstr_get(x_10, 0);
x_32 = lean::cnstr_get_scalar<uint8>(x_10, sizeof(void*)*1);
if (lean::is_exclusive(x_10)) {
 x_33 = x_10;
} else {
 lean::inc(x_30);
 lean::dec(x_10);
 x_33 = lean::box(0);
}
if (lean::is_scalar(x_33)) {
 x_34 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_34 = x_33;
}
lean::cnstr_set(x_34, 0, x_30);
lean::cnstr_set_scalar(x_34, sizeof(void*)*1, x_32);
x_35 = x_34;
if (lean::is_scalar(x_29)) {
 x_36 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_36 = x_29;
}
lean::cnstr_set(x_36, 0, x_35);
lean::cnstr_set(x_36, 1, x_27);
return x_36;
}
}
}
obj* _init_l_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_26; obj* x_27; obj* x_28; obj* x_29; obj* x_30; obj* x_31; obj* x_32; obj* x_34; 
x_0 = lean::mk_string(".");
x_1 = l_String_quote(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_withTrailing___rarg___lambda__1), 2, 0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__1___rarg___boxed), 4, 1);
lean::closure_set(x_4, 0, x_3);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__2___rarg___boxed), 5, 1);
lean::closure_set(x_5, 0, x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__3___rarg___boxed), 6, 1);
lean::closure_set(x_6, 0, x_5);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2___rarg___boxed), 7, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___lambda__1___boxed), 8, 1);
lean::closure_set(x_8, 0, x_2);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_bind___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__1___rarg), 8, 2);
lean::closure_set(x_9, 0, x_7);
lean::closure_set(x_9, 1, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_number_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__3___boxed), 2, 0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__2___boxed), 2, 0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_12);
x_15 = lean::mk_nat_obj(0ul);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__4), 8, 2);
lean::closure_set(x_16, 0, x_14);
lean::closure_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_10);
x_18 = l_Lean_Parser_Term_projectionSpec;
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3), 8, 2);
lean::closure_set(x_19, 0, x_18);
lean::closure_set(x_19, 1, x_17);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_10);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_9);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_getLeading___boxed), 6, 0);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_21);
x_24 = l_Lean_Parser_Term_projection;
lean::inc(x_23);
x_26 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3), 8, 2);
lean::closure_set(x_26, 0, x_24);
lean::closure_set(x_26, 1, x_23);
x_27 = l_Lean_Parser_TrailingTermParserM_Monad;
x_28 = l_Lean_Parser_TrailingTermParserM_MonadExcept;
x_29 = l_Lean_Parser_TrailingTermParserM_Lean_Parser_MonadParsec;
x_30 = l_Lean_Parser_TrailingTermParserM_Alternative;
x_31 = l_Lean_Parser_Term_projection_HasView;
x_32 = l_Lean_Parser_Combinators_node_view___rarg(x_27, x_28, x_29, x_30, x_24, x_23, x_31);
lean::dec(x_23);
x_34 = l_Lean_Parser_Combinators_try_view___rarg(x_29, x_30, x_26, x_32);
lean::dec(x_26);
return x_34;
}
}
obj* l_Lean_Parser_MonadParsec_strCore___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; 
x_8 = l_Lean_Parser_MonadParsec_strCore___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__1(x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7);
lean::dec(x_2);
lean::dec(x_3);
lean::dec(x_4);
lean::dec(x_5);
return x_8;
}
}
obj* l_Lean_Parser_ident_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__2___rarg___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = l_Lean_Parser_ident_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__2___rarg(x_0, x_1, x_2, x_3);
lean::dec(x_1);
return x_4;
}
}
obj* l_Lean_Parser_ident_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__2___boxed(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_Lean_Parser_ident_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__2(x_0, x_1);
lean::dec(x_0);
lean::dec(x_1);
return x_2;
}
}
obj* l_Lean_Parser_number_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__3___rarg___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3) {
_start:
{
obj* x_4; 
x_4 = l_Lean_Parser_number_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__3___rarg(x_0, x_1, x_2, x_3);
lean::dec(x_1);
return x_4;
}
}
obj* l_Lean_Parser_number_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__3___boxed(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_Lean_Parser_number_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__3(x_0, x_1);
lean::dec(x_0);
lean::dec(x_1);
return x_2;
}
}
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__5___rarg___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9) {
_start:
{
obj* x_10; 
x_10 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__5___rarg(x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9);
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_6);
lean::dec(x_7);
return x_10;
}
}
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__5___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__5(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___lambda__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; 
x_8 = l_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___lambda__1(x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7);
lean::dec(x_2);
lean::dec(x_3);
lean::dec(x_4);
lean::dec(x_5);
return x_8;
}
}
obj* _init_l_Lean_Parser_Term_projection_Parser___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; obj* x_18; obj* x_19; obj* x_20; obj* x_21; obj* x_22; obj* x_23; 
x_0 = lean::mk_string(".");
x_1 = l_String_quote(x_0);
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_DList_singleton___elambda__1___rarg), 2, 1);
lean::closure_set(x_2, 0, x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_withTrailing___rarg___lambda__1), 2, 0);
x_4 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__1___rarg___boxed), 4, 1);
lean::closure_set(x_4, 0, x_3);
x_5 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__2___rarg___boxed), 5, 1);
lean::closure_set(x_5, 0, x_4);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_command_NotationSpec_symbolQuote_Parser_Lean_Parser_HasTokens___spec__3___rarg___boxed), 6, 1);
lean::closure_set(x_6, 0, x_5);
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_lift___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__2___rarg___boxed), 7, 1);
lean::closure_set(x_7, 0, x_6);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___lambda__1___boxed), 8, 1);
lean::closure_set(x_8, 0, x_2);
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_bind___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__1___rarg), 8, 2);
lean::closure_set(x_9, 0, x_7);
lean::closure_set(x_9, 1, x_8);
x_10 = lean::box(0);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_number_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__3___boxed), 2, 0);
x_12 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_10);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ident_Parser___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__2___boxed), 2, 0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_13);
lean::cnstr_set(x_14, 1, x_12);
x_15 = lean::mk_nat_obj(0ul);
x_16 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_choiceAux___main___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__4), 8, 2);
lean::closure_set(x_16, 0, x_14);
lean::closure_set(x_16, 1, x_15);
x_17 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_17, 0, x_16);
lean::cnstr_set(x_17, 1, x_10);
x_18 = l_Lean_Parser_Term_projectionSpec;
x_19 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3), 8, 2);
lean::closure_set(x_19, 0, x_18);
lean::closure_set(x_19, 1, x_17);
x_20 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_10);
x_21 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_21, 0, x_9);
lean::cnstr_set(x_21, 1, x_20);
x_22 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_getLeading___boxed), 6, 0);
x_23 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_23, 0, x_22);
lean::cnstr_set(x_23, 1, x_21);
return x_23;
}
}
obj* l_Lean_Parser_Term_projection_Parser(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_13; obj* x_14; obj* x_15; 
x_6 = l_Lean_Parser_Term_projection;
x_7 = l_Lean_Parser_Term_projection_Parser___closed__1;
x_8 = l_Lean_Parser_Combinators_node___at_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens___spec__3(x_6, x_7, x_0, x_1, x_2, x_3, x_4, x_5);
x_9 = lean::cnstr_get(x_8, 0);
x_11 = lean::cnstr_get(x_8, 1);
if (lean::is_exclusive(x_8)) {
 x_13 = x_8;
} else {
 lean::inc(x_9);
 lean::inc(x_11);
 lean::dec(x_8);
 x_13 = lean::box(0);
}
x_14 = l_Lean_Parser_ParsecT_tryMkRes___rarg(x_9);
if (lean::is_scalar(x_13)) {
 x_15 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_15 = x_13;
}
lean::cnstr_set(x_15, 0, x_14);
lean::cnstr_set(x_15, 1, x_11);
return x_15;
}
}
obj* _init_l_Lean_Parser_Term_projection_tokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_5; obj* x_6; obj* x_7; 
x_0 = l_Lean_Parser_maxPrec;
x_1 = lean::mk_nat_obj(1ul);
x_2 = lean::nat_add(x_0, x_1);
x_3 = lean::box(0);
x_4 = lean::mk_string(".");
x_5 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_5, 0, x_4);
lean::cnstr_set(x_5, 1, x_2);
lean::cnstr_set(x_5, 2, x_3);
x_6 = lean::box(0);
x_7 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_7, 0, x_5);
lean::cnstr_set(x_7, 1, x_6);
return x_7;
}
}
obj* _init_l_Lean_Parser_Term_builtinTrailingParsers_Lean_Parser_HasTokens() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; obj* x_6; 
x_0 = lean::box(0);
x_1 = l_Lean_Parser_Term_projection_tokens;
x_2 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_1, x_0);
x_3 = l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasTokens;
x_4 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_3, x_2);
lean::dec(x_2);
x_6 = l_Lean_Parser_tokenMapCons_tokens___rarg(x_3, x_4);
lean::dec(x_4);
return x_6;
}
}
obj* _init_l_Lean_Parser_Term_builtinTrailingParsers() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_5; obj* x_6; obj* x_7; obj* x_8; obj* x_9; obj* x_10; obj* x_11; obj* x_12; obj* x_13; obj* x_14; obj* x_15; obj* x_16; obj* x_17; 
x_0 = lean::box(0);
x_1 = lean::mk_string("\xe2\x86\x92");
x_2 = lean_name_mk_string(x_0, x_1);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_arrow_Parser), 6, 0);
lean::inc(x_3);
x_5 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_5, 0, x_2);
lean::cnstr_set(x_5, 1, x_3);
x_6 = lean::mk_string("->");
x_7 = lean_name_mk_string(x_0, x_6);
x_8 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_8, 0, x_7);
lean::cnstr_set(x_8, 1, x_3);
x_9 = lean::mk_string(".");
x_10 = lean_name_mk_string(x_0, x_9);
x_11 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_projection_Parser), 6, 0);
x_12 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_12, 0, x_10);
lean::cnstr_set(x_12, 1, x_11);
x_13 = lean::box(0);
x_14 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_14, 0, x_12);
lean::cnstr_set(x_14, 1, x_13);
x_15 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_15, 0, x_8);
lean::cnstr_set(x_15, 1, x_14);
x_16 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_16, 0, x_5);
lean::cnstr_set(x_16, 1, x_15);
x_17 = l_Lean_Parser_TokenMap_ofList___main___rarg(x_16);
return x_17;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__2___rarg(obj* x_0, obj* x_1) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_9; uint8 x_12; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 2);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 3);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_Lean_Name_quickLt(x_1, x_5);
if (x_12 == 0)
{
uint8 x_14; 
lean::dec(x_3);
x_14 = l_Lean_Name_quickLt(x_5, x_1);
lean::dec(x_5);
if (x_14 == 0)
{
obj* x_17; 
lean::dec(x_9);
x_17 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_17, 0, x_7);
return x_17;
}
else
{
lean::dec(x_7);
x_0 = x_9;
goto _start;
}
}
else
{
lean::dec(x_7);
lean::dec(x_9);
lean::dec(x_5);
x_0 = x_3;
goto _start;
}
}
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__2___rarg___boxed), 2, 0);
return x_1;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__3___rarg(obj* x_0, obj* x_1) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_9; uint8 x_12; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 2);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 3);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_Lean_Name_quickLt(x_1, x_5);
if (x_12 == 0)
{
uint8 x_14; 
lean::dec(x_3);
x_14 = l_Lean_Name_quickLt(x_5, x_1);
lean::dec(x_5);
if (x_14 == 0)
{
obj* x_17; 
lean::dec(x_9);
x_17 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_17, 0, x_7);
return x_17;
}
else
{
lean::dec(x_7);
x_0 = x_9;
goto _start;
}
}
else
{
lean::dec(x_7);
lean::dec(x_9);
lean::dec(x_5);
x_0 = x_3;
goto _start;
}
}
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__3(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__3___rarg___boxed), 2, 0);
return x_1;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__4___rarg(obj* x_0, obj* x_1) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_9; uint8 x_12; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 2);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 3);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_Lean_Name_quickLt(x_1, x_5);
if (x_12 == 0)
{
uint8 x_14; 
lean::dec(x_3);
x_14 = l_Lean_Name_quickLt(x_5, x_1);
lean::dec(x_5);
if (x_14 == 0)
{
obj* x_17; 
lean::dec(x_9);
x_17 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_17, 0, x_7);
return x_17;
}
else
{
lean::dec(x_7);
x_0 = x_9;
goto _start;
}
}
else
{
lean::dec(x_7);
lean::dec(x_9);
lean::dec(x_5);
x_0 = x_3;
goto _start;
}
}
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__4(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__4___rarg___boxed), 2, 0);
return x_1;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__5___rarg(obj* x_0, obj* x_1) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_9; uint8 x_12; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 2);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 3);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_Lean_Name_quickLt(x_1, x_5);
if (x_12 == 0)
{
uint8 x_14; 
lean::dec(x_3);
x_14 = l_Lean_Name_quickLt(x_5, x_1);
lean::dec(x_5);
if (x_14 == 0)
{
obj* x_17; 
lean::dec(x_9);
x_17 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_17, 0, x_7);
return x_17;
}
else
{
lean::dec(x_7);
x_0 = x_9;
goto _start;
}
}
else
{
lean::dec(x_7);
lean::dec(x_9);
lean::dec(x_5);
x_0 = x_3;
goto _start;
}
}
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__5(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__5___rarg___boxed), 2, 0);
return x_1;
}
}
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; obj* x_9; obj* x_10; 
x_7 = l_Lean_Parser_peekToken___closed__1;
lean::inc(x_3);
x_9 = l_Lean_Parser_MonadParsec_observing___at_Lean_Parser_peekToken___spec__2(x_7, x_3, x_5, x_6);
x_10 = lean::cnstr_get(x_9, 0);
lean::inc(x_10);
if (lean::obj_tag(x_10) == 0)
{
obj* x_12; 
x_12 = lean::cnstr_get(x_10, 0);
lean::inc(x_12);
if (lean::obj_tag(x_12) == 0)
{
obj* x_16; obj* x_19; obj* x_21; obj* x_24; obj* x_25; obj* x_26; obj* x_27; obj* x_29; obj* x_31; obj* x_33; obj* x_34; obj* x_35; 
lean::dec(x_12);
lean::dec(x_0);
x_16 = lean::cnstr_get(x_9, 1);
lean::inc(x_16);
lean::dec(x_9);
x_19 = lean::cnstr_get(x_10, 1);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_10, 2);
lean::inc(x_21);
lean::dec(x_10);
x_24 = lean::box(0);
x_25 = l_String_splitAux___main___closed__1;
x_26 = l_mjoin___rarg___closed__1;
x_27 = l_Lean_Parser_MonadParsec_error___at___private_init_lean_parser_token_1__finishCommentBlockAux___main___spec__1___rarg(x_25, x_26, x_24, x_24, x_3, x_19, x_16);
lean::dec(x_3);
x_29 = lean::cnstr_get(x_27, 0);
x_31 = lean::cnstr_get(x_27, 1);
if (lean::is_exclusive(x_27)) {
 x_33 = x_27;
} else {
 lean::inc(x_29);
 lean::inc(x_31);
 lean::dec(x_27);
 x_33 = lean::box(0);
}
x_34 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_21, x_29);
if (lean::is_scalar(x_33)) {
 x_35 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_35 = x_33;
}
lean::cnstr_set(x_35, 0, x_34);
lean::cnstr_set(x_35, 1, x_31);
return x_35;
}
else
{
obj* x_36; 
x_36 = lean::cnstr_get(x_12, 0);
lean::inc(x_36);
lean::dec(x_12);
switch (lean::obj_tag(x_36)) {
case 0:
{
obj* x_39; obj* x_42; obj* x_45; obj* x_47; obj* x_50; obj* x_53; obj* x_54; obj* x_55; obj* x_57; obj* x_59; obj* x_61; obj* x_63; obj* x_64; obj* x_65; obj* x_66; obj* x_67; 
x_39 = lean::cnstr_get(x_36, 0);
lean::inc(x_39);
lean::dec(x_36);
x_42 = lean::cnstr_get(x_9, 1);
lean::inc(x_42);
lean::dec(x_9);
x_45 = lean::cnstr_get(x_10, 1);
lean::inc(x_45);
x_47 = lean::cnstr_get(x_10, 2);
lean::inc(x_47);
lean::dec(x_10);
x_50 = lean::cnstr_get(x_39, 1);
lean::inc(x_50);
lean::dec(x_39);
x_53 = lean::box(0);
x_54 = lean_name_mk_string(x_53, x_50);
x_55 = l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__2___rarg(x_0, x_54);
lean::dec(x_54);
x_57 = l_Option_toMonad___main___at_Lean_Parser_indexed___spec__2___rarg(x_55, x_3, x_45, x_42);
lean::dec(x_3);
x_59 = lean::cnstr_get(x_57, 0);
x_61 = lean::cnstr_get(x_57, 1);
if (lean::is_exclusive(x_57)) {
 x_63 = x_57;
} else {
 lean::inc(x_59);
 lean::inc(x_61);
 lean::dec(x_57);
 x_63 = lean::box(0);
}
x_64 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_65 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_64, x_59);
x_66 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_47, x_65);
if (lean::is_scalar(x_63)) {
 x_67 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_67 = x_63;
}
lean::cnstr_set(x_67, 0, x_66);
lean::cnstr_set(x_67, 1, x_61);
return x_67;
}
case 1:
{
obj* x_69; obj* x_72; obj* x_74; obj* x_77; obj* x_78; obj* x_79; obj* x_81; obj* x_83; obj* x_85; obj* x_86; obj* x_87; obj* x_88; obj* x_89; 
lean::dec(x_36);
x_69 = lean::cnstr_get(x_9, 1);
lean::inc(x_69);
lean::dec(x_9);
x_72 = lean::cnstr_get(x_10, 1);
lean::inc(x_72);
x_74 = lean::cnstr_get(x_10, 2);
lean::inc(x_74);
lean::dec(x_10);
x_77 = l_Lean_Parser_indexed___rarg___lambda__1___closed__1;
x_78 = l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__3___rarg(x_0, x_77);
x_79 = l_Option_toMonad___main___at_Lean_Parser_indexed___spec__2___rarg(x_78, x_3, x_72, x_69);
lean::dec(x_3);
x_81 = lean::cnstr_get(x_79, 0);
x_83 = lean::cnstr_get(x_79, 1);
if (lean::is_exclusive(x_79)) {
 x_85 = x_79;
} else {
 lean::inc(x_81);
 lean::inc(x_83);
 lean::dec(x_79);
 x_85 = lean::box(0);
}
x_86 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_87 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_86, x_81);
x_88 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_74, x_87);
if (lean::is_scalar(x_85)) {
 x_89 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_89 = x_85;
}
lean::cnstr_set(x_89, 0, x_88);
lean::cnstr_set(x_89, 1, x_83);
return x_89;
}
case 2:
{
obj* x_90; obj* x_93; obj* x_95; obj* x_98; obj* x_101; obj* x_104; obj* x_106; obj* x_108; obj* x_110; obj* x_112; obj* x_113; obj* x_114; obj* x_115; obj* x_116; 
x_90 = lean::cnstr_get(x_9, 1);
lean::inc(x_90);
lean::dec(x_9);
x_93 = lean::cnstr_get(x_10, 1);
lean::inc(x_93);
x_95 = lean::cnstr_get(x_10, 2);
lean::inc(x_95);
lean::dec(x_10);
x_98 = lean::cnstr_get(x_36, 0);
lean::inc(x_98);
lean::dec(x_36);
x_101 = lean::cnstr_get(x_98, 0);
lean::inc(x_101);
lean::dec(x_98);
x_104 = l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__4___rarg(x_0, x_101);
lean::dec(x_101);
x_106 = l_Option_toMonad___main___at_Lean_Parser_indexed___spec__2___rarg(x_104, x_3, x_93, x_90);
lean::dec(x_3);
x_108 = lean::cnstr_get(x_106, 0);
x_110 = lean::cnstr_get(x_106, 1);
if (lean::is_exclusive(x_106)) {
 x_112 = x_106;
} else {
 lean::inc(x_108);
 lean::inc(x_110);
 lean::dec(x_106);
 x_112 = lean::box(0);
}
x_113 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_114 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_113, x_108);
x_115 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_95, x_114);
if (lean::is_scalar(x_112)) {
 x_116 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_116 = x_112;
}
lean::cnstr_set(x_116, 0, x_115);
lean::cnstr_set(x_116, 1, x_110);
return x_116;
}
default:
{
obj* x_117; obj* x_120; obj* x_122; obj* x_125; obj* x_126; obj* x_127; obj* x_128; obj* x_129; 
x_117 = lean::cnstr_get(x_9, 1);
lean::inc(x_117);
lean::dec(x_9);
x_120 = lean::cnstr_get(x_10, 1);
lean::inc(x_120);
x_122 = lean::cnstr_get(x_10, 2);
lean::inc(x_122);
lean::dec(x_10);
x_125 = lean::box(0);
x_126 = l_String_splitAux___main___closed__1;
x_127 = l_mjoin___rarg___closed__1;
x_128 = l_Lean_Parser_MonadParsec_error___at___private_init_lean_parser_token_1__finishCommentBlockAux___main___spec__1___rarg(x_126, x_127, x_125, x_125, x_3, x_120, x_117);
x_129 = lean::cnstr_get(x_128, 0);
lean::inc(x_129);
if (lean::obj_tag(x_129) == 0)
{
obj* x_131; obj* x_134; obj* x_136; obj* x_138; obj* x_141; obj* x_143; obj* x_145; obj* x_147; obj* x_149; obj* x_150; obj* x_151; obj* x_152; 
x_131 = lean::cnstr_get(x_128, 1);
lean::inc(x_131);
lean::dec(x_128);
x_134 = lean::cnstr_get(x_129, 0);
lean::inc(x_134);
x_136 = lean::cnstr_get(x_129, 1);
lean::inc(x_136);
x_138 = lean::cnstr_get(x_129, 2);
lean::inc(x_138);
lean::dec(x_129);
x_141 = l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__5___rarg(x_0, x_134);
lean::dec(x_134);
x_143 = l_Option_toMonad___main___at_Lean_Parser_indexed___spec__2___rarg(x_141, x_3, x_136, x_131);
lean::dec(x_3);
x_145 = lean::cnstr_get(x_143, 0);
x_147 = lean::cnstr_get(x_143, 1);
if (lean::is_exclusive(x_143)) {
 x_149 = x_143;
} else {
 lean::inc(x_145);
 lean::inc(x_147);
 lean::dec(x_143);
 x_149 = lean::box(0);
}
x_150 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_138, x_145);
x_151 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_122, x_150);
if (lean::is_scalar(x_149)) {
 x_152 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_152 = x_149;
}
lean::cnstr_set(x_152, 0, x_151);
lean::cnstr_set(x_152, 1, x_147);
return x_152;
}
else
{
obj* x_155; obj* x_157; obj* x_158; uint8 x_160; obj* x_161; obj* x_162; obj* x_163; obj* x_164; obj* x_165; 
lean::dec(x_3);
lean::dec(x_0);
x_155 = lean::cnstr_get(x_128, 1);
if (lean::is_exclusive(x_128)) {
 lean::cnstr_release(x_128, 0);
 x_157 = x_128;
} else {
 lean::inc(x_155);
 lean::dec(x_128);
 x_157 = lean::box(0);
}
x_158 = lean::cnstr_get(x_129, 0);
x_160 = lean::cnstr_get_scalar<uint8>(x_129, sizeof(void*)*1);
if (lean::is_exclusive(x_129)) {
 x_161 = x_129;
} else {
 lean::inc(x_158);
 lean::dec(x_129);
 x_161 = lean::box(0);
}
if (lean::is_scalar(x_161)) {
 x_162 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_162 = x_161;
}
lean::cnstr_set(x_162, 0, x_158);
lean::cnstr_set_scalar(x_162, sizeof(void*)*1, x_160);
x_163 = x_162;
x_164 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_122, x_163);
if (lean::is_scalar(x_157)) {
 x_165 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_165 = x_157;
}
lean::cnstr_set(x_165, 0, x_164);
lean::cnstr_set(x_165, 1, x_155);
return x_165;
}
}
}
}
}
else
{
obj* x_168; obj* x_170; obj* x_171; uint8 x_173; obj* x_174; obj* x_175; obj* x_176; obj* x_177; 
lean::dec(x_3);
lean::dec(x_0);
x_168 = lean::cnstr_get(x_9, 1);
if (lean::is_exclusive(x_9)) {
 lean::cnstr_release(x_9, 0);
 x_170 = x_9;
} else {
 lean::inc(x_168);
 lean::dec(x_9);
 x_170 = lean::box(0);
}
x_171 = lean::cnstr_get(x_10, 0);
x_173 = lean::cnstr_get_scalar<uint8>(x_10, sizeof(void*)*1);
if (lean::is_exclusive(x_10)) {
 x_174 = x_10;
} else {
 lean::inc(x_171);
 lean::dec(x_10);
 x_174 = lean::box(0);
}
if (lean::is_scalar(x_174)) {
 x_175 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_175 = x_174;
}
lean::cnstr_set(x_175, 0, x_171);
lean::cnstr_set_scalar(x_175, sizeof(void*)*1, x_173);
x_176 = x_175;
if (lean::is_scalar(x_170)) {
 x_177 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_177 = x_170;
}
lean::cnstr_set(x_177, 0, x_176);
lean::cnstr_set(x_177, 1, x_168);
return x_177;
}
}
}
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___rarg___boxed), 7, 0);
return x_1;
}
}
obj* l_Lean_Parser_ParsecT_lookahead___at___private_init_lean_parser_term_1__trailing___spec__8___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9) {
_start:
{
obj* x_10; obj* x_11; obj* x_13; obj* x_14; obj* x_17; obj* x_18; 
lean::inc(x_8);
x_17 = lean::apply_6(x_2, x_4, x_5, x_6, x_7, x_8, x_9);
x_18 = lean::cnstr_get(x_17, 0);
lean::inc(x_18);
if (lean::obj_tag(x_18) == 0)
{
obj* x_20; obj* x_23; obj* x_25; obj* x_27; obj* x_29; obj* x_30; 
x_20 = lean::cnstr_get(x_17, 1);
lean::inc(x_20);
lean::dec(x_17);
x_23 = lean::cnstr_get(x_18, 0);
x_25 = lean::cnstr_get(x_18, 1);
x_27 = lean::cnstr_get(x_18, 2);
if (lean::is_exclusive(x_18)) {
 lean::cnstr_set(x_18, 0, lean::box(0));
 lean::cnstr_set(x_18, 1, lean::box(0));
 lean::cnstr_set(x_18, 2, lean::box(0));
 x_29 = x_18;
} else {
 lean::inc(x_23);
 lean::inc(x_25);
 lean::inc(x_27);
 lean::dec(x_18);
 x_29 = lean::box(0);
}
if (lean::obj_tag(x_3) == 0)
{
obj* x_32; 
x_32 = lean::cnstr_get(x_3, 2);
lean::inc(x_32);
if (lean::obj_tag(x_32) == 0)
{
obj* x_35; obj* x_37; obj* x_39; obj* x_41; uint8 x_44; 
lean::dec(x_29);
x_35 = lean::cnstr_get(x_3, 0);
lean::inc(x_35);
x_37 = lean::cnstr_get(x_3, 1);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_25, 1);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_37, 1);
lean::inc(x_41);
lean::dec(x_37);
x_44 = lean::nat_dec_lt(x_39, x_41);
if (x_44 == 0)
{
obj* x_46; uint8 x_47; 
lean::inc(x_3);
if (lean::is_exclusive(x_3)) {
 lean::cnstr_release(x_3, 0);
 lean::cnstr_release(x_3, 1);
 lean::cnstr_release(x_3, 2);
 x_46 = x_3;
} else {
 lean::dec(x_3);
 x_46 = lean::box(0);
}
x_47 = lean::nat_dec_lt(x_41, x_39);
lean::dec(x_39);
lean::dec(x_41);
if (x_47 == 0)
{
obj* x_50; obj* x_52; obj* x_54; obj* x_55; obj* x_56; obj* x_57; 
x_50 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_50, 0, x_23);
lean::cnstr_set(x_50, 1, x_35);
lean::inc(x_25);
if (lean::is_scalar(x_46)) {
 x_52 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_52 = x_46;
}
lean::cnstr_set(x_52, 0, x_50);
lean::cnstr_set(x_52, 1, x_25);
lean::cnstr_set(x_52, 2, x_32);
lean::inc(x_0);
x_54 = lean::alloc_closure(reinterpret_cast<void*>(l_Function_comp___rarg), 3, 2);
lean::closure_set(x_54, 0, x_0);
lean::closure_set(x_54, 1, x_0);
x_55 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_55, 0, x_54);
x_56 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_56, 0, x_52);
lean::cnstr_set(x_56, 1, x_25);
lean::cnstr_set(x_56, 2, x_55);
x_57 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_27, x_56);
x_13 = x_57;
x_14 = x_20;
goto lbl_15;
}
else
{
obj* x_59; obj* x_60; obj* x_62; obj* x_64; obj* x_65; obj* x_66; obj* x_67; 
lean::dec(x_35);
x_59 = lean::box(0);
x_60 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_60, 0, x_23);
lean::cnstr_set(x_60, 1, x_59);
lean::inc(x_25);
if (lean::is_scalar(x_46)) {
 x_62 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_62 = x_46;
}
lean::cnstr_set(x_62, 0, x_60);
lean::cnstr_set(x_62, 1, x_25);
lean::cnstr_set(x_62, 2, x_32);
lean::inc(x_0);
x_64 = lean::alloc_closure(reinterpret_cast<void*>(l_Function_comp___rarg), 3, 2);
lean::closure_set(x_64, 0, x_0);
lean::closure_set(x_64, 1, x_0);
x_65 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_65, 0, x_64);
x_66 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_66, 0, x_62);
lean::cnstr_set(x_66, 1, x_25);
lean::cnstr_set(x_66, 2, x_65);
x_67 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_27, x_66);
x_13 = x_67;
x_14 = x_20;
goto lbl_15;
}
}
else
{
obj* x_73; obj* x_74; obj* x_76; obj* x_77; 
lean::dec(x_23);
lean::dec(x_35);
lean::dec(x_39);
lean::dec(x_41);
lean::inc(x_0);
x_73 = lean::alloc_closure(reinterpret_cast<void*>(l_Function_comp___rarg), 3, 2);
lean::closure_set(x_73, 0, x_0);
lean::closure_set(x_73, 1, x_0);
x_74 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_74, 0, x_73);
lean::inc(x_3);
x_76 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_76, 0, x_3);
lean::cnstr_set(x_76, 1, x_25);
lean::cnstr_set(x_76, 2, x_74);
x_77 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_27, x_76);
x_13 = x_77;
x_14 = x_20;
goto lbl_15;
}
}
else
{
obj* x_79; 
lean::dec(x_32);
x_79 = lean::box(0);
x_30 = x_79;
goto lbl_31;
}
}
else
{
obj* x_80; 
x_80 = lean::box(0);
x_30 = x_80;
goto lbl_31;
}
lbl_31:
{
obj* x_82; obj* x_83; obj* x_84; obj* x_86; obj* x_88; obj* x_89; obj* x_90; obj* x_91; 
lean::dec(x_30);
x_82 = lean::box(0);
x_83 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_83, 0, x_23);
lean::cnstr_set(x_83, 1, x_82);
x_84 = lean::box(0);
lean::inc(x_25);
if (lean::is_scalar(x_29)) {
 x_86 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_86 = x_29;
}
lean::cnstr_set(x_86, 0, x_83);
lean::cnstr_set(x_86, 1, x_25);
lean::cnstr_set(x_86, 2, x_84);
lean::inc(x_0);
x_88 = lean::alloc_closure(reinterpret_cast<void*>(l_Function_comp___rarg), 3, 2);
lean::closure_set(x_88, 0, x_0);
lean::closure_set(x_88, 1, x_0);
x_89 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_89, 0, x_88);
x_90 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_90, 0, x_86);
lean::cnstr_set(x_90, 1, x_25);
lean::cnstr_set(x_90, 2, x_89);
x_91 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_27, x_90);
x_13 = x_91;
x_14 = x_20;
goto lbl_15;
}
}
else
{
obj* x_93; obj* x_96; uint8 x_98; obj* x_99; obj* x_100; obj* x_101; 
lean::dec(x_0);
x_93 = lean::cnstr_get(x_17, 1);
lean::inc(x_93);
lean::dec(x_17);
x_96 = lean::cnstr_get(x_18, 0);
x_98 = lean::cnstr_get_scalar<uint8>(x_18, sizeof(void*)*1);
if (lean::is_exclusive(x_18)) {
 x_99 = x_18;
} else {
 lean::inc(x_96);
 lean::dec(x_18);
 x_99 = lean::box(0);
}
if (lean::is_scalar(x_99)) {
 x_100 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_100 = x_99;
}
lean::cnstr_set(x_100, 0, x_96);
lean::cnstr_set_scalar(x_100, sizeof(void*)*1, x_98);
x_101 = x_100;
x_13 = x_101;
x_14 = x_93;
goto lbl_15;
}
lbl_12:
{
if (lean::obj_tag(x_10) == 0)
{
obj* x_102; obj* x_104; obj* x_105; obj* x_106; obj* x_107; 
x_102 = lean::cnstr_get(x_10, 0);
if (lean::is_exclusive(x_10)) {
 lean::cnstr_release(x_10, 1);
 lean::cnstr_release(x_10, 2);
 x_104 = x_10;
} else {
 lean::inc(x_102);
 lean::dec(x_10);
 x_104 = lean::box(0);
}
x_105 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_104)) {
 x_106 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_106 = x_104;
}
lean::cnstr_set(x_106, 0, x_102);
lean::cnstr_set(x_106, 1, x_8);
lean::cnstr_set(x_106, 2, x_105);
x_107 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_107, 0, x_106);
lean::cnstr_set(x_107, 1, x_11);
return x_107;
}
else
{
obj* x_109; 
lean::dec(x_8);
x_109 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_109, 0, x_10);
lean::cnstr_set(x_109, 1, x_11);
return x_109;
}
}
lbl_15:
{
if (lean::obj_tag(x_13) == 0)
{
lean::dec(x_1);
lean::dec(x_3);
x_10 = x_13;
x_11 = x_14;
goto lbl_12;
}
else
{
obj* x_112; obj* x_115; obj* x_118; 
x_112 = lean::cnstr_get(x_13, 0);
lean::inc(x_112);
lean::dec(x_13);
x_115 = lean::cnstr_get(x_112, 0);
lean::inc(x_115);
lean::dec(x_112);
x_118 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_118, 0, x_3);
lean::cnstr_set(x_118, 1, x_115);
lean::cnstr_set(x_118, 2, x_1);
x_10 = x_118;
x_11 = x_14;
goto lbl_12;
}
}
}
}
obj* l_Lean_Parser_ParsecT_lookahead___at___private_init_lean_parser_term_1__trailing___spec__8(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_ParsecT_lookahead___at___private_init_lean_parser_term_1__trailing___spec__8___rarg), 10, 0);
return x_1;
}
}
obj* l_List_mfoldr___main___at___private_init_lean_parser_term_1__trailing___spec__9(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9, obj* x_10) {
_start:
{
if (lean::obj_tag(x_4) == 0)
{
obj* x_17; obj* x_18; obj* x_19; 
lean::dec(x_5);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_2);
x_17 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_18 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_18, 0, x_3);
lean::cnstr_set(x_18, 1, x_9);
lean::cnstr_set(x_18, 2, x_17);
x_19 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_19, 0, x_18);
lean::cnstr_set(x_19, 1, x_10);
return x_19;
}
else
{
obj* x_20; obj* x_22; obj* x_31; obj* x_32; 
x_20 = lean::cnstr_get(x_4, 0);
lean::inc(x_20);
x_22 = lean::cnstr_get(x_4, 1);
lean::inc(x_22);
lean::dec(x_4);
lean::inc(x_8);
lean::inc(x_7);
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_2);
lean::inc(x_1);
x_31 = l_List_mfoldr___main___at___private_init_lean_parser_term_1__trailing___spec__9(x_0, x_1, x_2, x_3, x_22, x_5, x_6, x_7, x_8, x_9, x_10);
x_32 = lean::cnstr_get(x_31, 0);
lean::inc(x_32);
if (lean::obj_tag(x_32) == 0)
{
obj* x_34; obj* x_37; obj* x_39; obj* x_41; obj* x_44; obj* x_45; obj* x_47; obj* x_49; obj* x_50; obj* x_51; 
x_34 = lean::cnstr_get(x_31, 1);
lean::inc(x_34);
lean::dec(x_31);
x_37 = lean::cnstr_get(x_32, 0);
lean::inc(x_37);
x_39 = lean::cnstr_get(x_32, 1);
lean::inc(x_39);
x_41 = lean::cnstr_get(x_32, 2);
lean::inc(x_41);
lean::dec(x_32);
x_44 = l_Lean_Parser_ParsecT_lookahead___at___private_init_lean_parser_term_1__trailing___spec__8___rarg(x_1, x_2, x_20, x_37, x_5, x_6, x_7, x_8, x_39, x_34);
x_45 = lean::cnstr_get(x_44, 0);
x_47 = lean::cnstr_get(x_44, 1);
if (lean::is_exclusive(x_44)) {
 x_49 = x_44;
} else {
 lean::inc(x_45);
 lean::inc(x_47);
 lean::dec(x_44);
 x_49 = lean::box(0);
}
x_50 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_41, x_45);
if (lean::is_scalar(x_49)) {
 x_51 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_51 = x_49;
}
lean::cnstr_set(x_51, 0, x_50);
lean::cnstr_set(x_51, 1, x_47);
return x_51;
}
else
{
obj* x_59; obj* x_61; obj* x_62; uint8 x_64; obj* x_65; obj* x_66; obj* x_67; obj* x_68; 
lean::dec(x_5);
lean::dec(x_8);
lean::dec(x_7);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_2);
lean::dec(x_20);
x_59 = lean::cnstr_get(x_31, 1);
if (lean::is_exclusive(x_31)) {
 lean::cnstr_release(x_31, 0);
 x_61 = x_31;
} else {
 lean::inc(x_59);
 lean::dec(x_31);
 x_61 = lean::box(0);
}
x_62 = lean::cnstr_get(x_32, 0);
x_64 = lean::cnstr_get_scalar<uint8>(x_32, sizeof(void*)*1);
if (lean::is_exclusive(x_32)) {
 x_65 = x_32;
} else {
 lean::inc(x_62);
 lean::dec(x_32);
 x_65 = lean::box(0);
}
if (lean::is_scalar(x_65)) {
 x_66 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_66 = x_65;
}
lean::cnstr_set(x_66, 0, x_62);
lean::cnstr_set_scalar(x_66, sizeof(void*)*1, x_64);
x_67 = x_66;
if (lean::is_scalar(x_61)) {
 x_68 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_68 = x_61;
}
lean::cnstr_set(x_68, 0, x_67);
lean::cnstr_set(x_68, 1, x_59);
return x_68;
}
}
}
}
obj* l_Lean_Parser_MonadParsec_longestMatch___at___private_init_lean_parser_term_1__trailing___spec__7(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; obj* x_8; obj* x_9; obj* x_11; obj* x_12; obj* x_14; obj* x_16; 
x_7 = lean::box(0);
x_8 = l_Lean_Parser_MonadParsec_longestMatch___rarg___lambda__2___closed__1;
x_9 = l_mjoin___rarg___closed__1;
lean::inc(x_5);
x_11 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_number_x_27___spec__8___rarg(x_8, x_9, x_7, x_7, x_5);
x_12 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
lean::inc(x_5);
x_14 = l_List_mfoldr___main___at___private_init_lean_parser_term_1__trailing___spec__9(x_5, x_9, x_12, x_11, x_0, x_1, x_2, x_3, x_4, x_5, x_6);
lean::dec(x_5);
x_16 = lean::cnstr_get(x_14, 0);
lean::inc(x_16);
if (lean::obj_tag(x_16) == 0)
{
obj* x_18; obj* x_20; obj* x_21; obj* x_23; obj* x_26; obj* x_27; obj* x_28; 
x_18 = lean::cnstr_get(x_14, 1);
if (lean::is_exclusive(x_14)) {
 lean::cnstr_release(x_14, 0);
 x_20 = x_14;
} else {
 lean::inc(x_18);
 lean::dec(x_14);
 x_20 = lean::box(0);
}
x_21 = lean::cnstr_get(x_16, 0);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_16, 2);
lean::inc(x_23);
lean::dec(x_16);
x_26 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_23, x_21);
x_27 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_12, x_26);
if (lean::is_scalar(x_20)) {
 x_28 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_28 = x_20;
}
lean::cnstr_set(x_28, 0, x_27);
lean::cnstr_set(x_28, 1, x_18);
return x_28;
}
else
{
obj* x_29; obj* x_31; obj* x_32; uint8 x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; obj* x_39; 
x_29 = lean::cnstr_get(x_14, 1);
if (lean::is_exclusive(x_14)) {
 lean::cnstr_release(x_14, 0);
 x_31 = x_14;
} else {
 lean::inc(x_29);
 lean::dec(x_14);
 x_31 = lean::box(0);
}
x_32 = lean::cnstr_get(x_16, 0);
x_34 = lean::cnstr_get_scalar<uint8>(x_16, sizeof(void*)*1);
if (lean::is_exclusive(x_16)) {
 x_35 = x_16;
} else {
 lean::inc(x_32);
 lean::dec(x_16);
 x_35 = lean::box(0);
}
if (lean::is_scalar(x_35)) {
 x_36 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_36 = x_35;
}
lean::cnstr_set(x_36, 0, x_32);
lean::cnstr_set_scalar(x_36, sizeof(void*)*1, x_34);
x_37 = x_36;
x_38 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_12, x_37);
if (lean::is_scalar(x_31)) {
 x_39 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_39 = x_31;
}
lean::cnstr_set(x_39, 0, x_38);
lean::cnstr_set(x_39, 1, x_29);
return x_39;
}
}
}
obj* l_Lean_Parser_Combinators_longestMatch___at___private_init_lean_parser_term_1__trailing___spec__6(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; obj* x_8; 
x_7 = l_Lean_Parser_MonadParsec_longestMatch___at___private_init_lean_parser_term_1__trailing___spec__7(x_0, x_1, x_2, x_3, x_4, x_5, x_6);
x_8 = lean::cnstr_get(x_7, 0);
lean::inc(x_8);
if (lean::obj_tag(x_8) == 0)
{
obj* x_10; obj* x_12; obj* x_13; obj* x_15; obj* x_17; obj* x_19; obj* x_20; 
x_10 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_release(x_7, 0);
 lean::cnstr_set(x_7, 1, lean::box(0));
 x_12 = x_7;
} else {
 lean::inc(x_10);
 lean::dec(x_7);
 x_12 = lean::box(0);
}
x_13 = lean::cnstr_get(x_8, 0);
x_15 = lean::cnstr_get(x_8, 1);
x_17 = lean::cnstr_get(x_8, 2);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_set(x_8, 0, lean::box(0));
 lean::cnstr_set(x_8, 1, lean::box(0));
 lean::cnstr_set(x_8, 2, lean::box(0));
 x_19 = x_8;
} else {
 lean::inc(x_13);
 lean::inc(x_15);
 lean::inc(x_17);
 lean::dec(x_8);
 x_19 = lean::box(0);
}
if (lean::obj_tag(x_13) == 0)
{
obj* x_22; 
x_22 = lean::box(0);
x_20 = x_22;
goto lbl_21;
}
else
{
obj* x_23; 
x_23 = lean::cnstr_get(x_13, 1);
lean::inc(x_23);
if (lean::obj_tag(x_23) == 0)
{
obj* x_27; obj* x_30; obj* x_31; obj* x_32; obj* x_33; 
lean::dec(x_12);
lean::dec(x_19);
x_27 = lean::cnstr_get(x_13, 0);
lean::inc(x_27);
lean::dec(x_13);
x_30 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_31 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_31, 0, x_27);
lean::cnstr_set(x_31, 1, x_15);
lean::cnstr_set(x_31, 2, x_30);
x_32 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_17, x_31);
x_33 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_33, 0, x_32);
lean::cnstr_set(x_33, 1, x_10);
return x_33;
}
else
{
obj* x_35; 
lean::dec(x_23);
x_35 = lean::box(0);
x_20 = x_35;
goto lbl_21;
}
}
lbl_21:
{
obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; obj* x_42; 
lean::dec(x_20);
x_37 = l_Lean_Parser_choice;
x_38 = l_Lean_Parser_Syntax_mkNode(x_37, x_13);
x_39 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_19)) {
 x_40 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_40 = x_19;
}
lean::cnstr_set(x_40, 0, x_38);
lean::cnstr_set(x_40, 1, x_15);
lean::cnstr_set(x_40, 2, x_39);
x_41 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_17, x_40);
if (lean::is_scalar(x_12)) {
 x_42 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_42 = x_12;
}
lean::cnstr_set(x_42, 0, x_41);
lean::cnstr_set(x_42, 1, x_10);
return x_42;
}
}
else
{
obj* x_43; obj* x_45; obj* x_46; uint8 x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; 
x_43 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_release(x_7, 0);
 x_45 = x_7;
} else {
 lean::inc(x_43);
 lean::dec(x_7);
 x_45 = lean::box(0);
}
x_46 = lean::cnstr_get(x_8, 0);
x_48 = lean::cnstr_get_scalar<uint8>(x_8, sizeof(void*)*1);
if (lean::is_exclusive(x_8)) {
 x_49 = x_8;
} else {
 lean::inc(x_46);
 lean::dec(x_8);
 x_49 = lean::box(0);
}
if (lean::is_scalar(x_49)) {
 x_50 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_50 = x_49;
}
lean::cnstr_set(x_50, 0, x_46);
lean::cnstr_set_scalar(x_50, sizeof(void*)*1, x_48);
x_51 = x_50;
if (lean::is_scalar(x_45)) {
 x_52 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_52 = x_45;
}
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_43);
return x_52;
}
}
}
obj* l_ReaderT_orelse___at___private_init_lean_parser_term_1__trailing___spec__11___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_13; obj* x_14; 
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
x_13 = lean::apply_6(x_0, x_2, x_3, x_4, x_5, x_6, x_7);
x_14 = lean::cnstr_get(x_13, 0);
lean::inc(x_14);
if (lean::obj_tag(x_14) == 0)
{
obj* x_22; obj* x_24; obj* x_25; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_2);
x_22 = lean::cnstr_get(x_13, 1);
if (lean::is_exclusive(x_13)) {
 lean::cnstr_release(x_13, 0);
 x_24 = x_13;
} else {
 lean::inc(x_22);
 lean::dec(x_13);
 x_24 = lean::box(0);
}
if (lean::is_scalar(x_24)) {
 x_25 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_25 = x_24;
}
lean::cnstr_set(x_25, 0, x_14);
lean::cnstr_set(x_25, 1, x_22);
return x_25;
}
else
{
uint8 x_26; 
x_26 = lean::cnstr_get_scalar<uint8>(x_14, sizeof(void*)*1);
if (x_26 == 0)
{
obj* x_27; obj* x_30; obj* x_33; obj* x_34; obj* x_36; obj* x_38; obj* x_39; obj* x_40; 
x_27 = lean::cnstr_get(x_13, 1);
lean::inc(x_27);
lean::dec(x_13);
x_30 = lean::cnstr_get(x_14, 0);
lean::inc(x_30);
lean::dec(x_14);
x_33 = lean::apply_6(x_1, x_2, x_3, x_4, x_5, x_6, x_27);
x_34 = lean::cnstr_get(x_33, 0);
x_36 = lean::cnstr_get(x_33, 1);
if (lean::is_exclusive(x_33)) {
 x_38 = x_33;
} else {
 lean::inc(x_34);
 lean::inc(x_36);
 lean::dec(x_33);
 x_38 = lean::box(0);
}
x_39 = l_Lean_Parser_ParsecT_orelseMkRes___rarg(x_30, x_34);
if (lean::is_scalar(x_38)) {
 x_40 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_40 = x_38;
}
lean::cnstr_set(x_40, 0, x_39);
lean::cnstr_set(x_40, 1, x_36);
return x_40;
}
else
{
obj* x_47; obj* x_49; obj* x_50; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_2);
x_47 = lean::cnstr_get(x_13, 1);
if (lean::is_exclusive(x_13)) {
 lean::cnstr_release(x_13, 0);
 x_49 = x_13;
} else {
 lean::inc(x_47);
 lean::dec(x_13);
 x_49 = lean::box(0);
}
if (lean::is_scalar(x_49)) {
 x_50 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_50 = x_49;
}
lean::cnstr_set(x_50, 0, x_14);
lean::cnstr_set(x_50, 1, x_47);
return x_50;
}
}
}
}
obj* l_ReaderT_orelse___at___private_init_lean_parser_term_1__trailing___spec__11(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_orelse___at___private_init_lean_parser_term_1__trailing___spec__11___rarg), 8, 0);
return x_1;
}
}
obj* l_List_foldl___main___at___private_init_lean_parser_term_1__trailing___spec__12(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_8; 
x_8 = lean::apply_6(x_0, x_2, x_3, x_4, x_5, x_6, x_7);
return x_8;
}
else
{
obj* x_9; obj* x_11; obj* x_14; 
x_9 = lean::cnstr_get(x_1, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_1, 1);
lean::inc(x_11);
lean::dec(x_1);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_ReaderT_orelse___at___private_init_lean_parser_term_1__trailing___spec__11___rarg), 8, 2);
lean::closure_set(x_14, 0, x_0);
lean::closure_set(x_14, 1, x_9);
x_0 = x_14;
x_1 = x_11;
goto _start;
}
}
}
obj* l_Lean_Parser_Combinators_anyOf___at___private_init_lean_parser_term_1__trailing___spec__10(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_7 = lean::box(0);
x_8 = l_Lean_Parser_Combinators_anyOf___rarg___closed__1;
x_9 = l_mjoin___rarg___closed__1;
x_10 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__5___rarg(x_8, x_9, x_7, x_7, x_1, x_2, x_3, x_4, x_5, x_6);
lean::dec(x_4);
lean::dec(x_3);
lean::dec(x_2);
lean::dec(x_1);
return x_10;
}
else
{
obj* x_15; obj* x_17; obj* x_20; 
x_15 = lean::cnstr_get(x_0, 0);
lean::inc(x_15);
x_17 = lean::cnstr_get(x_0, 1);
lean::inc(x_17);
lean::dec(x_0);
x_20 = l_List_foldl___main___at___private_init_lean_parser_term_1__trailing___spec__12(x_15, x_17, x_1, x_2, x_3, x_4, x_5, x_6);
return x_20;
}
}
}
obj* l_List_foldr___main___at___private_init_lean_parser_term_1__trailing___spec__13(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_8; 
x_8 = lean::apply_6(x_0, x_2, x_3, x_4, x_5, x_6, x_7);
return x_8;
}
else
{
obj* x_9; obj* x_11; obj* x_14; obj* x_15; 
x_9 = lean::cnstr_get(x_1, 0);
lean::inc(x_9);
x_11 = lean::cnstr_get(x_1, 1);
lean::inc(x_11);
lean::dec(x_1);
x_14 = lean::alloc_closure(reinterpret_cast<void*>(l_List_foldr___main___at___private_init_lean_parser_term_1__trailing___spec__13), 8, 2);
lean::closure_set(x_14, 0, x_0);
lean::closure_set(x_14, 1, x_11);
x_15 = l_ReaderT_orelse___at___private_init_lean_parser_term_1__trailing___spec__11___rarg(x_9, x_14, x_2, x_3, x_4, x_5, x_6, x_7);
return x_15;
}
}
}
obj* _init_l___private_init_lean_parser_term_1__trailing___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; obj* x_4; 
x_0 = lean::box(0);
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_app_Parser), 6, 0);
x_2 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_2, 0, x_1);
lean::cnstr_set(x_2, 1, x_0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_Term_sortApp_Parser), 6, 0);
x_4 = lean::alloc_cnstr(1, 2, 0);
lean::cnstr_set(x_4, 0, x_3);
lean::cnstr_set(x_4, 1, x_2);
return x_4;
}
}
obj* _init_l___private_init_lean_parser_term_1__trailing___closed__2() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; 
x_0 = lean::box(0);
x_1 = lean::mk_string("");
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_id___rarg___boxed), 1, 0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_MonadParsec_error___at_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView___spec__5___rarg___boxed), 10, 4);
lean::closure_set(x_3, 0, x_1);
lean::closure_set(x_3, 1, x_2);
lean::closure_set(x_3, 2, x_0);
lean::closure_set(x_3, 3, x_0);
return x_3;
}
}
obj* l___private_init_lean_parser_term_1__trailing(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; obj* x_9; obj* x_12; obj* x_13; obj* x_17; obj* x_18; 
x_7 = lean::cnstr_get(x_0, 4);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 2);
lean::inc(x_9);
lean::dec(x_0);
lean::inc(x_5);
lean::inc(x_3);
x_17 = l_Lean_Parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___rarg(x_7, x_1, x_2, x_3, x_4, x_5, x_6);
x_18 = lean::cnstr_get(x_17, 0);
lean::inc(x_18);
if (lean::obj_tag(x_18) == 0)
{
obj* x_20; obj* x_23; obj* x_25; obj* x_27; obj* x_30; obj* x_35; obj* x_36; obj* x_38; obj* x_41; 
x_20 = lean::cnstr_get(x_17, 1);
lean::inc(x_20);
lean::dec(x_17);
x_23 = lean::cnstr_get(x_18, 0);
lean::inc(x_23);
x_25 = lean::cnstr_get(x_18, 1);
lean::inc(x_25);
x_27 = lean::cnstr_get(x_18, 2);
lean::inc(x_27);
lean::dec(x_18);
x_30 = l___private_init_lean_parser_term_1__trailing___closed__2;
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_35 = l_List_foldr___main___at___private_init_lean_parser_term_1__trailing___spec__13(x_30, x_23, x_1, x_2, x_3, x_4, x_25, x_20);
x_36 = lean::cnstr_get(x_35, 0);
lean::inc(x_36);
x_38 = lean::cnstr_get(x_35, 1);
lean::inc(x_38);
lean::dec(x_35);
x_41 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_27, x_36);
x_12 = x_41;
x_13 = x_38;
goto lbl_14;
}
else
{
obj* x_42; obj* x_45; uint8 x_47; obj* x_48; obj* x_49; obj* x_50; 
x_42 = lean::cnstr_get(x_17, 1);
lean::inc(x_42);
lean::dec(x_17);
x_45 = lean::cnstr_get(x_18, 0);
x_47 = lean::cnstr_get_scalar<uint8>(x_18, sizeof(void*)*1);
if (lean::is_exclusive(x_18)) {
 x_48 = x_18;
} else {
 lean::inc(x_45);
 lean::dec(x_18);
 x_48 = lean::box(0);
}
if (lean::is_scalar(x_48)) {
 x_49 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_49 = x_48;
}
lean::cnstr_set(x_49, 0, x_45);
lean::cnstr_set_scalar(x_49, sizeof(void*)*1, x_47);
x_50 = x_49;
x_12 = x_50;
x_13 = x_42;
goto lbl_14;
}
lbl_14:
{
if (lean::obj_tag(x_12) == 0)
{
obj* x_57; 
lean::dec(x_5);
lean::dec(x_9);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_57 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_57, 0, x_12);
lean::cnstr_set(x_57, 1, x_13);
return x_57;
}
else
{
uint8 x_58; 
x_58 = lean::cnstr_get_scalar<uint8>(x_12, sizeof(void*)*1);
if (x_58 == 0)
{
obj* x_59; obj* x_64; obj* x_65; 
x_59 = lean::cnstr_get(x_12, 0);
lean::inc(x_59);
lean::dec(x_12);
lean::inc(x_5);
lean::inc(x_3);
x_64 = l_Lean_Parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___rarg(x_9, x_1, x_2, x_3, x_4, x_5, x_13);
x_65 = lean::cnstr_get(x_64, 0);
lean::inc(x_65);
if (lean::obj_tag(x_65) == 0)
{
obj* x_67; obj* x_70; obj* x_72; obj* x_74; obj* x_81; obj* x_82; obj* x_84; obj* x_86; obj* x_87; 
x_67 = lean::cnstr_get(x_64, 1);
lean::inc(x_67);
lean::dec(x_64);
x_70 = lean::cnstr_get(x_65, 0);
lean::inc(x_70);
x_72 = lean::cnstr_get(x_65, 1);
lean::inc(x_72);
x_74 = lean::cnstr_get(x_65, 2);
lean::inc(x_74);
lean::dec(x_65);
lean::inc(x_4);
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_81 = l_Lean_Parser_Combinators_longestMatch___at___private_init_lean_parser_term_1__trailing___spec__6(x_70, x_1, x_2, x_3, x_4, x_72, x_67);
x_82 = lean::cnstr_get(x_81, 0);
x_84 = lean::cnstr_get(x_81, 1);
if (lean::is_exclusive(x_81)) {
 lean::cnstr_set(x_81, 0, lean::box(0));
 lean::cnstr_set(x_81, 1, lean::box(0));
 x_86 = x_81;
} else {
 lean::inc(x_82);
 lean::inc(x_84);
 lean::dec(x_81);
 x_86 = lean::box(0);
}
x_87 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_74, x_82);
if (lean::obj_tag(x_87) == 0)
{
obj* x_93; obj* x_94; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_93 = l_Lean_Parser_ParsecT_orelseMkRes___rarg(x_59, x_87);
if (lean::is_scalar(x_86)) {
 x_94 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_94 = x_86;
}
lean::cnstr_set(x_94, 0, x_93);
lean::cnstr_set(x_94, 1, x_84);
return x_94;
}
else
{
uint8 x_95; 
x_95 = lean::cnstr_get_scalar<uint8>(x_87, sizeof(void*)*1);
if (x_95 == 0)
{
obj* x_97; obj* x_100; obj* x_101; obj* x_102; obj* x_104; obj* x_106; obj* x_107; obj* x_108; obj* x_109; 
lean::dec(x_86);
x_97 = lean::cnstr_get(x_87, 0);
lean::inc(x_97);
lean::dec(x_87);
x_100 = l___private_init_lean_parser_term_1__trailing___closed__1;
x_101 = l_Lean_Parser_Combinators_anyOf___at___private_init_lean_parser_term_1__trailing___spec__10(x_100, x_1, x_2, x_3, x_4, x_5, x_84);
x_102 = lean::cnstr_get(x_101, 0);
x_104 = lean::cnstr_get(x_101, 1);
if (lean::is_exclusive(x_101)) {
 x_106 = x_101;
} else {
 lean::inc(x_102);
 lean::inc(x_104);
 lean::dec(x_101);
 x_106 = lean::box(0);
}
x_107 = l_Lean_Parser_ParsecT_orelseMkRes___rarg(x_97, x_102);
x_108 = l_Lean_Parser_ParsecT_orelseMkRes___rarg(x_59, x_107);
if (lean::is_scalar(x_106)) {
 x_109 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_109 = x_106;
}
lean::cnstr_set(x_109, 0, x_108);
lean::cnstr_set(x_109, 1, x_104);
return x_109;
}
else
{
obj* x_115; obj* x_116; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_115 = l_Lean_Parser_ParsecT_orelseMkRes___rarg(x_59, x_87);
if (lean::is_scalar(x_86)) {
 x_116 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_116 = x_86;
}
lean::cnstr_set(x_116, 0, x_115);
lean::cnstr_set(x_116, 1, x_84);
return x_116;
}
}
}
else
{
uint8 x_117; 
x_117 = lean::cnstr_get_scalar<uint8>(x_65, sizeof(void*)*1);
if (x_117 == 0)
{
obj* x_118; obj* x_121; obj* x_124; obj* x_125; obj* x_126; obj* x_128; obj* x_130; obj* x_131; obj* x_132; obj* x_133; 
x_118 = lean::cnstr_get(x_64, 1);
lean::inc(x_118);
lean::dec(x_64);
x_121 = lean::cnstr_get(x_65, 0);
lean::inc(x_121);
lean::dec(x_65);
x_124 = l___private_init_lean_parser_term_1__trailing___closed__1;
x_125 = l_Lean_Parser_Combinators_anyOf___at___private_init_lean_parser_term_1__trailing___spec__10(x_124, x_1, x_2, x_3, x_4, x_5, x_118);
x_126 = lean::cnstr_get(x_125, 0);
x_128 = lean::cnstr_get(x_125, 1);
if (lean::is_exclusive(x_125)) {
 x_130 = x_125;
} else {
 lean::inc(x_126);
 lean::inc(x_128);
 lean::dec(x_125);
 x_130 = lean::box(0);
}
x_131 = l_Lean_Parser_ParsecT_orelseMkRes___rarg(x_121, x_126);
x_132 = l_Lean_Parser_ParsecT_orelseMkRes___rarg(x_59, x_131);
if (lean::is_scalar(x_130)) {
 x_133 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_133 = x_130;
}
lean::cnstr_set(x_133, 0, x_132);
lean::cnstr_set(x_133, 1, x_128);
return x_133;
}
else
{
obj* x_139; obj* x_141; obj* x_142; obj* x_144; obj* x_145; obj* x_146; obj* x_147; obj* x_148; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_139 = lean::cnstr_get(x_64, 1);
if (lean::is_exclusive(x_64)) {
 lean::cnstr_release(x_64, 0);
 x_141 = x_64;
} else {
 lean::inc(x_139);
 lean::dec(x_64);
 x_141 = lean::box(0);
}
x_142 = lean::cnstr_get(x_65, 0);
if (lean::is_exclusive(x_65)) {
 x_144 = x_65;
} else {
 lean::inc(x_142);
 lean::dec(x_65);
 x_144 = lean::box(0);
}
if (lean::is_scalar(x_144)) {
 x_145 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_145 = x_144;
}
lean::cnstr_set(x_145, 0, x_142);
lean::cnstr_set_scalar(x_145, sizeof(void*)*1, x_117);
x_146 = x_145;
x_147 = l_Lean_Parser_ParsecT_orelseMkRes___rarg(x_59, x_146);
if (lean::is_scalar(x_141)) {
 x_148 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_148 = x_141;
}
lean::cnstr_set(x_148, 0, x_147);
lean::cnstr_set(x_148, 1, x_139);
return x_148;
}
}
}
else
{
obj* x_155; 
lean::dec(x_5);
lean::dec(x_9);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_155 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_155, 0, x_12);
lean::cnstr_set(x_155, 1, x_13);
return x_155;
}
}
}
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__2___rarg___boxed(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__2___rarg(x_0, x_1);
lean::dec(x_1);
return x_2;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__2___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__2(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__3___rarg___boxed(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__3___rarg(x_0, x_1);
lean::dec(x_1);
return x_2;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__3___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__3(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__4___rarg___boxed(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__4___rarg(x_0, x_1);
lean::dec(x_1);
return x_2;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__4___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__4(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__5___rarg___boxed(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__5___rarg(x_0, x_1);
lean::dec(x_1);
return x_2;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__5___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_RBNode_find___main___at___private_init_lean_parser_term_1__trailing___spec__5(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___rarg___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; 
x_7 = l_Lean_Parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___rarg(x_0, x_1, x_2, x_3, x_4, x_5, x_6);
lean::dec(x_1);
lean::dec(x_2);
lean::dec(x_4);
return x_7;
}
}
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_indexed___at___private_init_lean_parser_term_1__trailing___spec__1(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_Lean_Parser_ParsecT_lookahead___at___private_init_lean_parser_term_1__trailing___spec__8___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_ParsecT_lookahead___at___private_init_lean_parser_term_1__trailing___spec__8(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_List_mfoldr___main___at___private_init_lean_parser_term_1__trailing___spec__9___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8, obj* x_9, obj* x_10) {
_start:
{
obj* x_11; 
x_11 = l_List_mfoldr___main___at___private_init_lean_parser_term_1__trailing___spec__9(x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10);
lean::dec(x_0);
return x_11;
}
}
obj* l_ReaderT_orelse___at___private_init_lean_parser_term_1__trailing___spec__11___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_ReaderT_orelse___at___private_init_lean_parser_term_1__trailing___spec__11(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__2___rarg(obj* x_0, obj* x_1) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_9; uint8 x_12; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 2);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 3);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_Lean_Name_quickLt(x_1, x_5);
if (x_12 == 0)
{
uint8 x_14; 
lean::dec(x_3);
x_14 = l_Lean_Name_quickLt(x_5, x_1);
lean::dec(x_5);
if (x_14 == 0)
{
obj* x_17; 
lean::dec(x_9);
x_17 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_17, 0, x_7);
return x_17;
}
else
{
lean::dec(x_7);
x_0 = x_9;
goto _start;
}
}
else
{
lean::dec(x_7);
lean::dec(x_9);
lean::dec(x_5);
x_0 = x_3;
goto _start;
}
}
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__2___rarg___boxed), 2, 0);
return x_1;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__3___rarg(obj* x_0, obj* x_1) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_9; uint8 x_12; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 2);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 3);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_Lean_Name_quickLt(x_1, x_5);
if (x_12 == 0)
{
uint8 x_14; 
lean::dec(x_3);
x_14 = l_Lean_Name_quickLt(x_5, x_1);
lean::dec(x_5);
if (x_14 == 0)
{
obj* x_17; 
lean::dec(x_9);
x_17 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_17, 0, x_7);
return x_17;
}
else
{
lean::dec(x_7);
x_0 = x_9;
goto _start;
}
}
else
{
lean::dec(x_7);
lean::dec(x_9);
lean::dec(x_5);
x_0 = x_3;
goto _start;
}
}
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__3(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__3___rarg___boxed), 2, 0);
return x_1;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__4___rarg(obj* x_0, obj* x_1) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_9; uint8 x_12; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 2);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 3);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_Lean_Name_quickLt(x_1, x_5);
if (x_12 == 0)
{
uint8 x_14; 
lean::dec(x_3);
x_14 = l_Lean_Name_quickLt(x_5, x_1);
lean::dec(x_5);
if (x_14 == 0)
{
obj* x_17; 
lean::dec(x_9);
x_17 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_17, 0, x_7);
return x_17;
}
else
{
lean::dec(x_7);
x_0 = x_9;
goto _start;
}
}
else
{
lean::dec(x_7);
lean::dec(x_9);
lean::dec(x_5);
x_0 = x_3;
goto _start;
}
}
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__4(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__4___rarg___boxed), 2, 0);
return x_1;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__5___rarg(obj* x_0, obj* x_1) {
_start:
{
if (lean::obj_tag(x_0) == 0)
{
obj* x_2; 
x_2 = lean::box(0);
return x_2;
}
else
{
obj* x_3; obj* x_5; obj* x_7; obj* x_9; uint8 x_12; 
x_3 = lean::cnstr_get(x_0, 0);
lean::inc(x_3);
x_5 = lean::cnstr_get(x_0, 1);
lean::inc(x_5);
x_7 = lean::cnstr_get(x_0, 2);
lean::inc(x_7);
x_9 = lean::cnstr_get(x_0, 3);
lean::inc(x_9);
lean::dec(x_0);
x_12 = l_Lean_Name_quickLt(x_1, x_5);
if (x_12 == 0)
{
uint8 x_14; 
lean::dec(x_3);
x_14 = l_Lean_Name_quickLt(x_5, x_1);
lean::dec(x_5);
if (x_14 == 0)
{
obj* x_17; 
lean::dec(x_9);
x_17 = lean::alloc_cnstr(1, 1, 0);
lean::cnstr_set(x_17, 0, x_7);
return x_17;
}
else
{
lean::dec(x_7);
x_0 = x_9;
goto _start;
}
}
else
{
lean::dec(x_7);
lean::dec(x_9);
lean::dec(x_5);
x_0 = x_3;
goto _start;
}
}
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__5(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__5___rarg___boxed), 2, 0);
return x_1;
}
}
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_8; obj* x_9; 
x_6 = l_Lean_Parser_peekToken___closed__1;
lean::inc(x_2);
x_8 = l_Lean_Parser_MonadParsec_observing___at_Lean_Parser_peekToken___spec__2(x_6, x_2, x_4, x_5);
x_9 = lean::cnstr_get(x_8, 0);
lean::inc(x_9);
if (lean::obj_tag(x_9) == 0)
{
obj* x_11; 
x_11 = lean::cnstr_get(x_9, 0);
lean::inc(x_11);
if (lean::obj_tag(x_11) == 0)
{
obj* x_15; obj* x_18; obj* x_20; obj* x_23; obj* x_24; obj* x_25; obj* x_26; obj* x_28; obj* x_30; obj* x_32; obj* x_33; obj* x_34; 
lean::dec(x_11);
lean::dec(x_0);
x_15 = lean::cnstr_get(x_8, 1);
lean::inc(x_15);
lean::dec(x_8);
x_18 = lean::cnstr_get(x_9, 1);
lean::inc(x_18);
x_20 = lean::cnstr_get(x_9, 2);
lean::inc(x_20);
lean::dec(x_9);
x_23 = lean::box(0);
x_24 = l_String_splitAux___main___closed__1;
x_25 = l_mjoin___rarg___closed__1;
x_26 = l_Lean_Parser_MonadParsec_error___at___private_init_lean_parser_token_1__finishCommentBlockAux___main___spec__1___rarg(x_24, x_25, x_23, x_23, x_2, x_18, x_15);
lean::dec(x_2);
x_28 = lean::cnstr_get(x_26, 0);
x_30 = lean::cnstr_get(x_26, 1);
if (lean::is_exclusive(x_26)) {
 x_32 = x_26;
} else {
 lean::inc(x_28);
 lean::inc(x_30);
 lean::dec(x_26);
 x_32 = lean::box(0);
}
x_33 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_20, x_28);
if (lean::is_scalar(x_32)) {
 x_34 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_34 = x_32;
}
lean::cnstr_set(x_34, 0, x_33);
lean::cnstr_set(x_34, 1, x_30);
return x_34;
}
else
{
obj* x_35; 
x_35 = lean::cnstr_get(x_11, 0);
lean::inc(x_35);
lean::dec(x_11);
switch (lean::obj_tag(x_35)) {
case 0:
{
obj* x_38; obj* x_41; obj* x_44; obj* x_46; obj* x_49; obj* x_52; obj* x_53; obj* x_54; obj* x_56; obj* x_58; obj* x_60; obj* x_62; obj* x_63; obj* x_64; obj* x_65; obj* x_66; 
x_38 = lean::cnstr_get(x_35, 0);
lean::inc(x_38);
lean::dec(x_35);
x_41 = lean::cnstr_get(x_8, 1);
lean::inc(x_41);
lean::dec(x_8);
x_44 = lean::cnstr_get(x_9, 1);
lean::inc(x_44);
x_46 = lean::cnstr_get(x_9, 2);
lean::inc(x_46);
lean::dec(x_9);
x_49 = lean::cnstr_get(x_38, 1);
lean::inc(x_49);
lean::dec(x_38);
x_52 = lean::box(0);
x_53 = lean_name_mk_string(x_52, x_49);
x_54 = l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__2___rarg(x_0, x_53);
lean::dec(x_53);
x_56 = l_Option_toMonad___main___at_Lean_Parser_indexed___spec__2___rarg(x_54, x_2, x_44, x_41);
lean::dec(x_2);
x_58 = lean::cnstr_get(x_56, 0);
x_60 = lean::cnstr_get(x_56, 1);
if (lean::is_exclusive(x_56)) {
 x_62 = x_56;
} else {
 lean::inc(x_58);
 lean::inc(x_60);
 lean::dec(x_56);
 x_62 = lean::box(0);
}
x_63 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_64 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_63, x_58);
x_65 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_46, x_64);
if (lean::is_scalar(x_62)) {
 x_66 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_66 = x_62;
}
lean::cnstr_set(x_66, 0, x_65);
lean::cnstr_set(x_66, 1, x_60);
return x_66;
}
case 1:
{
obj* x_68; obj* x_71; obj* x_73; obj* x_76; obj* x_77; obj* x_78; obj* x_80; obj* x_82; obj* x_84; obj* x_85; obj* x_86; obj* x_87; obj* x_88; 
lean::dec(x_35);
x_68 = lean::cnstr_get(x_8, 1);
lean::inc(x_68);
lean::dec(x_8);
x_71 = lean::cnstr_get(x_9, 1);
lean::inc(x_71);
x_73 = lean::cnstr_get(x_9, 2);
lean::inc(x_73);
lean::dec(x_9);
x_76 = l_Lean_Parser_indexed___rarg___lambda__1___closed__1;
x_77 = l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__3___rarg(x_0, x_76);
x_78 = l_Option_toMonad___main___at_Lean_Parser_indexed___spec__2___rarg(x_77, x_2, x_71, x_68);
lean::dec(x_2);
x_80 = lean::cnstr_get(x_78, 0);
x_82 = lean::cnstr_get(x_78, 1);
if (lean::is_exclusive(x_78)) {
 x_84 = x_78;
} else {
 lean::inc(x_80);
 lean::inc(x_82);
 lean::dec(x_78);
 x_84 = lean::box(0);
}
x_85 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_86 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_85, x_80);
x_87 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_73, x_86);
if (lean::is_scalar(x_84)) {
 x_88 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_88 = x_84;
}
lean::cnstr_set(x_88, 0, x_87);
lean::cnstr_set(x_88, 1, x_82);
return x_88;
}
case 2:
{
obj* x_89; obj* x_92; obj* x_94; obj* x_97; obj* x_100; obj* x_103; obj* x_105; obj* x_107; obj* x_109; obj* x_111; obj* x_112; obj* x_113; obj* x_114; obj* x_115; 
x_89 = lean::cnstr_get(x_8, 1);
lean::inc(x_89);
lean::dec(x_8);
x_92 = lean::cnstr_get(x_9, 1);
lean::inc(x_92);
x_94 = lean::cnstr_get(x_9, 2);
lean::inc(x_94);
lean::dec(x_9);
x_97 = lean::cnstr_get(x_35, 0);
lean::inc(x_97);
lean::dec(x_35);
x_100 = lean::cnstr_get(x_97, 0);
lean::inc(x_100);
lean::dec(x_97);
x_103 = l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__4___rarg(x_0, x_100);
lean::dec(x_100);
x_105 = l_Option_toMonad___main___at_Lean_Parser_indexed___spec__2___rarg(x_103, x_2, x_92, x_89);
lean::dec(x_2);
x_107 = lean::cnstr_get(x_105, 0);
x_109 = lean::cnstr_get(x_105, 1);
if (lean::is_exclusive(x_105)) {
 x_111 = x_105;
} else {
 lean::inc(x_107);
 lean::inc(x_109);
 lean::dec(x_105);
 x_111 = lean::box(0);
}
x_112 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_113 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_112, x_107);
x_114 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_94, x_113);
if (lean::is_scalar(x_111)) {
 x_115 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_115 = x_111;
}
lean::cnstr_set(x_115, 0, x_114);
lean::cnstr_set(x_115, 1, x_109);
return x_115;
}
default:
{
obj* x_116; obj* x_119; obj* x_121; obj* x_124; obj* x_125; obj* x_126; obj* x_127; obj* x_128; 
x_116 = lean::cnstr_get(x_8, 1);
lean::inc(x_116);
lean::dec(x_8);
x_119 = lean::cnstr_get(x_9, 1);
lean::inc(x_119);
x_121 = lean::cnstr_get(x_9, 2);
lean::inc(x_121);
lean::dec(x_9);
x_124 = lean::box(0);
x_125 = l_String_splitAux___main___closed__1;
x_126 = l_mjoin___rarg___closed__1;
x_127 = l_Lean_Parser_MonadParsec_error___at___private_init_lean_parser_token_1__finishCommentBlockAux___main___spec__1___rarg(x_125, x_126, x_124, x_124, x_2, x_119, x_116);
x_128 = lean::cnstr_get(x_127, 0);
lean::inc(x_128);
if (lean::obj_tag(x_128) == 0)
{
obj* x_130; obj* x_133; obj* x_135; obj* x_137; obj* x_140; obj* x_142; obj* x_144; obj* x_146; obj* x_148; obj* x_149; obj* x_150; obj* x_151; 
x_130 = lean::cnstr_get(x_127, 1);
lean::inc(x_130);
lean::dec(x_127);
x_133 = lean::cnstr_get(x_128, 0);
lean::inc(x_133);
x_135 = lean::cnstr_get(x_128, 1);
lean::inc(x_135);
x_137 = lean::cnstr_get(x_128, 2);
lean::inc(x_137);
lean::dec(x_128);
x_140 = l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__5___rarg(x_0, x_133);
lean::dec(x_133);
x_142 = l_Option_toMonad___main___at_Lean_Parser_indexed___spec__2___rarg(x_140, x_2, x_135, x_130);
lean::dec(x_2);
x_144 = lean::cnstr_get(x_142, 0);
x_146 = lean::cnstr_get(x_142, 1);
if (lean::is_exclusive(x_142)) {
 x_148 = x_142;
} else {
 lean::inc(x_144);
 lean::inc(x_146);
 lean::dec(x_142);
 x_148 = lean::box(0);
}
x_149 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_137, x_144);
x_150 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_121, x_149);
if (lean::is_scalar(x_148)) {
 x_151 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_151 = x_148;
}
lean::cnstr_set(x_151, 0, x_150);
lean::cnstr_set(x_151, 1, x_146);
return x_151;
}
else
{
obj* x_154; obj* x_156; obj* x_157; uint8 x_159; obj* x_160; obj* x_161; obj* x_162; obj* x_163; obj* x_164; 
lean::dec(x_0);
lean::dec(x_2);
x_154 = lean::cnstr_get(x_127, 1);
if (lean::is_exclusive(x_127)) {
 lean::cnstr_release(x_127, 0);
 x_156 = x_127;
} else {
 lean::inc(x_154);
 lean::dec(x_127);
 x_156 = lean::box(0);
}
x_157 = lean::cnstr_get(x_128, 0);
x_159 = lean::cnstr_get_scalar<uint8>(x_128, sizeof(void*)*1);
if (lean::is_exclusive(x_128)) {
 x_160 = x_128;
} else {
 lean::inc(x_157);
 lean::dec(x_128);
 x_160 = lean::box(0);
}
if (lean::is_scalar(x_160)) {
 x_161 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_161 = x_160;
}
lean::cnstr_set(x_161, 0, x_157);
lean::cnstr_set_scalar(x_161, sizeof(void*)*1, x_159);
x_162 = x_161;
x_163 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_121, x_162);
if (lean::is_scalar(x_156)) {
 x_164 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_164 = x_156;
}
lean::cnstr_set(x_164, 0, x_163);
lean::cnstr_set(x_164, 1, x_154);
return x_164;
}
}
}
}
}
else
{
obj* x_167; obj* x_169; obj* x_170; uint8 x_172; obj* x_173; obj* x_174; obj* x_175; obj* x_176; 
lean::dec(x_0);
lean::dec(x_2);
x_167 = lean::cnstr_get(x_8, 1);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_release(x_8, 0);
 x_169 = x_8;
} else {
 lean::inc(x_167);
 lean::dec(x_8);
 x_169 = lean::box(0);
}
x_170 = lean::cnstr_get(x_9, 0);
x_172 = lean::cnstr_get_scalar<uint8>(x_9, sizeof(void*)*1);
if (lean::is_exclusive(x_9)) {
 x_173 = x_9;
} else {
 lean::inc(x_170);
 lean::dec(x_9);
 x_173 = lean::box(0);
}
if (lean::is_scalar(x_173)) {
 x_174 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_174 = x_173;
}
lean::cnstr_set(x_174, 0, x_170);
lean::cnstr_set_scalar(x_174, sizeof(void*)*1, x_172);
x_175 = x_174;
if (lean::is_scalar(x_169)) {
 x_176 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_176 = x_169;
}
lean::cnstr_set(x_176, 0, x_175);
lean::cnstr_set(x_176, 1, x_167);
return x_176;
}
}
}
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg___boxed), 6, 0);
return x_1;
}
}
obj* l_List_foldr___main___at___private_init_lean_parser_term_2__leading___spec__6(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
if (lean::obj_tag(x_1) == 0)
{
obj* x_7; 
x_7 = lean::apply_5(x_0, x_2, x_3, x_4, x_5, x_6);
return x_7;
}
else
{
obj* x_8; obj* x_10; obj* x_13; obj* x_14; 
x_8 = lean::cnstr_get(x_1, 0);
lean::inc(x_8);
x_10 = lean::cnstr_get(x_1, 1);
lean::inc(x_10);
lean::dec(x_1);
x_13 = lean::alloc_closure(reinterpret_cast<void*>(l_List_foldr___main___at___private_init_lean_parser_term_2__leading___spec__6), 7, 2);
lean::closure_set(x_13, 0, x_0);
lean::closure_set(x_13, 1, x_10);
x_14 = l_ReaderT_orelse___at_Lean_Parser_command_NotationSpec_foldAction_Parser_Lean_Parser_HasTokens___spec__2___rarg(x_8, x_13, x_2, x_3, x_4, x_5, x_6);
return x_14;
}
}
}
obj* l_Lean_Parser_Combinators_longestMatch___at___private_init_lean_parser_term_2__leading___spec__7(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_7; 
x_6 = l_Lean_Parser_MonadParsec_longestMatch___at_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___spec__3(x_0, x_1, x_2, x_3, x_4, x_5);
x_7 = lean::cnstr_get(x_6, 0);
lean::inc(x_7);
if (lean::obj_tag(x_7) == 0)
{
obj* x_9; obj* x_11; obj* x_12; obj* x_14; obj* x_16; obj* x_18; obj* x_19; 
x_9 = lean::cnstr_get(x_6, 1);
if (lean::is_exclusive(x_6)) {
 lean::cnstr_release(x_6, 0);
 lean::cnstr_set(x_6, 1, lean::box(0));
 x_11 = x_6;
} else {
 lean::inc(x_9);
 lean::dec(x_6);
 x_11 = lean::box(0);
}
x_12 = lean::cnstr_get(x_7, 0);
x_14 = lean::cnstr_get(x_7, 1);
x_16 = lean::cnstr_get(x_7, 2);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_set(x_7, 0, lean::box(0));
 lean::cnstr_set(x_7, 1, lean::box(0));
 lean::cnstr_set(x_7, 2, lean::box(0));
 x_18 = x_7;
} else {
 lean::inc(x_12);
 lean::inc(x_14);
 lean::inc(x_16);
 lean::dec(x_7);
 x_18 = lean::box(0);
}
if (lean::obj_tag(x_12) == 0)
{
obj* x_21; 
x_21 = lean::box(0);
x_19 = x_21;
goto lbl_20;
}
else
{
obj* x_22; 
x_22 = lean::cnstr_get(x_12, 1);
lean::inc(x_22);
if (lean::obj_tag(x_22) == 0)
{
obj* x_26; obj* x_29; obj* x_30; obj* x_31; obj* x_32; 
lean::dec(x_11);
lean::dec(x_18);
x_26 = lean::cnstr_get(x_12, 0);
lean::inc(x_26);
lean::dec(x_12);
x_29 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_30 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_30, 0, x_26);
lean::cnstr_set(x_30, 1, x_14);
lean::cnstr_set(x_30, 2, x_29);
x_31 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_16, x_30);
x_32 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_32, 0, x_31);
lean::cnstr_set(x_32, 1, x_9);
return x_32;
}
else
{
obj* x_34; 
lean::dec(x_22);
x_34 = lean::box(0);
x_19 = x_34;
goto lbl_20;
}
}
lbl_20:
{
obj* x_36; obj* x_37; obj* x_38; obj* x_39; obj* x_40; obj* x_41; 
lean::dec(x_19);
x_36 = l_Lean_Parser_choice;
x_37 = l_Lean_Parser_Syntax_mkNode(x_36, x_12);
x_38 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_18)) {
 x_39 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_39 = x_18;
}
lean::cnstr_set(x_39, 0, x_37);
lean::cnstr_set(x_39, 1, x_14);
lean::cnstr_set(x_39, 2, x_38);
x_40 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_16, x_39);
if (lean::is_scalar(x_11)) {
 x_41 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_41 = x_11;
}
lean::cnstr_set(x_41, 0, x_40);
lean::cnstr_set(x_41, 1, x_9);
return x_41;
}
}
else
{
obj* x_42; obj* x_44; obj* x_45; uint8 x_47; obj* x_48; obj* x_49; obj* x_50; obj* x_51; 
x_42 = lean::cnstr_get(x_6, 1);
if (lean::is_exclusive(x_6)) {
 lean::cnstr_release(x_6, 0);
 x_44 = x_6;
} else {
 lean::inc(x_42);
 lean::dec(x_6);
 x_44 = lean::box(0);
}
x_45 = lean::cnstr_get(x_7, 0);
x_47 = lean::cnstr_get_scalar<uint8>(x_7, sizeof(void*)*1);
if (lean::is_exclusive(x_7)) {
 x_48 = x_7;
} else {
 lean::inc(x_45);
 lean::dec(x_7);
 x_48 = lean::box(0);
}
if (lean::is_scalar(x_48)) {
 x_49 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_49 = x_48;
}
lean::cnstr_set(x_49, 0, x_45);
lean::cnstr_set_scalar(x_49, sizeof(void*)*1, x_47);
x_50 = x_49;
if (lean::is_scalar(x_44)) {
 x_51 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_51 = x_44;
}
lean::cnstr_set(x_51, 0, x_50);
lean::cnstr_set(x_51, 1, x_42);
return x_51;
}
}
}
obj* _init_l___private_init_lean_parser_term_2__leading___closed__1() {
_start:
{
obj* x_0; obj* x_1; obj* x_2; obj* x_3; 
x_0 = lean::box(0);
x_1 = lean::mk_string("");
x_2 = lean::alloc_closure(reinterpret_cast<void*>(l_id___rarg___boxed), 1, 0);
x_3 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_MonadParsec_error___at_Lean_Parser_command_NotationSpec_precedenceLit_Parser_Lean_Parser_HasTokens___spec__4___rarg___boxed), 9, 4);
lean::closure_set(x_3, 0, x_1);
lean::closure_set(x_3, 1, x_2);
lean::closure_set(x_3, 2, x_0);
lean::closure_set(x_3, 3, x_0);
return x_3;
}
}
obj* l___private_init_lean_parser_term_2__leading(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; obj* x_8; obj* x_13; obj* x_14; 
x_6 = lean::cnstr_get(x_0, 3);
lean::inc(x_6);
x_8 = lean::cnstr_get(x_0, 1);
lean::inc(x_8);
lean::dec(x_0);
lean::inc(x_4);
lean::inc(x_2);
x_13 = l_Lean_Parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg(x_6, x_1, x_2, x_3, x_4, x_5);
x_14 = lean::cnstr_get(x_13, 0);
lean::inc(x_14);
if (lean::obj_tag(x_14) == 0)
{
obj* x_16; obj* x_19; obj* x_21; obj* x_23; obj* x_26; obj* x_30; obj* x_31; obj* x_33; obj* x_35; obj* x_36; 
x_16 = lean::cnstr_get(x_13, 1);
lean::inc(x_16);
lean::dec(x_13);
x_19 = lean::cnstr_get(x_14, 0);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_14, 1);
lean::inc(x_21);
x_23 = lean::cnstr_get(x_14, 2);
lean::inc(x_23);
lean::dec(x_14);
x_26 = l___private_init_lean_parser_term_2__leading___closed__1;
lean::inc(x_3);
lean::inc(x_2);
lean::inc(x_1);
x_30 = l_List_foldr___main___at___private_init_lean_parser_term_2__leading___spec__6(x_26, x_19, x_1, x_2, x_3, x_21, x_16);
x_31 = lean::cnstr_get(x_30, 0);
x_33 = lean::cnstr_get(x_30, 1);
if (lean::is_exclusive(x_30)) {
 lean::cnstr_set(x_30, 0, lean::box(0));
 lean::cnstr_set(x_30, 1, lean::box(0));
 x_35 = x_30;
} else {
 lean::inc(x_31);
 lean::inc(x_33);
 lean::dec(x_30);
 x_35 = lean::box(0);
}
x_36 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_23, x_31);
if (lean::obj_tag(x_36) == 0)
{
obj* x_42; 
lean::dec(x_8);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
if (lean::is_scalar(x_35)) {
 x_42 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_42 = x_35;
}
lean::cnstr_set(x_42, 0, x_36);
lean::cnstr_set(x_42, 1, x_33);
return x_42;
}
else
{
uint8 x_43; 
x_43 = lean::cnstr_get_scalar<uint8>(x_36, sizeof(void*)*1);
if (x_43 == 0)
{
obj* x_45; obj* x_49; obj* x_50; 
lean::dec(x_35);
x_45 = lean::cnstr_get(x_36, 0);
lean::inc(x_45);
lean::dec(x_36);
lean::inc(x_2);
x_49 = l_Lean_Parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg(x_8, x_1, x_2, x_3, x_4, x_33);
x_50 = lean::cnstr_get(x_49, 0);
lean::inc(x_50);
if (lean::obj_tag(x_50) == 0)
{
obj* x_52; obj* x_55; obj* x_57; obj* x_59; obj* x_62; obj* x_63; obj* x_65; obj* x_67; obj* x_68; obj* x_69; obj* x_70; 
x_52 = lean::cnstr_get(x_49, 1);
lean::inc(x_52);
lean::dec(x_49);
x_55 = lean::cnstr_get(x_50, 0);
lean::inc(x_55);
x_57 = lean::cnstr_get(x_50, 1);
lean::inc(x_57);
x_59 = lean::cnstr_get(x_50, 2);
lean::inc(x_59);
lean::dec(x_50);
x_62 = l_Lean_Parser_Combinators_longestMatch___at___private_init_lean_parser_term_2__leading___spec__7(x_55, x_1, x_2, x_3, x_57, x_52);
x_63 = lean::cnstr_get(x_62, 0);
x_65 = lean::cnstr_get(x_62, 1);
if (lean::is_exclusive(x_62)) {
 x_67 = x_62;
} else {
 lean::inc(x_63);
 lean::inc(x_65);
 lean::dec(x_62);
 x_67 = lean::box(0);
}
x_68 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_59, x_63);
x_69 = l_Lean_Parser_ParsecT_orelseMkRes___rarg(x_45, x_68);
if (lean::is_scalar(x_67)) {
 x_70 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_70 = x_67;
}
lean::cnstr_set(x_70, 0, x_69);
lean::cnstr_set(x_70, 1, x_65);
return x_70;
}
else
{
obj* x_74; obj* x_76; obj* x_77; uint8 x_79; obj* x_80; obj* x_81; obj* x_82; obj* x_83; obj* x_84; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_74 = lean::cnstr_get(x_49, 1);
if (lean::is_exclusive(x_49)) {
 lean::cnstr_release(x_49, 0);
 x_76 = x_49;
} else {
 lean::inc(x_74);
 lean::dec(x_49);
 x_76 = lean::box(0);
}
x_77 = lean::cnstr_get(x_50, 0);
x_79 = lean::cnstr_get_scalar<uint8>(x_50, sizeof(void*)*1);
if (lean::is_exclusive(x_50)) {
 x_80 = x_50;
} else {
 lean::inc(x_77);
 lean::dec(x_50);
 x_80 = lean::box(0);
}
if (lean::is_scalar(x_80)) {
 x_81 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_81 = x_80;
}
lean::cnstr_set(x_81, 0, x_77);
lean::cnstr_set_scalar(x_81, sizeof(void*)*1, x_79);
x_82 = x_81;
x_83 = l_Lean_Parser_ParsecT_orelseMkRes___rarg(x_45, x_82);
if (lean::is_scalar(x_76)) {
 x_84 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_84 = x_76;
}
lean::cnstr_set(x_84, 0, x_83);
lean::cnstr_set(x_84, 1, x_74);
return x_84;
}
}
else
{
obj* x_90; 
lean::dec(x_8);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
if (lean::is_scalar(x_35)) {
 x_90 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_90 = x_35;
}
lean::cnstr_set(x_90, 0, x_36);
lean::cnstr_set(x_90, 1, x_33);
return x_90;
}
}
}
else
{
uint8 x_91; 
x_91 = lean::cnstr_get_scalar<uint8>(x_14, sizeof(void*)*1);
if (x_91 == 0)
{
obj* x_92; obj* x_95; obj* x_99; obj* x_100; 
x_92 = lean::cnstr_get(x_13, 1);
lean::inc(x_92);
lean::dec(x_13);
x_95 = lean::cnstr_get(x_14, 0);
lean::inc(x_95);
lean::dec(x_14);
lean::inc(x_2);
x_99 = l_Lean_Parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg(x_8, x_1, x_2, x_3, x_4, x_92);
x_100 = lean::cnstr_get(x_99, 0);
lean::inc(x_100);
if (lean::obj_tag(x_100) == 0)
{
obj* x_102; obj* x_105; obj* x_107; obj* x_109; obj* x_112; obj* x_113; obj* x_115; obj* x_117; obj* x_118; obj* x_119; obj* x_120; 
x_102 = lean::cnstr_get(x_99, 1);
lean::inc(x_102);
lean::dec(x_99);
x_105 = lean::cnstr_get(x_100, 0);
lean::inc(x_105);
x_107 = lean::cnstr_get(x_100, 1);
lean::inc(x_107);
x_109 = lean::cnstr_get(x_100, 2);
lean::inc(x_109);
lean::dec(x_100);
x_112 = l_Lean_Parser_Combinators_longestMatch___at___private_init_lean_parser_term_2__leading___spec__7(x_105, x_1, x_2, x_3, x_107, x_102);
x_113 = lean::cnstr_get(x_112, 0);
x_115 = lean::cnstr_get(x_112, 1);
if (lean::is_exclusive(x_112)) {
 x_117 = x_112;
} else {
 lean::inc(x_113);
 lean::inc(x_115);
 lean::dec(x_112);
 x_117 = lean::box(0);
}
x_118 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_109, x_113);
x_119 = l_Lean_Parser_ParsecT_orelseMkRes___rarg(x_95, x_118);
if (lean::is_scalar(x_117)) {
 x_120 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_120 = x_117;
}
lean::cnstr_set(x_120, 0, x_119);
lean::cnstr_set(x_120, 1, x_115);
return x_120;
}
else
{
obj* x_124; obj* x_126; obj* x_127; uint8 x_129; obj* x_130; obj* x_131; obj* x_132; obj* x_133; obj* x_134; 
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_124 = lean::cnstr_get(x_99, 1);
if (lean::is_exclusive(x_99)) {
 lean::cnstr_release(x_99, 0);
 x_126 = x_99;
} else {
 lean::inc(x_124);
 lean::dec(x_99);
 x_126 = lean::box(0);
}
x_127 = lean::cnstr_get(x_100, 0);
x_129 = lean::cnstr_get_scalar<uint8>(x_100, sizeof(void*)*1);
if (lean::is_exclusive(x_100)) {
 x_130 = x_100;
} else {
 lean::inc(x_127);
 lean::dec(x_100);
 x_130 = lean::box(0);
}
if (lean::is_scalar(x_130)) {
 x_131 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_131 = x_130;
}
lean::cnstr_set(x_131, 0, x_127);
lean::cnstr_set_scalar(x_131, sizeof(void*)*1, x_129);
x_132 = x_131;
x_133 = l_Lean_Parser_ParsecT_orelseMkRes___rarg(x_95, x_132);
if (lean::is_scalar(x_126)) {
 x_134 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_134 = x_126;
}
lean::cnstr_set(x_134, 0, x_133);
lean::cnstr_set(x_134, 1, x_124);
return x_134;
}
}
else
{
obj* x_140; obj* x_142; obj* x_143; obj* x_145; obj* x_146; obj* x_147; obj* x_148; 
lean::dec(x_8);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_3);
lean::dec(x_2);
x_140 = lean::cnstr_get(x_13, 1);
if (lean::is_exclusive(x_13)) {
 lean::cnstr_release(x_13, 0);
 x_142 = x_13;
} else {
 lean::inc(x_140);
 lean::dec(x_13);
 x_142 = lean::box(0);
}
x_143 = lean::cnstr_get(x_14, 0);
if (lean::is_exclusive(x_14)) {
 x_145 = x_14;
} else {
 lean::inc(x_143);
 lean::dec(x_14);
 x_145 = lean::box(0);
}
if (lean::is_scalar(x_145)) {
 x_146 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_146 = x_145;
}
lean::cnstr_set(x_146, 0, x_143);
lean::cnstr_set_scalar(x_146, sizeof(void*)*1, x_91);
x_147 = x_146;
if (lean::is_scalar(x_142)) {
 x_148 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_148 = x_142;
}
lean::cnstr_set(x_148, 0, x_147);
lean::cnstr_set(x_148, 1, x_140);
return x_148;
}
}
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__2___rarg___boxed(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__2___rarg(x_0, x_1);
lean::dec(x_1);
return x_2;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__2___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__2(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__3___rarg___boxed(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__3___rarg(x_0, x_1);
lean::dec(x_1);
return x_2;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__3___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__3(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__4___rarg___boxed(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__4___rarg(x_0, x_1);
lean::dec(x_1);
return x_2;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__4___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__4(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__5___rarg___boxed(obj* x_0, obj* x_1) {
_start:
{
obj* x_2; 
x_2 = l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__5___rarg(x_0, x_1);
lean::dec(x_1);
return x_2;
}
}
obj* l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__5___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_RBNode_find___main___at___private_init_lean_parser_term_2__leading___spec__5(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5) {
_start:
{
obj* x_6; 
x_6 = l_Lean_Parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___rarg(x_0, x_1, x_2, x_3, x_4, x_5);
lean::dec(x_1);
lean::dec(x_3);
return x_6;
}
}
obj* l_Lean_Parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_indexed___at___private_init_lean_parser_term_2__leading___spec__1(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__2___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_8; uint8 x_9; obj* x_10; obj* x_11; obj* x_12; 
x_8 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_8, 0, x_6);
lean::cnstr_set(x_8, 1, x_0);
lean::cnstr_set(x_8, 2, x_1);
lean::cnstr_set(x_8, 3, x_3);
x_9 = 0;
x_10 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_10, 0, x_8);
lean::cnstr_set_scalar(x_10, sizeof(void*)*1, x_9);
x_11 = x_10;
x_12 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_12, 0, x_11);
lean::cnstr_set(x_12, 1, x_7);
return x_12;
}
else
{
obj* x_14; obj* x_17; uint8 x_18; obj* x_19; obj* x_20; obj* x_21; 
lean::dec(x_6);
x_14 = lean::cnstr_get(x_2, 0);
lean::inc(x_14);
lean::dec(x_2);
x_17 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_17, 0, x_14);
lean::cnstr_set(x_17, 1, x_0);
lean::cnstr_set(x_17, 2, x_1);
lean::cnstr_set(x_17, 3, x_3);
x_18 = 0;
x_19 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_19, 0, x_17);
lean::cnstr_set_scalar(x_19, sizeof(void*)*1, x_18);
x_20 = x_19;
x_21 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_21, 0, x_20);
lean::cnstr_set(x_21, 1, x_7);
return x_21;
}
}
}
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__2(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__2___rarg___boxed), 8, 0);
return x_1;
}
}
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4___rarg(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
if (lean::obj_tag(x_2) == 0)
{
obj* x_9; uint8 x_10; obj* x_11; obj* x_12; obj* x_13; 
x_9 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_9, 0, x_7);
lean::cnstr_set(x_9, 1, x_0);
lean::cnstr_set(x_9, 2, x_1);
lean::cnstr_set(x_9, 3, x_3);
x_10 = 0;
x_11 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_11, 0, x_9);
lean::cnstr_set_scalar(x_11, sizeof(void*)*1, x_10);
x_12 = x_11;
x_13 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_13, 0, x_12);
lean::cnstr_set(x_13, 1, x_8);
return x_13;
}
else
{
obj* x_15; obj* x_18; uint8 x_19; obj* x_20; obj* x_21; obj* x_22; 
lean::dec(x_7);
x_15 = lean::cnstr_get(x_2, 0);
lean::inc(x_15);
lean::dec(x_2);
x_18 = lean::alloc_cnstr(0, 4, 0);
lean::cnstr_set(x_18, 0, x_15);
lean::cnstr_set(x_18, 1, x_0);
lean::cnstr_set(x_18, 2, x_1);
lean::cnstr_set(x_18, 3, x_3);
x_19 = 0;
x_20 = lean::alloc_cnstr(1, 1, 1);
lean::cnstr_set(x_20, 0, x_18);
lean::cnstr_set_scalar(x_20, sizeof(void*)*1, x_19);
x_21 = x_20;
x_22 = lean::alloc_cnstr(0, 2, 0);
lean::cnstr_set(x_22, 0, x_21);
lean::cnstr_set(x_22, 1, x_8);
return x_22;
}
}
}
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4___rarg___boxed), 9, 0);
return x_1;
}
}
obj* l_Lean_Parser_currLbp___at_Lean_Parser_termParser_run___spec__5(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_7; obj* x_8; 
x_5 = l_Lean_Parser_peekToken___closed__1;
lean::inc(x_1);
x_7 = l_Lean_Parser_MonadParsec_observing___at_Lean_Parser_peekToken___spec__2(x_5, x_1, x_3, x_4);
x_8 = lean::cnstr_get(x_7, 0);
lean::inc(x_8);
if (lean::obj_tag(x_8) == 0)
{
obj* x_10; 
x_10 = lean::cnstr_get(x_8, 0);
lean::inc(x_10);
if (lean::obj_tag(x_10) == 0)
{
obj* x_14; obj* x_16; obj* x_17; obj* x_19; obj* x_21; obj* x_22; obj* x_23; obj* x_24; obj* x_25; obj* x_26; 
lean::dec(x_1);
lean::dec(x_10);
x_14 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_release(x_7, 0);
 x_16 = x_7;
} else {
 lean::inc(x_14);
 lean::dec(x_7);
 x_16 = lean::box(0);
}
x_17 = lean::cnstr_get(x_8, 1);
x_19 = lean::cnstr_get(x_8, 2);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_release(x_8, 0);
 x_21 = x_8;
} else {
 lean::inc(x_17);
 lean::inc(x_19);
 lean::dec(x_8);
 x_21 = lean::box(0);
}
x_22 = lean::mk_nat_obj(0ul);
x_23 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_21)) {
 x_24 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_24 = x_21;
}
lean::cnstr_set(x_24, 0, x_22);
lean::cnstr_set(x_24, 1, x_17);
lean::cnstr_set(x_24, 2, x_23);
x_25 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_19, x_24);
if (lean::is_scalar(x_16)) {
 x_26 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_26 = x_16;
}
lean::cnstr_set(x_26, 0, x_25);
lean::cnstr_set(x_26, 1, x_14);
return x_26;
}
else
{
obj* x_27; 
x_27 = lean::cnstr_get(x_10, 0);
lean::inc(x_27);
lean::dec(x_10);
switch (lean::obj_tag(x_27)) {
case 0:
{
obj* x_30; obj* x_33; obj* x_36; obj* x_38; obj* x_40; obj* x_41; obj* x_44; obj* x_46; obj* x_47; obj* x_48; 
x_30 = lean::cnstr_get(x_27, 0);
lean::inc(x_30);
lean::dec(x_27);
x_33 = lean::cnstr_get(x_7, 1);
lean::inc(x_33);
lean::dec(x_7);
x_36 = lean::cnstr_get(x_8, 1);
x_38 = lean::cnstr_get(x_8, 2);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_set(x_8, 1, lean::box(0));
 lean::cnstr_set(x_8, 2, lean::box(0));
 x_40 = x_8;
} else {
 lean::inc(x_36);
 lean::inc(x_38);
 lean::dec(x_8);
 x_40 = lean::box(0);
}
x_41 = lean::cnstr_get(x_30, 1);
lean::inc(x_41);
lean::dec(x_30);
x_44 = lean::cnstr_get(x_1, 1);
lean::inc(x_44);
x_46 = lean::mk_nat_obj(0ul);
x_47 = lean::alloc_cnstr(0, 3, 0);
lean::cnstr_set(x_47, 0, x_41);
lean::cnstr_set(x_47, 1, x_46);
lean::cnstr_set(x_47, 2, x_46);
x_48 = l_Lean_Parser_Trie_oldMatchPrefix___rarg(x_44, x_47);
if (lean::obj_tag(x_48) == 0)
{
obj* x_50; obj* x_51; obj* x_52; obj* x_53; obj* x_55; obj* x_57; obj* x_59; obj* x_60; obj* x_61; obj* x_62; obj* x_63; obj* x_64; 
lean::dec(x_40);
x_50 = lean::box(0);
x_51 = l_Lean_Parser_currLbp___rarg___lambda__1___closed__1;
x_52 = l_mjoin___rarg___closed__1;
x_53 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4___rarg(x_51, x_52, x_50, x_50, x_0, x_1, x_2, x_36, x_33);
lean::dec(x_1);
x_55 = lean::cnstr_get(x_53, 0);
x_57 = lean::cnstr_get(x_53, 1);
if (lean::is_exclusive(x_53)) {
 x_59 = x_53;
} else {
 lean::inc(x_55);
 lean::inc(x_57);
 lean::dec(x_53);
 x_59 = lean::box(0);
}
x_60 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_61 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_60, x_55);
x_62 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_60, x_61);
x_63 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_38, x_62);
if (lean::is_scalar(x_59)) {
 x_64 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_64 = x_59;
}
lean::cnstr_set(x_64, 0, x_63);
lean::cnstr_set(x_64, 1, x_57);
return x_64;
}
else
{
obj* x_66; obj* x_69; obj* x_71; obj* x_72; obj* x_75; obj* x_76; obj* x_77; obj* x_78; 
lean::dec(x_1);
x_66 = lean::cnstr_get(x_48, 0);
lean::inc(x_66);
lean::dec(x_48);
x_69 = lean::cnstr_get(x_66, 1);
if (lean::is_exclusive(x_66)) {
 lean::cnstr_release(x_66, 0);
 x_71 = x_66;
} else {
 lean::inc(x_69);
 lean::dec(x_66);
 x_71 = lean::box(0);
}
x_72 = lean::cnstr_get(x_69, 1);
lean::inc(x_72);
lean::dec(x_69);
x_75 = l_Lean_Parser_matchToken___closed__1;
if (lean::is_scalar(x_40)) {
 x_76 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_76 = x_40;
}
lean::cnstr_set(x_76, 0, x_72);
lean::cnstr_set(x_76, 1, x_36);
lean::cnstr_set(x_76, 2, x_75);
x_77 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_38, x_76);
if (lean::is_scalar(x_71)) {
 x_78 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_78 = x_71;
}
lean::cnstr_set(x_78, 0, x_77);
lean::cnstr_set(x_78, 1, x_33);
return x_78;
}
}
case 1:
{
obj* x_81; obj* x_83; obj* x_84; obj* x_86; obj* x_88; obj* x_89; obj* x_90; obj* x_91; obj* x_92; obj* x_93; 
lean::dec(x_1);
lean::dec(x_27);
x_81 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_release(x_7, 0);
 x_83 = x_7;
} else {
 lean::inc(x_81);
 lean::dec(x_7);
 x_83 = lean::box(0);
}
x_84 = lean::cnstr_get(x_8, 1);
x_86 = lean::cnstr_get(x_8, 2);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_release(x_8, 0);
 x_88 = x_8;
} else {
 lean::inc(x_84);
 lean::inc(x_86);
 lean::dec(x_8);
 x_88 = lean::box(0);
}
x_89 = l_Lean_Parser_maxPrec;
x_90 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_88)) {
 x_91 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_91 = x_88;
}
lean::cnstr_set(x_91, 0, x_89);
lean::cnstr_set(x_91, 1, x_84);
lean::cnstr_set(x_91, 2, x_90);
x_92 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_86, x_91);
if (lean::is_scalar(x_83)) {
 x_93 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_93 = x_83;
}
lean::cnstr_set(x_93, 0, x_92);
lean::cnstr_set(x_93, 1, x_81);
return x_93;
}
case 2:
{
obj* x_94; obj* x_97; obj* x_99; obj* x_100; obj* x_102; obj* x_104; obj* x_105; obj* x_108; uint8 x_109; 
x_94 = lean::cnstr_get(x_27, 0);
lean::inc(x_94);
lean::dec(x_27);
x_97 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_release(x_7, 0);
 lean::cnstr_set(x_7, 1, lean::box(0));
 x_99 = x_7;
} else {
 lean::inc(x_97);
 lean::dec(x_7);
 x_99 = lean::box(0);
}
x_100 = lean::cnstr_get(x_8, 1);
x_102 = lean::cnstr_get(x_8, 2);
if (lean::is_exclusive(x_8)) {
 lean::cnstr_release(x_8, 0);
 lean::cnstr_set(x_8, 1, lean::box(0));
 lean::cnstr_set(x_8, 2, lean::box(0));
 x_104 = x_8;
} else {
 lean::inc(x_100);
 lean::inc(x_102);
 lean::dec(x_8);
 x_104 = lean::box(0);
}
x_105 = lean::cnstr_get(x_94, 0);
lean::inc(x_105);
lean::dec(x_94);
x_108 = l_Lean_Parser_number_HasView_x_27___lambda__1___closed__6;
x_109 = lean_name_dec_eq(x_105, x_108);
if (x_109 == 0)
{
obj* x_110; uint8 x_111; 
x_110 = l_Lean_Parser_currLbp___rarg___lambda__3___closed__1;
x_111 = lean_name_dec_eq(x_105, x_110);
lean::dec(x_105);
if (x_111 == 0)
{
obj* x_115; obj* x_116; obj* x_117; obj* x_118; obj* x_120; obj* x_122; obj* x_124; obj* x_125; obj* x_126; 
lean::dec(x_104);
lean::dec(x_99);
x_115 = lean::box(0);
x_116 = l_Lean_Parser_currLbp___rarg___lambda__3___closed__2;
x_117 = l_mjoin___rarg___closed__1;
x_118 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4___rarg(x_116, x_117, x_115, x_115, x_0, x_1, x_2, x_100, x_97);
lean::dec(x_1);
x_120 = lean::cnstr_get(x_118, 0);
x_122 = lean::cnstr_get(x_118, 1);
if (lean::is_exclusive(x_118)) {
 x_124 = x_118;
} else {
 lean::inc(x_120);
 lean::inc(x_122);
 lean::dec(x_118);
 x_124 = lean::box(0);
}
x_125 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_102, x_120);
if (lean::is_scalar(x_124)) {
 x_126 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_126 = x_124;
}
lean::cnstr_set(x_126, 0, x_125);
lean::cnstr_set(x_126, 1, x_122);
return x_126;
}
else
{
obj* x_128; obj* x_129; obj* x_130; obj* x_131; obj* x_132; 
lean::dec(x_1);
x_128 = l_Lean_Parser_maxPrec;
x_129 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_104)) {
 x_130 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_130 = x_104;
}
lean::cnstr_set(x_130, 0, x_128);
lean::cnstr_set(x_130, 1, x_100);
lean::cnstr_set(x_130, 2, x_129);
x_131 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_102, x_130);
if (lean::is_scalar(x_99)) {
 x_132 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_132 = x_99;
}
lean::cnstr_set(x_132, 0, x_131);
lean::cnstr_set(x_132, 1, x_97);
return x_132;
}
}
else
{
obj* x_135; obj* x_136; obj* x_137; obj* x_138; obj* x_139; 
lean::dec(x_1);
lean::dec(x_105);
x_135 = l_Lean_Parser_maxPrec;
x_136 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_104)) {
 x_137 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_137 = x_104;
}
lean::cnstr_set(x_137, 0, x_135);
lean::cnstr_set(x_137, 1, x_100);
lean::cnstr_set(x_137, 2, x_136);
x_138 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_102, x_137);
if (lean::is_scalar(x_99)) {
 x_139 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_139 = x_99;
}
lean::cnstr_set(x_139, 0, x_138);
lean::cnstr_set(x_139, 1, x_97);
return x_139;
}
}
default:
{
obj* x_140; obj* x_143; obj* x_145; obj* x_148; obj* x_149; obj* x_150; obj* x_151; obj* x_153; obj* x_155; obj* x_157; obj* x_158; obj* x_159; 
x_140 = lean::cnstr_get(x_7, 1);
lean::inc(x_140);
lean::dec(x_7);
x_143 = lean::cnstr_get(x_8, 1);
lean::inc(x_143);
x_145 = lean::cnstr_get(x_8, 2);
lean::inc(x_145);
lean::dec(x_8);
x_148 = lean::box(0);
x_149 = l_Lean_Parser_currLbp___rarg___lambda__3___closed__2;
x_150 = l_mjoin___rarg___closed__1;
x_151 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4___rarg(x_149, x_150, x_148, x_148, x_0, x_1, x_2, x_143, x_140);
lean::dec(x_1);
x_153 = lean::cnstr_get(x_151, 0);
x_155 = lean::cnstr_get(x_151, 1);
if (lean::is_exclusive(x_151)) {
 x_157 = x_151;
} else {
 lean::inc(x_153);
 lean::inc(x_155);
 lean::dec(x_151);
 x_157 = lean::box(0);
}
x_158 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_145, x_153);
if (lean::is_scalar(x_157)) {
 x_159 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_159 = x_157;
}
lean::cnstr_set(x_159, 0, x_158);
lean::cnstr_set(x_159, 1, x_155);
return x_159;
}
}
}
}
else
{
obj* x_161; obj* x_163; obj* x_164; uint8 x_166; obj* x_167; obj* x_168; obj* x_169; obj* x_170; 
lean::dec(x_1);
x_161 = lean::cnstr_get(x_7, 1);
if (lean::is_exclusive(x_7)) {
 lean::cnstr_release(x_7, 0);
 x_163 = x_7;
} else {
 lean::inc(x_161);
 lean::dec(x_7);
 x_163 = lean::box(0);
}
x_164 = lean::cnstr_get(x_8, 0);
x_166 = lean::cnstr_get_scalar<uint8>(x_8, sizeof(void*)*1);
if (lean::is_exclusive(x_8)) {
 x_167 = x_8;
} else {
 lean::inc(x_164);
 lean::dec(x_8);
 x_167 = lean::box(0);
}
if (lean::is_scalar(x_167)) {
 x_168 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_168 = x_167;
}
lean::cnstr_set(x_168, 0, x_164);
lean::cnstr_set_scalar(x_168, sizeof(void*)*1, x_166);
x_169 = x_168;
if (lean::is_scalar(x_163)) {
 x_170 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_170 = x_163;
}
lean::cnstr_set(x_170, 0, x_169);
lean::cnstr_set(x_170, 1, x_161);
return x_170;
}
}
}
obj* l___private_init_lean_parser_pratt_1__trailingLoop___main___at_Lean_Parser_termParser_run___spec__3(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
obj* x_9; uint8 x_10; 
x_9 = lean::mk_nat_obj(0ul);
x_10 = lean::nat_dec_eq(x_2, x_9);
if (x_10 == 0)
{
obj* x_11; obj* x_12; obj* x_14; obj* x_15; 
x_11 = lean::mk_nat_obj(1ul);
x_12 = lean::nat_sub(x_2, x_11);
lean::inc(x_5);
x_14 = l_Lean_Parser_currLbp___at_Lean_Parser_termParser_run___spec__5(x_4, x_5, x_6, x_7, x_8);
x_15 = lean::cnstr_get(x_14, 0);
lean::inc(x_15);
if (lean::obj_tag(x_15) == 0)
{
obj* x_17; obj* x_19; obj* x_20; obj* x_22; obj* x_24; obj* x_26; uint8 x_27; 
x_17 = lean::cnstr_get(x_14, 1);
if (lean::is_exclusive(x_14)) {
 lean::cnstr_release(x_14, 0);
 lean::cnstr_set(x_14, 1, lean::box(0));
 x_19 = x_14;
} else {
 lean::inc(x_17);
 lean::dec(x_14);
 x_19 = lean::box(0);
}
x_20 = lean::cnstr_get(x_15, 0);
x_22 = lean::cnstr_get(x_15, 1);
x_24 = lean::cnstr_get(x_15, 2);
if (lean::is_exclusive(x_15)) {
 lean::cnstr_set(x_15, 0, lean::box(0));
 lean::cnstr_set(x_15, 1, lean::box(0));
 lean::cnstr_set(x_15, 2, lean::box(0));
 x_26 = x_15;
} else {
 lean::inc(x_20);
 lean::inc(x_22);
 lean::inc(x_24);
 lean::dec(x_15);
 x_26 = lean::box(0);
}
x_27 = lean::nat_dec_lt(x_1, x_20);
lean::dec(x_20);
if (x_27 == 0)
{
obj* x_34; obj* x_35; obj* x_36; obj* x_37; 
lean::dec(x_5);
lean::dec(x_12);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_0);
x_34 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
if (lean::is_scalar(x_26)) {
 x_35 = lean::alloc_cnstr(0, 3, 0);
} else {
 x_35 = x_26;
}
lean::cnstr_set(x_35, 0, x_3);
lean::cnstr_set(x_35, 1, x_22);
lean::cnstr_set(x_35, 2, x_34);
x_36 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_24, x_35);
if (lean::is_scalar(x_19)) {
 x_37 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_37 = x_19;
}
lean::cnstr_set(x_37, 0, x_36);
lean::cnstr_set(x_37, 1, x_17);
return x_37;
}
else
{
obj* x_44; obj* x_45; 
lean::dec(x_26);
lean::dec(x_19);
lean::inc(x_6);
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_0);
x_44 = lean::apply_6(x_0, x_3, x_4, x_5, x_6, x_22, x_17);
x_45 = lean::cnstr_get(x_44, 0);
lean::inc(x_45);
if (lean::obj_tag(x_45) == 0)
{
obj* x_47; obj* x_50; obj* x_52; obj* x_54; obj* x_57; obj* x_59; obj* x_61; obj* x_63; obj* x_64; obj* x_65; obj* x_66; 
x_47 = lean::cnstr_get(x_44, 1);
lean::inc(x_47);
lean::dec(x_44);
x_50 = lean::cnstr_get(x_45, 0);
lean::inc(x_50);
x_52 = lean::cnstr_get(x_45, 1);
lean::inc(x_52);
x_54 = lean::cnstr_get(x_45, 2);
lean::inc(x_54);
lean::dec(x_45);
x_57 = l___private_init_lean_parser_pratt_1__trailingLoop___main___at_Lean_Parser_termParser_run___spec__3(x_0, x_1, x_12, x_50, x_4, x_5, x_6, x_52, x_47);
lean::dec(x_12);
x_59 = lean::cnstr_get(x_57, 0);
x_61 = lean::cnstr_get(x_57, 1);
if (lean::is_exclusive(x_57)) {
 x_63 = x_57;
} else {
 lean::inc(x_59);
 lean::inc(x_61);
 lean::dec(x_57);
 x_63 = lean::box(0);
}
x_64 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_54, x_59);
x_65 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_24, x_64);
if (lean::is_scalar(x_63)) {
 x_66 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_66 = x_63;
}
lean::cnstr_set(x_66, 0, x_65);
lean::cnstr_set(x_66, 1, x_61);
return x_66;
}
else
{
obj* x_72; obj* x_74; obj* x_75; uint8 x_77; obj* x_78; obj* x_79; obj* x_80; obj* x_81; obj* x_82; 
lean::dec(x_5);
lean::dec(x_12);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_0);
x_72 = lean::cnstr_get(x_44, 1);
if (lean::is_exclusive(x_44)) {
 lean::cnstr_release(x_44, 0);
 x_74 = x_44;
} else {
 lean::inc(x_72);
 lean::dec(x_44);
 x_74 = lean::box(0);
}
x_75 = lean::cnstr_get(x_45, 0);
x_77 = lean::cnstr_get_scalar<uint8>(x_45, sizeof(void*)*1);
if (lean::is_exclusive(x_45)) {
 x_78 = x_45;
} else {
 lean::inc(x_75);
 lean::dec(x_45);
 x_78 = lean::box(0);
}
if (lean::is_scalar(x_78)) {
 x_79 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_79 = x_78;
}
lean::cnstr_set(x_79, 0, x_75);
lean::cnstr_set_scalar(x_79, sizeof(void*)*1, x_77);
x_80 = x_79;
x_81 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_24, x_80);
if (lean::is_scalar(x_74)) {
 x_82 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_82 = x_74;
}
lean::cnstr_set(x_82, 0, x_81);
lean::cnstr_set(x_82, 1, x_72);
return x_82;
}
}
}
else
{
obj* x_89; obj* x_91; obj* x_92; uint8 x_94; obj* x_95; obj* x_96; obj* x_97; obj* x_98; 
lean::dec(x_5);
lean::dec(x_12);
lean::dec(x_4);
lean::dec(x_6);
lean::dec(x_3);
lean::dec(x_0);
x_89 = lean::cnstr_get(x_14, 1);
if (lean::is_exclusive(x_14)) {
 lean::cnstr_release(x_14, 0);
 x_91 = x_14;
} else {
 lean::inc(x_89);
 lean::dec(x_14);
 x_91 = lean::box(0);
}
x_92 = lean::cnstr_get(x_15, 0);
x_94 = lean::cnstr_get_scalar<uint8>(x_15, sizeof(void*)*1);
if (lean::is_exclusive(x_15)) {
 x_95 = x_15;
} else {
 lean::inc(x_92);
 lean::dec(x_15);
 x_95 = lean::box(0);
}
if (lean::is_scalar(x_95)) {
 x_96 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_96 = x_95;
}
lean::cnstr_set(x_96, 0, x_92);
lean::cnstr_set_scalar(x_96, sizeof(void*)*1, x_94);
x_97 = x_96;
if (lean::is_scalar(x_91)) {
 x_98 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_98 = x_91;
}
lean::cnstr_set(x_98, 0, x_97);
lean::cnstr_set(x_98, 1, x_89);
return x_98;
}
}
else
{
obj* x_101; obj* x_102; obj* x_103; obj* x_104; 
lean::dec(x_3);
lean::dec(x_0);
x_101 = lean::box(0);
x_102 = l___private_init_lean_parser_combinators_1__many1Aux___main___rarg___closed__1;
x_103 = l_mjoin___rarg___closed__1;
x_104 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4___rarg(x_102, x_103, x_101, x_101, x_4, x_5, x_6, x_7, x_8);
lean::dec(x_6);
lean::dec(x_5);
lean::dec(x_4);
return x_104;
}
}
}
obj* l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___lambda__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; obj* x_6; obj* x_7; obj* x_8; 
x_5 = lean::box(0);
x_6 = l_Lean_Parser_RecT_runParsec___rarg___lambda__1___closed__1;
x_7 = l_mjoin___rarg___closed__1;
x_8 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__2___rarg(x_6, x_7, x_5, x_5, x_1, x_2, x_3, x_4);
return x_8;
}
}
obj* l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___lambda__2(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_11; obj* x_12; 
lean::inc(x_5);
lean::inc(x_4);
lean::inc(x_2);
x_11 = lean::apply_5(x_0, x_2, x_4, x_5, x_6, x_7);
x_12 = lean::cnstr_get(x_11, 0);
lean::inc(x_12);
if (lean::obj_tag(x_12) == 0)
{
obj* x_14; obj* x_17; obj* x_19; obj* x_21; obj* x_24; obj* x_25; obj* x_26; obj* x_28; obj* x_30; obj* x_32; obj* x_34; obj* x_35; obj* x_36; obj* x_37; obj* x_38; 
x_14 = lean::cnstr_get(x_11, 1);
lean::inc(x_14);
lean::dec(x_11);
x_17 = lean::cnstr_get(x_12, 0);
lean::inc(x_17);
x_19 = lean::cnstr_get(x_12, 1);
lean::inc(x_19);
x_21 = lean::cnstr_get(x_12, 2);
lean::inc(x_21);
lean::dec(x_12);
x_24 = l_String_OldIterator_remaining___main(x_19);
x_25 = lean::mk_nat_obj(1ul);
x_26 = lean::nat_add(x_24, x_25);
lean::dec(x_24);
x_28 = l___private_init_lean_parser_pratt_1__trailingLoop___main___at_Lean_Parser_termParser_run___spec__3(x_1, x_3, x_26, x_17, x_2, x_4, x_5, x_19, x_14);
lean::dec(x_26);
x_30 = lean::cnstr_get(x_28, 0);
x_32 = lean::cnstr_get(x_28, 1);
if (lean::is_exclusive(x_28)) {
 x_34 = x_28;
} else {
 lean::inc(x_30);
 lean::inc(x_32);
 lean::dec(x_28);
 x_34 = lean::box(0);
}
x_35 = l_Lean_Parser_finishCommentBlock___closed__2;
x_36 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_35, x_30);
x_37 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_21, x_36);
if (lean::is_scalar(x_34)) {
 x_38 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_38 = x_34;
}
lean::cnstr_set(x_38, 0, x_37);
lean::cnstr_set(x_38, 1, x_32);
return x_38;
}
else
{
obj* x_43; obj* x_45; obj* x_46; uint8 x_48; obj* x_49; obj* x_50; obj* x_51; obj* x_52; 
lean::dec(x_5);
lean::dec(x_4);
lean::dec(x_1);
lean::dec(x_2);
x_43 = lean::cnstr_get(x_11, 1);
if (lean::is_exclusive(x_11)) {
 lean::cnstr_release(x_11, 0);
 x_45 = x_11;
} else {
 lean::inc(x_43);
 lean::dec(x_11);
 x_45 = lean::box(0);
}
x_46 = lean::cnstr_get(x_12, 0);
x_48 = lean::cnstr_get_scalar<uint8>(x_12, sizeof(void*)*1);
if (lean::is_exclusive(x_12)) {
 x_49 = x_12;
} else {
 lean::inc(x_46);
 lean::dec(x_12);
 x_49 = lean::box(0);
}
if (lean::is_scalar(x_49)) {
 x_50 = lean::alloc_cnstr(1, 1, 1);
} else {
 x_50 = x_49;
}
lean::cnstr_set(x_50, 0, x_46);
lean::cnstr_set_scalar(x_50, sizeof(void*)*1, x_48);
x_51 = x_50;
if (lean::is_scalar(x_45)) {
 x_52 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_52 = x_45;
}
lean::cnstr_set(x_52, 0, x_51);
lean::cnstr_set(x_52, 1, x_43);
return x_52;
}
}
}
obj* _init_l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___closed__1() {
_start:
{
obj* x_0; 
x_0 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___lambda__1___boxed), 5, 0);
return x_0;
}
}
obj* l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6) {
_start:
{
obj* x_7; obj* x_8; obj* x_9; obj* x_10; 
x_7 = lean::alloc_closure(reinterpret_cast<void*>(l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___lambda__2___boxed), 8, 2);
lean::closure_set(x_7, 0, x_0);
lean::closure_set(x_7, 1, x_1);
x_8 = l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___closed__1;
x_9 = lean::alloc_closure(reinterpret_cast<void*>(l_fixCore___rarg___boxed), 3, 2);
lean::closure_set(x_9, 0, x_8);
lean::closure_set(x_9, 1, x_7);
x_10 = lean::apply_5(x_2, x_9, x_3, x_4, x_5, x_6);
return x_10;
}
}
obj* l_Lean_Parser_termParser_run(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_6; obj* x_8; obj* x_9; obj* x_12; obj* x_13; obj* x_15; obj* x_17; obj* x_18; obj* x_19; obj* x_20; 
lean::inc(x_1);
x_6 = lean::alloc_closure(reinterpret_cast<void*>(l___private_init_lean_parser_term_2__leading), 6, 1);
lean::closure_set(x_6, 0, x_1);
lean::inc(x_1);
x_8 = lean::alloc_closure(reinterpret_cast<void*>(l___private_init_lean_parser_term_1__trailing), 7, 1);
lean::closure_set(x_8, 0, x_1);
x_9 = lean::cnstr_get(x_1, 0);
lean::inc(x_9);
lean::dec(x_1);
x_12 = l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1(x_6, x_8, x_0, x_9, x_2, x_3, x_4);
x_13 = lean::cnstr_get(x_12, 0);
x_15 = lean::cnstr_get(x_12, 1);
if (lean::is_exclusive(x_12)) {
 x_17 = x_12;
} else {
 lean::inc(x_13);
 lean::inc(x_15);
 lean::dec(x_12);
 x_17 = lean::box(0);
}
x_18 = l_Lean_Parser_Parsec_Result_mkEps___rarg___closed__1;
x_19 = l_Lean_Parser_ParsecT_bindMkRes___rarg(x_18, x_13);
if (lean::is_scalar(x_17)) {
 x_20 = lean::alloc_cnstr(0, 2, 0);
} else {
 x_20 = x_17;
}
lean::cnstr_set(x_20, 0, x_19);
lean::cnstr_set(x_20, 1, x_15);
return x_20;
}
}
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__2___rarg___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; 
x_8 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__2___rarg(x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7);
lean::dec(x_4);
lean::dec(x_5);
return x_8;
}
}
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__2___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__2(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4___rarg___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
obj* x_9; 
x_9 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4___rarg(x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8);
lean::dec(x_4);
lean::dec(x_5);
lean::dec(x_6);
return x_9;
}
}
obj* l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4___boxed(obj* x_0) {
_start:
{
obj* x_1; 
x_1 = l_Lean_Parser_MonadParsec_error___at_Lean_Parser_termParser_run___spec__4(x_0);
lean::dec(x_0);
return x_1;
}
}
obj* l_Lean_Parser_currLbp___at_Lean_Parser_termParser_run___spec__5___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Parser_currLbp___at_Lean_Parser_termParser_run___spec__5(x_0, x_1, x_2, x_3, x_4);
lean::dec(x_0);
lean::dec(x_2);
return x_5;
}
}
obj* l___private_init_lean_parser_pratt_1__trailingLoop___main___at_Lean_Parser_termParser_run___spec__3___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7, obj* x_8) {
_start:
{
obj* x_9; 
x_9 = l___private_init_lean_parser_pratt_1__trailingLoop___main___at_Lean_Parser_termParser_run___spec__3(x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8);
lean::dec(x_1);
lean::dec(x_2);
return x_9;
}
}
obj* l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___lambda__1___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4) {
_start:
{
obj* x_5; 
x_5 = l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___lambda__1(x_0, x_1, x_2, x_3, x_4);
lean::dec(x_0);
lean::dec(x_1);
lean::dec(x_2);
return x_5;
}
}
obj* l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___lambda__2___boxed(obj* x_0, obj* x_1, obj* x_2, obj* x_3, obj* x_4, obj* x_5, obj* x_6, obj* x_7) {
_start:
{
obj* x_8; 
x_8 = l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___lambda__2(x_0, x_1, x_2, x_3, x_4, x_5, x_6, x_7);
lean::dec(x_3);
return x_8;
}
}
obj* initialize_init_lean_parser_level(obj*);
obj* initialize_init_lean_parser_notation(obj*);
obj* initialize_init_lean_expr(obj*);
static bool _G_initialized = false;
obj* initialize_init_lean_parser_term(obj* w) {
 if (_G_initialized) return w;
 _G_initialized = true;
if (io_result_is_error(w)) return w;
w = initialize_init_lean_parser_level(w);
if (io_result_is_error(w)) return w;
w = initialize_init_lean_parser_notation(w);
if (io_result_is_error(w)) return w;
w = initialize_init_lean_expr(w);
if (io_result_is_error(w)) return w;
 l_Lean_Parser_identUnivSpec = _init_l_Lean_Parser_identUnivSpec();
lean::mark_persistent(l_Lean_Parser_identUnivSpec);
 l_Lean_Parser_identUnivSpec_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_identUnivSpec_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_identUnivSpec_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_identUnivSpec_HasView_x_27 = _init_l_Lean_Parser_identUnivSpec_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_identUnivSpec_HasView_x_27);
 l_Lean_Parser_identUnivSpec_HasView = _init_l_Lean_Parser_identUnivSpec_HasView();
lean::mark_persistent(l_Lean_Parser_identUnivSpec_HasView);
 l_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_identUnivSpec_Parser_Lean_Parser_HasView);
 l_Lean_Parser_identUnivSpec_Parser___closed__1 = _init_l_Lean_Parser_identUnivSpec_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_identUnivSpec_Parser___closed__1);
 l_Lean_Parser_identUnivs = _init_l_Lean_Parser_identUnivs();
lean::mark_persistent(l_Lean_Parser_identUnivs);
 l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__4 = _init_l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__4();
lean::mark_persistent(l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__4);
 l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__5 = _init_l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__5();
lean::mark_persistent(l_Lean_Parser_identUnivs_HasView_x_27___lambda__1___closed__5);
 l_Lean_Parser_identUnivs_HasView_x_27 = _init_l_Lean_Parser_identUnivs_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_identUnivs_HasView_x_27);
 l_Lean_Parser_identUnivs_HasView = _init_l_Lean_Parser_identUnivs_HasView();
lean::mark_persistent(l_Lean_Parser_identUnivs_HasView);
 l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_identUnivs_Parser_Lean_Parser_HasView);
 l_Lean_Parser_identUnivs_Parser___closed__1 = _init_l_Lean_Parser_identUnivs_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_identUnivs_Parser___closed__1);
 l_Lean_Parser_Term_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_Lean_Parser_HasView = _init_l_Lean_Parser_Term_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_Lean_Parser_HasView);
 l_Lean_Parser_Term_tuple = _init_l_Lean_Parser_Term_tuple();
lean::mark_persistent(l_Lean_Parser_Term_tuple);
 l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__4 = _init_l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__4();
lean::mark_persistent(l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__4);
 l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__5 = _init_l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__5();
lean::mark_persistent(l_Lean_Parser_Term_tuple_HasView_x_27___lambda__1___closed__5);
 l_Lean_Parser_Term_tuple_HasView_x_27 = _init_l_Lean_Parser_Term_tuple_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_tuple_HasView_x_27);
 l_Lean_Parser_Term_tuple_HasView = _init_l_Lean_Parser_Term_tuple_HasView();
lean::mark_persistent(l_Lean_Parser_Term_tuple_HasView);
 l_Lean_Parser_Term_typed = _init_l_Lean_Parser_Term_typed();
lean::mark_persistent(l_Lean_Parser_Term_typed);
 l_Lean_Parser_Term_typed_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_typed_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_typed_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_typed_HasView_x_27 = _init_l_Lean_Parser_Term_typed_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_typed_HasView_x_27);
 l_Lean_Parser_Term_typed_HasView = _init_l_Lean_Parser_Term_typed_HasView();
lean::mark_persistent(l_Lean_Parser_Term_typed_HasView);
 l_Lean_Parser_Term_parenSpecial = _init_l_Lean_Parser_Term_parenSpecial();
lean::mark_persistent(l_Lean_Parser_Term_parenSpecial);
 l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_parenSpecial_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_parenSpecial_HasView_x_27 = _init_l_Lean_Parser_Term_parenSpecial_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_parenSpecial_HasView_x_27);
 l_Lean_Parser_Term_parenSpecial_HasView = _init_l_Lean_Parser_Term_parenSpecial_HasView();
lean::mark_persistent(l_Lean_Parser_Term_parenSpecial_HasView);
 l_Lean_Parser_Term_parenContent = _init_l_Lean_Parser_Term_parenContent();
lean::mark_persistent(l_Lean_Parser_Term_parenContent);
 l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_parenContent_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_parenContent_HasView_x_27 = _init_l_Lean_Parser_Term_parenContent_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_parenContent_HasView_x_27);
 l_Lean_Parser_Term_parenContent_HasView = _init_l_Lean_Parser_Term_parenContent_HasView();
lean::mark_persistent(l_Lean_Parser_Term_parenContent_HasView);
 l_Lean_Parser_Term_paren = _init_l_Lean_Parser_Term_paren();
lean::mark_persistent(l_Lean_Parser_Term_paren);
 l_Lean_Parser_Term_paren_HasView_x_27___elambda__1___closed__1 = _init_l_Lean_Parser_Term_paren_HasView_x_27___elambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_paren_HasView_x_27___elambda__1___closed__1);
 l_Lean_Parser_Term_paren_HasView_x_27___elambda__1___closed__2 = _init_l_Lean_Parser_Term_paren_HasView_x_27___elambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_paren_HasView_x_27___elambda__1___closed__2);
 l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_paren_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_paren_HasView_x_27 = _init_l_Lean_Parser_Term_paren_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_paren_HasView_x_27);
 l_Lean_Parser_Term_paren_HasView = _init_l_Lean_Parser_Term_paren_HasView();
lean::mark_persistent(l_Lean_Parser_Term_paren_HasView);
 l_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_paren_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_paren_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_paren_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_paren_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_paren_Parser___closed__1 = _init_l_Lean_Parser_Term_paren_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_paren_Parser___closed__1);
 l_Lean_Parser_Term_hole = _init_l_Lean_Parser_Term_hole();
lean::mark_persistent(l_Lean_Parser_Term_hole);
 l_Lean_Parser_Term_hole_HasView_x_27___elambda__1___closed__1 = _init_l_Lean_Parser_Term_hole_HasView_x_27___elambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_hole_HasView_x_27___elambda__1___closed__1);
 l_Lean_Parser_Term_hole_HasView_x_27 = _init_l_Lean_Parser_Term_hole_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_hole_HasView_x_27);
 l_Lean_Parser_Term_hole_HasView = _init_l_Lean_Parser_Term_hole_HasView();
lean::mark_persistent(l_Lean_Parser_Term_hole_HasView);
 l_Lean_Parser_Term_hole_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_hole_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_hole_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_hole_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_hole_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_hole_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_hole_Parser___closed__1 = _init_l_Lean_Parser_Term_hole_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_hole_Parser___closed__1);
 l_Lean_Parser_Term_sort = _init_l_Lean_Parser_Term_sort();
lean::mark_persistent(l_Lean_Parser_Term_sort);
 l_Lean_Parser_Term_sort_HasView_x_27___elambda__1___closed__1 = _init_l_Lean_Parser_Term_sort_HasView_x_27___elambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_sort_HasView_x_27___elambda__1___closed__1);
 l_Lean_Parser_Term_sort_HasView_x_27___elambda__1___closed__2 = _init_l_Lean_Parser_Term_sort_HasView_x_27___elambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_sort_HasView_x_27___elambda__1___closed__2);
 l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__4 = _init_l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__4();
lean::mark_persistent(l_Lean_Parser_Term_sort_HasView_x_27___lambda__1___closed__4);
 l_Lean_Parser_Term_sort_HasView_x_27 = _init_l_Lean_Parser_Term_sort_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_sort_HasView_x_27);
 l_Lean_Parser_Term_sort_HasView = _init_l_Lean_Parser_Term_sort_HasView();
lean::mark_persistent(l_Lean_Parser_Term_sort_HasView);
 l_Lean_Parser_Term_sort_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_sort_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_sort_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_sort_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_sort_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_sort_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_sort_Parser___closed__1 = _init_l_Lean_Parser_Term_sort_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_sort_Parser___closed__1);
 l_Lean_Parser_Term_typeSpec = _init_l_Lean_Parser_Term_typeSpec();
lean::mark_persistent(l_Lean_Parser_Term_typeSpec);
 l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_typeSpec_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_typeSpec_HasView_x_27 = _init_l_Lean_Parser_Term_typeSpec_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_typeSpec_HasView_x_27);
 l_Lean_Parser_Term_typeSpec_HasView = _init_l_Lean_Parser_Term_typeSpec_HasView();
lean::mark_persistent(l_Lean_Parser_Term_typeSpec_HasView);
 l_Lean_Parser_Term_typeSpec_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_typeSpec_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_typeSpec_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_typeSpec_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_typeSpec_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_typeSpec_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_typeSpec_Parser___closed__1 = _init_l_Lean_Parser_Term_typeSpec_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_typeSpec_Parser___closed__1);
 l_Lean_Parser_Term_optType_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_optType_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_optType_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_optType_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_optType_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_optType_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_optType_Parser___closed__1 = _init_l_Lean_Parser_Term_optType_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_optType_Parser___closed__1);
 l_Lean_Parser_Term_optType_viewDefault = _init_l_Lean_Parser_Term_optType_viewDefault();
lean::mark_persistent(l_Lean_Parser_Term_optType_viewDefault);
 l_Lean_Parser_Term_binderIdent = _init_l_Lean_Parser_Term_binderIdent();
lean::mark_persistent(l_Lean_Parser_Term_binderIdent);
 l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__4 = _init_l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__4();
lean::mark_persistent(l_Lean_Parser_Term_binderIdent_HasView_x_27___lambda__1___closed__4);
 l_Lean_Parser_Term_binderIdent_HasView_x_27 = _init_l_Lean_Parser_Term_binderIdent_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_binderIdent_HasView_x_27);
 l_Lean_Parser_Term_binderIdent_HasView = _init_l_Lean_Parser_Term_binderIdent_HasView();
lean::mark_persistent(l_Lean_Parser_Term_binderIdent_HasView);
 l_Lean_Parser_Term_binderIdent_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_binderIdent_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_binderIdent_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_binderIdent_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_binderIdent_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_binderIdent_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_binderIdent_Parser___closed__1 = _init_l_Lean_Parser_Term_binderIdent_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binderIdent_Parser___closed__1);
 l_Lean_Parser_Term_binderDefaultVal = _init_l_Lean_Parser_Term_binderDefaultVal();
lean::mark_persistent(l_Lean_Parser_Term_binderDefaultVal);
 l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binderDefaultVal_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_binderDefaultVal_HasView_x_27 = _init_l_Lean_Parser_Term_binderDefaultVal_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_binderDefaultVal_HasView_x_27);
 l_Lean_Parser_Term_binderDefaultVal_HasView = _init_l_Lean_Parser_Term_binderDefaultVal_HasView();
lean::mark_persistent(l_Lean_Parser_Term_binderDefaultVal_HasView);
 l_Lean_Parser_Term_binderDefaultTac = _init_l_Lean_Parser_Term_binderDefaultTac();
lean::mark_persistent(l_Lean_Parser_Term_binderDefaultTac);
 l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binderDefaultTac_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_binderDefaultTac_HasView_x_27 = _init_l_Lean_Parser_Term_binderDefaultTac_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_binderDefaultTac_HasView_x_27);
 l_Lean_Parser_Term_binderDefaultTac_HasView = _init_l_Lean_Parser_Term_binderDefaultTac_HasView();
lean::mark_persistent(l_Lean_Parser_Term_binderDefaultTac_HasView);
 l_Lean_Parser_Term_binderDefault = _init_l_Lean_Parser_Term_binderDefault();
lean::mark_persistent(l_Lean_Parser_Term_binderDefault);
 l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_binderDefault_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_binderDefault_HasView_x_27 = _init_l_Lean_Parser_Term_binderDefault_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_binderDefault_HasView_x_27);
 l_Lean_Parser_Term_binderDefault_HasView = _init_l_Lean_Parser_Term_binderDefault_HasView();
lean::mark_persistent(l_Lean_Parser_Term_binderDefault_HasView);
 l_Lean_Parser_Term_binderDefault_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_binderDefault_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_binderDefault_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_binderDefault_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_binderDefault_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_binderDefault_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_binderDefault_Parser___closed__1 = _init_l_Lean_Parser_Term_binderDefault_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binderDefault_Parser___closed__1);
 l_Lean_Parser_Term_binderContent___closed__1 = _init_l_Lean_Parser_Term_binderContent___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binderContent___closed__1);
 l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__1 = _init_l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__1);
 l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__2 = _init_l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__2);
 l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__3 = _init_l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_binderContent_HasView_x_27___elambda__1___closed__3);
 l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__4 = _init_l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__4();
lean::mark_persistent(l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__4);
 l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__5 = _init_l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__5();
lean::mark_persistent(l_Lean_Parser_Term_binderContent_HasView_x_27___lambda__1___closed__5);
 l_Lean_Parser_Term_binderContent_HasView_x_27___closed__1 = _init_l_Lean_Parser_Term_binderContent_HasView_x_27___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binderContent_HasView_x_27___closed__1);
 l_Lean_Parser_Term_binderContent_HasView_x_27___closed__2 = _init_l_Lean_Parser_Term_binderContent_HasView_x_27___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_binderContent_HasView_x_27___closed__2);
 l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasTokens___closed__1 = _init_l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasTokens___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasTokens___closed__1);
 l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__1 = _init_l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__1);
 l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__2 = _init_l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__2);
 l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__3 = _init_l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_binderContent_Parser_Lean_Parser_HasView___closed__3);
 l_Lean_Parser_Term_simpleExplicitBinder = _init_l_Lean_Parser_Term_simpleExplicitBinder();
lean::mark_persistent(l_Lean_Parser_Term_simpleExplicitBinder);
 l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27 = _init_l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_simpleExplicitBinder_HasView_x_27);
 l_Lean_Parser_Term_simpleExplicitBinder_HasView = _init_l_Lean_Parser_Term_simpleExplicitBinder_HasView();
lean::mark_persistent(l_Lean_Parser_Term_simpleExplicitBinder_HasView);
 l_Lean_Parser_Term_simpleImplicitBinder = _init_l_Lean_Parser_Term_simpleImplicitBinder();
lean::mark_persistent(l_Lean_Parser_Term_simpleImplicitBinder);
 l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27 = _init_l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_simpleImplicitBinder_HasView_x_27);
 l_Lean_Parser_Term_simpleImplicitBinder_HasView = _init_l_Lean_Parser_Term_simpleImplicitBinder_HasView();
lean::mark_persistent(l_Lean_Parser_Term_simpleImplicitBinder_HasView);
 l_Lean_Parser_Term_simpleStrictImplicitBinder = _init_l_Lean_Parser_Term_simpleStrictImplicitBinder();
lean::mark_persistent(l_Lean_Parser_Term_simpleStrictImplicitBinder);
 l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27 = _init_l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView_x_27);
 l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView = _init_l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView();
lean::mark_persistent(l_Lean_Parser_Term_simpleStrictImplicitBinder_HasView);
 l_Lean_Parser_Term_simpleInstImplicitBinder = _init_l_Lean_Parser_Term_simpleInstImplicitBinder();
lean::mark_persistent(l_Lean_Parser_Term_simpleInstImplicitBinder);
 l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27 = _init_l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_simpleInstImplicitBinder_HasView_x_27);
 l_Lean_Parser_Term_simpleInstImplicitBinder_HasView = _init_l_Lean_Parser_Term_simpleInstImplicitBinder_HasView();
lean::mark_persistent(l_Lean_Parser_Term_simpleInstImplicitBinder_HasView);
 l_Lean_Parser_Term_simpleBinder = _init_l_Lean_Parser_Term_simpleBinder();
lean::mark_persistent(l_Lean_Parser_Term_simpleBinder);
 l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_simpleBinder_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_simpleBinder_HasView_x_27 = _init_l_Lean_Parser_Term_simpleBinder_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_simpleBinder_HasView_x_27);
 l_Lean_Parser_Term_simpleBinder_HasView = _init_l_Lean_Parser_Term_simpleBinder_HasView();
lean::mark_persistent(l_Lean_Parser_Term_simpleBinder_HasView);
 l_Lean_Parser_Term_simpleBinder_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_simpleBinder_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_simpleBinder_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_simpleBinder_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_simpleBinder_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_simpleBinder_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_simpleBinder_Parser___closed__1 = _init_l_Lean_Parser_Term_simpleBinder_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_simpleBinder_Parser___closed__1);
 l_Lean_Parser_Term_anonymousConstructor = _init_l_Lean_Parser_Term_anonymousConstructor();
lean::mark_persistent(l_Lean_Parser_Term_anonymousConstructor);
 l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_anonymousConstructor_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_anonymousConstructor_HasView_x_27 = _init_l_Lean_Parser_Term_anonymousConstructor_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_anonymousConstructor_HasView_x_27);
 l_Lean_Parser_Term_anonymousConstructor_HasView = _init_l_Lean_Parser_Term_anonymousConstructor_HasView();
lean::mark_persistent(l_Lean_Parser_Term_anonymousConstructor_HasView);
 l_Lean_Parser_Term_anonymousConstructor_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_anonymousConstructor_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_anonymousConstructor_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_anonymousConstructor_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_anonymousConstructor_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_anonymousConstructor_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_anonymousConstructor_Parser___closed__1 = _init_l_Lean_Parser_Term_anonymousConstructor_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_anonymousConstructor_Parser___closed__1);
 l_Lean_Parser_Term_explicitBinderContent___closed__1 = _init_l_Lean_Parser_Term_explicitBinderContent___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_explicitBinderContent___closed__1);
 l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___closed__1 = _init_l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_explicitBinderContent_HasView_x_27___closed__1);
 l_Lean_Parser_Term_explicitBinder___closed__1 = _init_l_Lean_Parser_Term_explicitBinder___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_explicitBinder___closed__1);
 l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1___closed__1 = _init_l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_explicitBinder_HasView_x_27___elambda__1___closed__1);
 l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_explicitBinder_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_explicitBinder_HasView_x_27___closed__1 = _init_l_Lean_Parser_Term_explicitBinder_HasView_x_27___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_explicitBinder_HasView_x_27___closed__1);
 l_Lean_Parser_Term_explicitBinder_HasView_x_27___closed__2 = _init_l_Lean_Parser_Term_explicitBinder_HasView_x_27___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_explicitBinder_HasView_x_27___closed__2);
 l_Lean_Parser_Term_implicitBinder = _init_l_Lean_Parser_Term_implicitBinder();
lean::mark_persistent(l_Lean_Parser_Term_implicitBinder);
 l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_implicitBinder_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_implicitBinder_HasView_x_27 = _init_l_Lean_Parser_Term_implicitBinder_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_implicitBinder_HasView_x_27);
 l_Lean_Parser_Term_implicitBinder_HasView = _init_l_Lean_Parser_Term_implicitBinder_HasView();
lean::mark_persistent(l_Lean_Parser_Term_implicitBinder_HasView);
 l_Lean_Parser_Term_strictImplicitBinder = _init_l_Lean_Parser_Term_strictImplicitBinder();
lean::mark_persistent(l_Lean_Parser_Term_strictImplicitBinder);
 l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27 = _init_l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_strictImplicitBinder_HasView_x_27);
 l_Lean_Parser_Term_strictImplicitBinder_HasView = _init_l_Lean_Parser_Term_strictImplicitBinder_HasView();
lean::mark_persistent(l_Lean_Parser_Term_strictImplicitBinder_HasView);
 l_Lean_Parser_Term_instImplicitNamedBinder = _init_l_Lean_Parser_Term_instImplicitNamedBinder();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitNamedBinder);
 l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27 = _init_l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitNamedBinder_HasView_x_27);
 l_Lean_Parser_Term_instImplicitNamedBinder_HasView = _init_l_Lean_Parser_Term_instImplicitNamedBinder_HasView();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitNamedBinder_HasView);
 l_Lean_Parser_Term_instImplicitAnonymousBinder = _init_l_Lean_Parser_Term_instImplicitAnonymousBinder();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitAnonymousBinder);
 l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView_x_27 = _init_l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView_x_27);
 l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView = _init_l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitAnonymousBinder_HasView);
 l_Lean_Parser_Term_instImplicitBinderContent = _init_l_Lean_Parser_Term_instImplicitBinderContent();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitBinderContent);
 l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27 = _init_l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitBinderContent_HasView_x_27);
 l_Lean_Parser_Term_instImplicitBinderContent_HasView = _init_l_Lean_Parser_Term_instImplicitBinderContent_HasView();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitBinderContent_HasView);
 l_Lean_Parser_Term_instImplicitBinder = _init_l_Lean_Parser_Term_instImplicitBinder();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitBinder);
 l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitBinder_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_instImplicitBinder_HasView_x_27 = _init_l_Lean_Parser_Term_instImplicitBinder_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitBinder_HasView_x_27);
 l_Lean_Parser_Term_instImplicitBinder_HasView = _init_l_Lean_Parser_Term_instImplicitBinder_HasView();
lean::mark_persistent(l_Lean_Parser_Term_instImplicitBinder_HasView);
 l_Lean_Parser_Term_bracketedBinder___closed__1 = _init_l_Lean_Parser_Term_bracketedBinder___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinder___closed__1);
 l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinder_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_bracketedBinder_HasView_x_27___closed__1 = _init_l_Lean_Parser_Term_bracketedBinder_HasView_x_27___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinder_HasView_x_27___closed__1);
 l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__1 = _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__1);
 l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__2 = _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__2);
 l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__3 = _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasTokens___closed__3);
 l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__1 = _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__1);
 l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__2 = _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__2);
 l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__3 = _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__3);
 l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__4 = _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__4();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__4);
 l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__5 = _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__5();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__5);
 l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__6 = _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__6();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__6);
 l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__7 = _init_l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__7();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinder_Parser_Lean_Parser_HasView___closed__7);
 l_Lean_Parser_Term_binder = _init_l_Lean_Parser_Term_binder();
lean::mark_persistent(l_Lean_Parser_Term_binder);
 l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_binder_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_binder_HasView_x_27 = _init_l_Lean_Parser_Term_binder_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_binder_HasView_x_27);
 l_Lean_Parser_Term_binder_HasView = _init_l_Lean_Parser_Term_binder_HasView();
lean::mark_persistent(l_Lean_Parser_Term_binder_HasView);
 l_Lean_Parser_Term_binder_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_binder_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_binder_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_binder_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_binder_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_binder_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_binder_Parser___closed__1 = _init_l_Lean_Parser_Term_binder_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binder_Parser___closed__1);
 l_Lean_Parser_Term_bindersTypes = _init_l_Lean_Parser_Term_bindersTypes();
lean::mark_persistent(l_Lean_Parser_Term_bindersTypes);
 l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_bindersTypes_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_bindersTypes_HasView_x_27 = _init_l_Lean_Parser_Term_bindersTypes_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_bindersTypes_HasView_x_27);
 l_Lean_Parser_Term_bindersTypes_HasView = _init_l_Lean_Parser_Term_bindersTypes_HasView();
lean::mark_persistent(l_Lean_Parser_Term_bindersTypes_HasView);
 l_Lean_Parser_Term_mixedBinder = _init_l_Lean_Parser_Term_mixedBinder();
lean::mark_persistent(l_Lean_Parser_Term_mixedBinder);
 l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_mixedBinder_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_mixedBinder_HasView_x_27 = _init_l_Lean_Parser_Term_mixedBinder_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_mixedBinder_HasView_x_27);
 l_Lean_Parser_Term_mixedBinder_HasView = _init_l_Lean_Parser_Term_mixedBinder_HasView();
lean::mark_persistent(l_Lean_Parser_Term_mixedBinder_HasView);
 l_Lean_Parser_Term_bindersRemainder = _init_l_Lean_Parser_Term_bindersRemainder();
lean::mark_persistent(l_Lean_Parser_Term_bindersRemainder);
 l_Lean_Parser_Term_bindersRemainder_HasView_x_27___elambda__1___closed__1 = _init_l_Lean_Parser_Term_bindersRemainder_HasView_x_27___elambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_bindersRemainder_HasView_x_27___elambda__1___closed__1);
 l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__4 = _init_l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__4();
lean::mark_persistent(l_Lean_Parser_Term_bindersRemainder_HasView_x_27___lambda__1___closed__4);
 l_Lean_Parser_Term_bindersRemainder_HasView_x_27 = _init_l_Lean_Parser_Term_bindersRemainder_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_bindersRemainder_HasView_x_27);
 l_Lean_Parser_Term_bindersRemainder_HasView = _init_l_Lean_Parser_Term_bindersRemainder_HasView();
lean::mark_persistent(l_Lean_Parser_Term_bindersRemainder_HasView);
 l_Lean_Parser_Term_bindersExt = _init_l_Lean_Parser_Term_bindersExt();
lean::mark_persistent(l_Lean_Parser_Term_bindersExt);
 l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__4 = _init_l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__4();
lean::mark_persistent(l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__4);
 l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__5 = _init_l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__5();
lean::mark_persistent(l_Lean_Parser_Term_bindersExt_HasView_x_27___lambda__1___closed__5);
 l_Lean_Parser_Term_bindersExt_HasView_x_27 = _init_l_Lean_Parser_Term_bindersExt_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_bindersExt_HasView_x_27);
 l_Lean_Parser_Term_bindersExt_HasView = _init_l_Lean_Parser_Term_bindersExt_HasView();
lean::mark_persistent(l_Lean_Parser_Term_bindersExt_HasView);
 l_Lean_Parser_Term_bindersExt_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_bindersExt_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_bindersExt_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_bindersExt_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_bindersExt_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_bindersExt_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_bindersExt_Parser___closed__1 = _init_l_Lean_Parser_Term_bindersExt_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_bindersExt_Parser___closed__1);
 l_Lean_Parser_Term_binders = _init_l_Lean_Parser_Term_binders();
lean::mark_persistent(l_Lean_Parser_Term_binders);
 l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_binders_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_binders_HasView_x_27 = _init_l_Lean_Parser_Term_binders_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_binders_HasView_x_27);
 l_Lean_Parser_Term_binders_HasView = _init_l_Lean_Parser_Term_binders_HasView();
lean::mark_persistent(l_Lean_Parser_Term_binders_HasView);
 l_Lean_Parser_Term_binders_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_binders_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_binders_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_binders_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_binders_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_binders_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_binders_Parser___closed__1 = _init_l_Lean_Parser_Term_binders_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_binders_Parser___closed__1);
 l_Lean_Parser_Term_bracketedBinders = _init_l_Lean_Parser_Term_bracketedBinders();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinders);
 l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1___closed__1 = _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1___closed__1);
 l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1___closed__2 = _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinders_HasView_x_27___elambda__1___closed__2);
 l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__4 = _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__4();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__4);
 l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5 = _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__5);
 l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__6 = _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__6();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinders_HasView_x_27___lambda__1___closed__6);
 l_Lean_Parser_Term_bracketedBinders_HasView_x_27 = _init_l_Lean_Parser_Term_bracketedBinders_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinders_HasView_x_27);
 l_Lean_Parser_Term_bracketedBinders_HasView = _init_l_Lean_Parser_Term_bracketedBinders_HasView();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinders_HasView);
 l_Lean_Parser_Term_bracketedBinders_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_bracketedBinders_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinders_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_bracketedBinders_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_bracketedBinders_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinders_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_bracketedBinders_Parser___closed__1 = _init_l_Lean_Parser_Term_bracketedBinders_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_bracketedBinders_Parser___closed__1);
 l_Lean_Parser_Term_lambda = _init_l_Lean_Parser_Term_lambda();
lean::mark_persistent(l_Lean_Parser_Term_lambda);
 l_Lean_Parser_Term_lambda_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_lambda_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_lambda_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_lambda_HasView_x_27 = _init_l_Lean_Parser_Term_lambda_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_lambda_HasView_x_27);
 l_Lean_Parser_Term_lambda_HasView = _init_l_Lean_Parser_Term_lambda_HasView();
lean::mark_persistent(l_Lean_Parser_Term_lambda_HasView);
 l_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_lambda_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_lambda_Parser___closed__1 = _init_l_Lean_Parser_Term_lambda_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_lambda_Parser___closed__1);
 l_Lean_Parser_Term_assumeAnonymous = _init_l_Lean_Parser_Term_assumeAnonymous();
lean::mark_persistent(l_Lean_Parser_Term_assumeAnonymous);
 l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_assumeAnonymous_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_assumeAnonymous_HasView_x_27 = _init_l_Lean_Parser_Term_assumeAnonymous_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_assumeAnonymous_HasView_x_27);
 l_Lean_Parser_Term_assumeAnonymous_HasView = _init_l_Lean_Parser_Term_assumeAnonymous_HasView();
lean::mark_persistent(l_Lean_Parser_Term_assumeAnonymous_HasView);
 l_Lean_Parser_Term_assumeBinders = _init_l_Lean_Parser_Term_assumeBinders();
lean::mark_persistent(l_Lean_Parser_Term_assumeBinders);
 l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_assumeBinders_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_assumeBinders_HasView_x_27 = _init_l_Lean_Parser_Term_assumeBinders_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_assumeBinders_HasView_x_27);
 l_Lean_Parser_Term_assumeBinders_HasView = _init_l_Lean_Parser_Term_assumeBinders_HasView();
lean::mark_persistent(l_Lean_Parser_Term_assumeBinders_HasView);
 l_Lean_Parser_Term_assume = _init_l_Lean_Parser_Term_assume();
lean::mark_persistent(l_Lean_Parser_Term_assume);
 l_Lean_Parser_Term_assume_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_assume_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_assume_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_assume_HasView_x_27 = _init_l_Lean_Parser_Term_assume_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_assume_HasView_x_27);
 l_Lean_Parser_Term_assume_HasView = _init_l_Lean_Parser_Term_assume_HasView();
lean::mark_persistent(l_Lean_Parser_Term_assume_HasView);
 l_Lean_Parser_Term_assume_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_assume_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_assume_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_assume_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_assume_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_assume_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_assume_Parser___closed__1 = _init_l_Lean_Parser_Term_assume_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_assume_Parser___closed__1);
 l_Lean_Parser_Term_pi = _init_l_Lean_Parser_Term_pi();
lean::mark_persistent(l_Lean_Parser_Term_pi);
 l_Lean_Parser_Term_pi_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_pi_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_pi_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_pi_HasView_x_27 = _init_l_Lean_Parser_Term_pi_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_pi_HasView_x_27);
 l_Lean_Parser_Term_pi_HasView = _init_l_Lean_Parser_Term_pi_HasView();
lean::mark_persistent(l_Lean_Parser_Term_pi_HasView);
 l_Lean_Parser_Term_pi_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_pi_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_pi_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_pi_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_pi_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_pi_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_pi_Parser___closed__1 = _init_l_Lean_Parser_Term_pi_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_pi_Parser___closed__1);
 l_Lean_Parser_Term_explicitModifier = _init_l_Lean_Parser_Term_explicitModifier();
lean::mark_persistent(l_Lean_Parser_Term_explicitModifier);
 l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1___closed__1 = _init_l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1___closed__1);
 l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1___closed__2 = _init_l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_explicitModifier_HasView_x_27___elambda__1___closed__2);
 l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__4 = _init_l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__4();
lean::mark_persistent(l_Lean_Parser_Term_explicitModifier_HasView_x_27___lambda__1___closed__4);
 l_Lean_Parser_Term_explicitModifier_HasView_x_27 = _init_l_Lean_Parser_Term_explicitModifier_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_explicitModifier_HasView_x_27);
 l_Lean_Parser_Term_explicitModifier_HasView = _init_l_Lean_Parser_Term_explicitModifier_HasView();
lean::mark_persistent(l_Lean_Parser_Term_explicitModifier_HasView);
 l_Lean_Parser_Term_explicit = _init_l_Lean_Parser_Term_explicit();
lean::mark_persistent(l_Lean_Parser_Term_explicit);
 l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2___closed__2 = _init_l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_explicit_HasView_x_27___elambda__2___closed__2);
 l_Lean_Parser_Term_explicit_HasView_x_27 = _init_l_Lean_Parser_Term_explicit_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_explicit_HasView_x_27);
 l_Lean_Parser_Term_explicit_HasView = _init_l_Lean_Parser_Term_explicit_HasView();
lean::mark_persistent(l_Lean_Parser_Term_explicit_HasView);
 l_Lean_Parser_Term_explicit_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_explicit_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_explicit_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_explicit_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_explicit_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_explicit_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_explicit_Parser___closed__1 = _init_l_Lean_Parser_Term_explicit_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_explicit_Parser___closed__1);
 l_Lean_Parser_Term_from = _init_l_Lean_Parser_Term_from();
lean::mark_persistent(l_Lean_Parser_Term_from);
 l_Lean_Parser_Term_from_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_from_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_from_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_from_HasView_x_27 = _init_l_Lean_Parser_Term_from_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_from_HasView_x_27);
 l_Lean_Parser_Term_from_HasView = _init_l_Lean_Parser_Term_from_HasView();
lean::mark_persistent(l_Lean_Parser_Term_from_HasView);
 l_Lean_Parser_Term_from_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_from_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_from_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_from_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_from_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_from_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_from_Parser___closed__1 = _init_l_Lean_Parser_Term_from_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_from_Parser___closed__1);
 l_Lean_Parser_Term_letLhsId = _init_l_Lean_Parser_Term_letLhsId();
lean::mark_persistent(l_Lean_Parser_Term_letLhsId);
 l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_letLhsId_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_letLhsId_HasView_x_27 = _init_l_Lean_Parser_Term_letLhsId_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_letLhsId_HasView_x_27);
 l_Lean_Parser_Term_letLhsId_HasView = _init_l_Lean_Parser_Term_letLhsId_HasView();
lean::mark_persistent(l_Lean_Parser_Term_letLhsId_HasView);
 l_Lean_Parser_Term_letLhs = _init_l_Lean_Parser_Term_letLhs();
lean::mark_persistent(l_Lean_Parser_Term_letLhs);
 l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_letLhs_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_letLhs_HasView_x_27 = _init_l_Lean_Parser_Term_letLhs_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_letLhs_HasView_x_27);
 l_Lean_Parser_Term_letLhs_HasView = _init_l_Lean_Parser_Term_letLhs_HasView();
lean::mark_persistent(l_Lean_Parser_Term_letLhs_HasView);
 l_Lean_Parser_Term_let = _init_l_Lean_Parser_Term_let();
lean::mark_persistent(l_Lean_Parser_Term_let);
 l_Lean_Parser_Term_let_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_let_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_let_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_let_HasView_x_27 = _init_l_Lean_Parser_Term_let_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_let_HasView_x_27);
 l_Lean_Parser_Term_let_HasView = _init_l_Lean_Parser_Term_let_HasView();
lean::mark_persistent(l_Lean_Parser_Term_let_HasView);
 l_Lean_Parser_Term_let_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_let_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_let_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_let_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_let_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_let_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_let_Parser___closed__1 = _init_l_Lean_Parser_Term_let_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_let_Parser___closed__1);
 l_Lean_Parser_Term_optIdent = _init_l_Lean_Parser_Term_optIdent();
lean::mark_persistent(l_Lean_Parser_Term_optIdent);
 l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_optIdent_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_optIdent_HasView_x_27 = _init_l_Lean_Parser_Term_optIdent_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_optIdent_HasView_x_27);
 l_Lean_Parser_Term_optIdent_HasView = _init_l_Lean_Parser_Term_optIdent_HasView();
lean::mark_persistent(l_Lean_Parser_Term_optIdent_HasView);
 l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_optIdent_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_optIdent_Parser___closed__1 = _init_l_Lean_Parser_Term_optIdent_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_optIdent_Parser___closed__1);
 l_Lean_Parser_Term_haveTerm = _init_l_Lean_Parser_Term_haveTerm();
lean::mark_persistent(l_Lean_Parser_Term_haveTerm);
 l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_haveTerm_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_haveTerm_HasView_x_27 = _init_l_Lean_Parser_Term_haveTerm_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_haveTerm_HasView_x_27);
 l_Lean_Parser_Term_haveTerm_HasView = _init_l_Lean_Parser_Term_haveTerm_HasView();
lean::mark_persistent(l_Lean_Parser_Term_haveTerm_HasView);
 l_Lean_Parser_Term_haveFrom = _init_l_Lean_Parser_Term_haveFrom();
lean::mark_persistent(l_Lean_Parser_Term_haveFrom);
 l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_haveFrom_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_haveFrom_HasView_x_27 = _init_l_Lean_Parser_Term_haveFrom_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_haveFrom_HasView_x_27);
 l_Lean_Parser_Term_haveFrom_HasView = _init_l_Lean_Parser_Term_haveFrom_HasView();
lean::mark_persistent(l_Lean_Parser_Term_haveFrom_HasView);
 l_Lean_Parser_Term_haveProof = _init_l_Lean_Parser_Term_haveProof();
lean::mark_persistent(l_Lean_Parser_Term_haveProof);
 l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_haveProof_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_haveProof_HasView_x_27 = _init_l_Lean_Parser_Term_haveProof_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_haveProof_HasView_x_27);
 l_Lean_Parser_Term_haveProof_HasView = _init_l_Lean_Parser_Term_haveProof_HasView();
lean::mark_persistent(l_Lean_Parser_Term_haveProof_HasView);
 l_Lean_Parser_Term_have = _init_l_Lean_Parser_Term_have();
lean::mark_persistent(l_Lean_Parser_Term_have);
 l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_have_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_have_HasView_x_27 = _init_l_Lean_Parser_Term_have_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_have_HasView_x_27);
 l_Lean_Parser_Term_have_HasView = _init_l_Lean_Parser_Term_have_HasView();
lean::mark_persistent(l_Lean_Parser_Term_have_HasView);
 l_Lean_Parser_Term_have_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_have_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_have_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_have_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_have_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_have_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_have_Parser___closed__1 = _init_l_Lean_Parser_Term_have_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_have_Parser___closed__1);
 l_Lean_Parser_Term_show = _init_l_Lean_Parser_Term_show();
lean::mark_persistent(l_Lean_Parser_Term_show);
 l_Lean_Parser_Term_show_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_show_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_show_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_show_HasView_x_27 = _init_l_Lean_Parser_Term_show_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_show_HasView_x_27);
 l_Lean_Parser_Term_show_HasView = _init_l_Lean_Parser_Term_show_HasView();
lean::mark_persistent(l_Lean_Parser_Term_show_HasView);
 l_Lean_Parser_Term_show_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_show_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_show_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_show_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_show_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_show_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_show_Parser___closed__1 = _init_l_Lean_Parser_Term_show_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_show_Parser___closed__1);
 l_Lean_Parser_Term_matchEquation = _init_l_Lean_Parser_Term_matchEquation();
lean::mark_persistent(l_Lean_Parser_Term_matchEquation);
 l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_matchEquation_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_matchEquation_HasView_x_27 = _init_l_Lean_Parser_Term_matchEquation_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_matchEquation_HasView_x_27);
 l_Lean_Parser_Term_matchEquation_HasView = _init_l_Lean_Parser_Term_matchEquation_HasView();
lean::mark_persistent(l_Lean_Parser_Term_matchEquation_HasView);
 l_Lean_Parser_Term_match = _init_l_Lean_Parser_Term_match();
lean::mark_persistent(l_Lean_Parser_Term_match);
 l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__4 = _init_l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__4();
lean::mark_persistent(l_Lean_Parser_Term_match_HasView_x_27___lambda__1___closed__4);
 l_Lean_Parser_Term_match_HasView_x_27 = _init_l_Lean_Parser_Term_match_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_match_HasView_x_27);
 l_Lean_Parser_Term_match_HasView = _init_l_Lean_Parser_Term_match_HasView();
lean::mark_persistent(l_Lean_Parser_Term_match_HasView);
 l_Lean_Parser_Term_match_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_match_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_match_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_match_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_match_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_match_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_match_Parser___closed__1 = _init_l_Lean_Parser_Term_match_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_match_Parser___closed__1);
 l_Lean_Parser_Term_if = _init_l_Lean_Parser_Term_if();
lean::mark_persistent(l_Lean_Parser_Term_if);
 l_Lean_Parser_Term_if_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_if_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_if_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_if_HasView_x_27 = _init_l_Lean_Parser_Term_if_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_if_HasView_x_27);
 l_Lean_Parser_Term_if_HasView = _init_l_Lean_Parser_Term_if_HasView();
lean::mark_persistent(l_Lean_Parser_Term_if_HasView);
 l_Lean_Parser_Term_if_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_if_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_if_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_if_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_if_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_if_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_if_Parser___closed__1 = _init_l_Lean_Parser_Term_if_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_if_Parser___closed__1);
 l_Lean_Parser_Term_structInstType = _init_l_Lean_Parser_Term_structInstType();
lean::mark_persistent(l_Lean_Parser_Term_structInstType);
 l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_structInstType_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_structInstType_HasView_x_27 = _init_l_Lean_Parser_Term_structInstType_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_structInstType_HasView_x_27);
 l_Lean_Parser_Term_structInstType_HasView = _init_l_Lean_Parser_Term_structInstType_HasView();
lean::mark_persistent(l_Lean_Parser_Term_structInstType_HasView);
 l_Lean_Parser_Term_structInstWith = _init_l_Lean_Parser_Term_structInstWith();
lean::mark_persistent(l_Lean_Parser_Term_structInstWith);
 l_Lean_Parser_Term_structInstWith_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_structInstWith_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_structInstWith_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_structInstWith_HasView_x_27 = _init_l_Lean_Parser_Term_structInstWith_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_structInstWith_HasView_x_27);
 l_Lean_Parser_Term_structInstWith_HasView = _init_l_Lean_Parser_Term_structInstWith_HasView();
lean::mark_persistent(l_Lean_Parser_Term_structInstWith_HasView);
 l_Lean_Parser_Term_structInstField = _init_l_Lean_Parser_Term_structInstField();
lean::mark_persistent(l_Lean_Parser_Term_structInstField);
 l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_structInstField_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_structInstField_HasView_x_27 = _init_l_Lean_Parser_Term_structInstField_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_structInstField_HasView_x_27);
 l_Lean_Parser_Term_structInstField_HasView = _init_l_Lean_Parser_Term_structInstField_HasView();
lean::mark_persistent(l_Lean_Parser_Term_structInstField_HasView);
 l_Lean_Parser_Term_structInstSource = _init_l_Lean_Parser_Term_structInstSource();
lean::mark_persistent(l_Lean_Parser_Term_structInstSource);
 l_Lean_Parser_Term_structInstSource_HasView_x_27___elambda__1___closed__1 = _init_l_Lean_Parser_Term_structInstSource_HasView_x_27___elambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_structInstSource_HasView_x_27___elambda__1___closed__1);
 l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_structInstSource_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_structInstSource_HasView_x_27 = _init_l_Lean_Parser_Term_structInstSource_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_structInstSource_HasView_x_27);
 l_Lean_Parser_Term_structInstSource_HasView = _init_l_Lean_Parser_Term_structInstSource_HasView();
lean::mark_persistent(l_Lean_Parser_Term_structInstSource_HasView);
 l_Lean_Parser_Term_structInstItem = _init_l_Lean_Parser_Term_structInstItem();
lean::mark_persistent(l_Lean_Parser_Term_structInstItem);
 l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_structInstItem_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_structInstItem_HasView_x_27 = _init_l_Lean_Parser_Term_structInstItem_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_structInstItem_HasView_x_27);
 l_Lean_Parser_Term_structInstItem_HasView = _init_l_Lean_Parser_Term_structInstItem_HasView();
lean::mark_persistent(l_Lean_Parser_Term_structInstItem_HasView);
 l_Lean_Parser_Term_structInst = _init_l_Lean_Parser_Term_structInst();
lean::mark_persistent(l_Lean_Parser_Term_structInst);
 l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__4 = _init_l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__4();
lean::mark_persistent(l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__4);
 l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__5 = _init_l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__5();
lean::mark_persistent(l_Lean_Parser_Term_structInst_HasView_x_27___lambda__1___closed__5);
 l_Lean_Parser_Term_structInst_HasView_x_27 = _init_l_Lean_Parser_Term_structInst_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_structInst_HasView_x_27);
 l_Lean_Parser_Term_structInst_HasView = _init_l_Lean_Parser_Term_structInst_HasView();
lean::mark_persistent(l_Lean_Parser_Term_structInst_HasView);
 l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_structInst_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_structInst_Parser___closed__1 = _init_l_Lean_Parser_Term_structInst_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_structInst_Parser___closed__1);
 l_Lean_Parser_Term_Subtype = _init_l_Lean_Parser_Term_Subtype();
lean::mark_persistent(l_Lean_Parser_Term_Subtype);
 l_Lean_Parser_Term_Subtype_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_Subtype_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_Subtype_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_Subtype_HasView_x_27 = _init_l_Lean_Parser_Term_Subtype_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_Subtype_HasView_x_27);
 l_Lean_Parser_Term_Subtype_HasView = _init_l_Lean_Parser_Term_Subtype_HasView();
lean::mark_persistent(l_Lean_Parser_Term_Subtype_HasView);
 l_Lean_Parser_Term_Subtype_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_Subtype_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_Subtype_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_Subtype_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_Subtype_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_Subtype_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_Subtype_Parser___closed__1 = _init_l_Lean_Parser_Term_Subtype_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_Subtype_Parser___closed__1);
 l_Lean_Parser_Term_inaccessible = _init_l_Lean_Parser_Term_inaccessible();
lean::mark_persistent(l_Lean_Parser_Term_inaccessible);
 l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_inaccessible_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_inaccessible_HasView_x_27 = _init_l_Lean_Parser_Term_inaccessible_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_inaccessible_HasView_x_27);
 l_Lean_Parser_Term_inaccessible_HasView = _init_l_Lean_Parser_Term_inaccessible_HasView();
lean::mark_persistent(l_Lean_Parser_Term_inaccessible_HasView);
 l_Lean_Parser_Term_inaccessible_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_inaccessible_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_inaccessible_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_inaccessible_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_inaccessible_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_inaccessible_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_inaccessible_Parser___closed__1 = _init_l_Lean_Parser_Term_inaccessible_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_inaccessible_Parser___closed__1);
 l_Lean_Parser_Term_anonymousInaccessible = _init_l_Lean_Parser_Term_anonymousInaccessible();
lean::mark_persistent(l_Lean_Parser_Term_anonymousInaccessible);
 l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27___elambda__1___closed__1 = _init_l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27___elambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27___elambda__1___closed__1);
 l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27 = _init_l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_anonymousInaccessible_HasView_x_27);
 l_Lean_Parser_Term_anonymousInaccessible_HasView = _init_l_Lean_Parser_Term_anonymousInaccessible_HasView();
lean::mark_persistent(l_Lean_Parser_Term_anonymousInaccessible_HasView);
 l_Lean_Parser_Term_anonymousInaccessible_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_anonymousInaccessible_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_anonymousInaccessible_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_anonymousInaccessible_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_anonymousInaccessible_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_anonymousInaccessible_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_anonymousInaccessible_Parser___closed__1 = _init_l_Lean_Parser_Term_anonymousInaccessible_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_anonymousInaccessible_Parser___closed__1);
 l_Lean_Parser_Term_sorry = _init_l_Lean_Parser_Term_sorry();
lean::mark_persistent(l_Lean_Parser_Term_sorry);
 l_Lean_Parser_Term_sorry_HasView_x_27___elambda__1___closed__1 = _init_l_Lean_Parser_Term_sorry_HasView_x_27___elambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_sorry_HasView_x_27___elambda__1___closed__1);
 l_Lean_Parser_Term_sorry_HasView_x_27 = _init_l_Lean_Parser_Term_sorry_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_sorry_HasView_x_27);
 l_Lean_Parser_Term_sorry_HasView = _init_l_Lean_Parser_Term_sorry_HasView();
lean::mark_persistent(l_Lean_Parser_Term_sorry_HasView);
 l_Lean_Parser_Term_sorry_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_sorry_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_sorry_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_sorry_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_sorry_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_sorry_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_sorry_Parser___closed__1 = _init_l_Lean_Parser_Term_sorry_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_sorry_Parser___closed__1);
 l_Lean_Parser_Term_borrowPrec = _init_l_Lean_Parser_Term_borrowPrec();
lean::mark_persistent(l_Lean_Parser_Term_borrowPrec);
 l_Lean_Parser_Term_borrowed = _init_l_Lean_Parser_Term_borrowed();
lean::mark_persistent(l_Lean_Parser_Term_borrowed);
 l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_borrowed_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_borrowed_HasView_x_27 = _init_l_Lean_Parser_Term_borrowed_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_borrowed_HasView_x_27);
 l_Lean_Parser_Term_borrowed_HasView = _init_l_Lean_Parser_Term_borrowed_HasView();
lean::mark_persistent(l_Lean_Parser_Term_borrowed_HasView);
 l_Lean_Parser_Term_borrowed_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_borrowed_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_borrowed_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_borrowed_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_borrowed_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_borrowed_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_borrowed_Parser___closed__1 = _init_l_Lean_Parser_Term_borrowed_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_borrowed_Parser___closed__1);
 l_Lean_Parser_Term_depArrow = _init_l_Lean_Parser_Term_depArrow();
lean::mark_persistent(l_Lean_Parser_Term_depArrow);
 l_Lean_Parser_Term_depArrow_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_depArrow_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_depArrow_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_depArrow_HasView_x_27 = _init_l_Lean_Parser_Term_depArrow_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_depArrow_HasView_x_27);
 l_Lean_Parser_Term_depArrow_HasView = _init_l_Lean_Parser_Term_depArrow_HasView();
lean::mark_persistent(l_Lean_Parser_Term_depArrow_HasView);
 l_Lean_Parser_Term_depArrow_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_depArrow_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_depArrow_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_depArrow_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_depArrow_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_depArrow_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_depArrow_Parser___closed__1 = _init_l_Lean_Parser_Term_depArrow_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_depArrow_Parser___closed__1);
 l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___rarg___closed__1 = _init_l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___rarg___closed__1();
lean::mark_persistent(l_Lean_Parser_stringLit_Parser___at_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens___spec__1___rarg___closed__1);
 l_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_builtinLeadingParsers_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_builtinLeadingParsers = _init_l_Lean_Parser_Term_builtinLeadingParsers();
lean::mark_persistent(l_Lean_Parser_Term_builtinLeadingParsers);
 l_Lean_Parser_Term_sortApp = _init_l_Lean_Parser_Term_sortApp();
lean::mark_persistent(l_Lean_Parser_Term_sortApp);
 l_Lean_Parser_Term_sortApp_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_sortApp_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_sortApp_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_sortApp_HasView_x_27 = _init_l_Lean_Parser_Term_sortApp_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_sortApp_HasView_x_27);
 l_Lean_Parser_Term_sortApp_HasView = _init_l_Lean_Parser_Term_sortApp_HasView();
lean::mark_persistent(l_Lean_Parser_Term_sortApp_HasView);
 l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_sortApp_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_sortApp_Parser___closed__1 = _init_l_Lean_Parser_Term_sortApp_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_sortApp_Parser___closed__1);
 l_Lean_Parser_Term_app = _init_l_Lean_Parser_Term_app();
lean::mark_persistent(l_Lean_Parser_Term_app);
 l_Lean_Parser_Term_app_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_app_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_app_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_app_HasView_x_27 = _init_l_Lean_Parser_Term_app_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_app_HasView_x_27);
 l_Lean_Parser_Term_app_HasView = _init_l_Lean_Parser_Term_app_HasView();
lean::mark_persistent(l_Lean_Parser_Term_app_HasView);
 l_Lean_Parser_Term_app_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_app_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_app_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_app_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_app_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_app_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_app_Parser___closed__1 = _init_l_Lean_Parser_Term_app_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_app_Parser___closed__1);
 l_Lean_Parser_Term_arrow = _init_l_Lean_Parser_Term_arrow();
lean::mark_persistent(l_Lean_Parser_Term_arrow);
 l_Lean_Parser_Term_arrow_HasView_x_27___elambda__2___closed__1 = _init_l_Lean_Parser_Term_arrow_HasView_x_27___elambda__2___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_arrow_HasView_x_27___elambda__2___closed__1);
 l_Lean_Parser_Term_arrow_HasView_x_27 = _init_l_Lean_Parser_Term_arrow_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_arrow_HasView_x_27);
 l_Lean_Parser_Term_arrow_HasView = _init_l_Lean_Parser_Term_arrow_HasView();
lean::mark_persistent(l_Lean_Parser_Term_arrow_HasView);
 l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_arrow_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_arrow_Parser___closed__1 = _init_l_Lean_Parser_Term_arrow_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_arrow_Parser___closed__1);
 l_Lean_Parser_Term_projectionSpec = _init_l_Lean_Parser_Term_projectionSpec();
lean::mark_persistent(l_Lean_Parser_Term_projectionSpec);
 l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3 = _init_l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3();
lean::mark_persistent(l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__3);
 l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__4 = _init_l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__4();
lean::mark_persistent(l_Lean_Parser_Term_projectionSpec_HasView_x_27___lambda__1___closed__4);
 l_Lean_Parser_Term_projectionSpec_HasView_x_27 = _init_l_Lean_Parser_Term_projectionSpec_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_projectionSpec_HasView_x_27);
 l_Lean_Parser_Term_projectionSpec_HasView = _init_l_Lean_Parser_Term_projectionSpec_HasView();
lean::mark_persistent(l_Lean_Parser_Term_projectionSpec_HasView);
 l_Lean_Parser_Term_projection = _init_l_Lean_Parser_Term_projection();
lean::mark_persistent(l_Lean_Parser_Term_projection);
 l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__1 = _init_l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__1);
 l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__2 = _init_l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__2();
lean::mark_persistent(l_Lean_Parser_Term_projection_HasView_x_27___lambda__1___closed__2);
 l_Lean_Parser_Term_projection_HasView_x_27 = _init_l_Lean_Parser_Term_projection_HasView_x_27();
lean::mark_persistent(l_Lean_Parser_Term_projection_HasView_x_27);
 l_Lean_Parser_Term_projection_HasView = _init_l_Lean_Parser_Term_projection_HasView();
lean::mark_persistent(l_Lean_Parser_Term_projection_HasView);
 l_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView = _init_l_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView();
lean::mark_persistent(l_Lean_Parser_Term_projection_Parser_Lean_Parser_HasView);
 l_Lean_Parser_Term_projection_Parser___closed__1 = _init_l_Lean_Parser_Term_projection_Parser___closed__1();
lean::mark_persistent(l_Lean_Parser_Term_projection_Parser___closed__1);
 l_Lean_Parser_Term_projection_tokens = _init_l_Lean_Parser_Term_projection_tokens();
lean::mark_persistent(l_Lean_Parser_Term_projection_tokens);
 l_Lean_Parser_Term_builtinTrailingParsers_Lean_Parser_HasTokens = _init_l_Lean_Parser_Term_builtinTrailingParsers_Lean_Parser_HasTokens();
lean::mark_persistent(l_Lean_Parser_Term_builtinTrailingParsers_Lean_Parser_HasTokens);
 l_Lean_Parser_Term_builtinTrailingParsers = _init_l_Lean_Parser_Term_builtinTrailingParsers();
lean::mark_persistent(l_Lean_Parser_Term_builtinTrailingParsers);
 l___private_init_lean_parser_term_1__trailing___closed__1 = _init_l___private_init_lean_parser_term_1__trailing___closed__1();
lean::mark_persistent(l___private_init_lean_parser_term_1__trailing___closed__1);
 l___private_init_lean_parser_term_1__trailing___closed__2 = _init_l___private_init_lean_parser_term_1__trailing___closed__2();
lean::mark_persistent(l___private_init_lean_parser_term_1__trailing___closed__2);
 l___private_init_lean_parser_term_2__leading___closed__1 = _init_l___private_init_lean_parser_term_2__leading___closed__1();
lean::mark_persistent(l___private_init_lean_parser_term_2__leading___closed__1);
 l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___closed__1 = _init_l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___closed__1();
lean::mark_persistent(l_Lean_Parser_prattParser___at_Lean_Parser_termParser_run___spec__1___closed__1);
return w;
}
